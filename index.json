{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "Articles/Examples/AdditiveScenes/index.html": {
    "href": "Articles/Examples/AdditiveScenes/index.html",
    "title": "Additive Scenes Example",
    "keywords": "Additive Scenes Example IMPORTANT: Make sure you have a layer in project settings called Player for this example to work well. In Build Settings, remove all scenes and add all of the scenes from the Scenes folder in the following order: MainScene SubScene Open the MainScene in the Editor and make sure the Sub Scenes list in the Network Manager component on the Network scene object contains the SubScene scene. This is already setup by default, but if the MainScene was opened and saved before putting the scenes in the Build Settings list, the Sub Scenes list may be cleared accidentally. File -> Build and Run Start up to 3 built instances: These will all be client players. Press Play in the Editor and click Host (Server + Client) in the HUD This will be the host and the 1st player of up to 4. You can also use Server Only if you prefer. Click Client in the built instances. WASDQE keys to move & turn your player capsule. There are objects in the corners of the scene hidden by Proximity Checkers. The big area in the middle is where the subscene will be loaded when you get near the shelter. There are also networked objects inside the subscene, also with Proximity Checkers. Since subscenes are only loaded for individual clients, other clients that are outside the middle Zone won't see what those in the subscene can see. If you play a built instance as Host or Server and play as client in the editor, you'll see the subscene content load and unload in the hierarchy as you move in and out of the middle Zone."
  },
  "Articles/Examples/Basic/index.html": {
    "href": "Articles/Examples/Basic/index.html",
    "title": "Basic",
    "keywords": "Basic General description of Basic example."
  },
  "Articles/Examples/Pong/index.html": {
    "href": "Articles/Examples/Pong/index.html",
    "title": "Pong",
    "keywords": "Pong A simple example for \"How to built a multiplayer game with Mirror\" is Pong, which is included in the AssetStore package of Mirror. It illustrates the usage of NetworkManager, NetworkManagerHUD, NetworkBehaviour, NetworkIdentity, NetworkTransform, NetworkStartPosition and NetworkingAttributes. Setting the number of players First of all, let's have a look at the NetworkManager object in the main scene. When adding the NetworkManager component to a gameobject, a few default settings are already set ( Don't destroy on Load , Run in Background , ...) For playing Pong the maximum number of players is 2, so the setting Network Info/Max connections will also be 2. As there are no other scenes (room, online or offline scene) in this sample the properties for Offline Scene and Online Scene will stay empty. Creating the player Furthermore every player needs a racket to play with. Each player who joins the game will have his own controllable object, which represents him within the game. This gameobject is called PlayerObject . For spawning the PlayerObject a prefab has to be created, containing at least a NetworkIdentity component with Local Player Authority checked. The Local Player Authority allows the player to control and modify the gameobjects properties (e.g. for movement). The NetworkManager needs a reference to this prefab, which is located in Spawn Info/Player Prefab . To have the player movement synchronized over the network, the player prefab also contains a NetworkTransform. Player start position The main scene contains 2 gameobjects with only a NetworkStartPosition component (gameobjects RacketSpawnLeft, RacketSpawnRight in the scene). These transforms will be automatically registered by the NetworkManager as spawning positions. Setting up the network A very convenient component for establish/testing connections is the NetworkManagerHUD. It provides basic functionality for start a game as Client, Server, or Host (Client and Server at the same time). It requires the NetworkManager component. The ball of Pong The ball is the main focus of Pong, as this is the object needed to score points. Its NetworkIdentity component has neither Server Only nor Local Player Authority checked, as it's moved by the server physics engine and can be influenced by the players. As with the PlayerObject the position is synchronized via NetworkTransform. When having multiple scenes, the ball can be spawned by the NetworkManager, but to keep this sample simple, it's placed directly within the main scene."
  },
  "Articles/Examples/MultipleAdditiveScenes/index.html": {
    "href": "Articles/Examples/MultipleAdditiveScenes/index.html",
    "title": "Multiple Additive Scenes Example",
    "keywords": "Multiple Additive Scenes Example In Build Settings, remove all scenes and add both of the scenes from the Scenes folder in the following order: Main Game Open the Main scene in the Editor and make sure the Game Scene field in the MultiScene Network Manager on the Network scene object contains the Game scene. This is already setup by default, but if the Main scene was opened and saved before putting the scenes in the Build Settings list, the Game Scene field may be cleared accidentally. MultiScene Network Manager The MultiScene Network Manager is derived from the base Network Manager and is responsible for additively loading the subscene instances and placing the players in their respective subscene instances and initializing player SyncVars. It has a Game Scene field where the Game subscene is assigned, and an Instances field to set how many instances are loaded on the server. In this example, the subscene instances are additively loaded on the server with localPhysicsMode = LocalPhysicsMode.Physics3D . Physics subscenes do not auto-simulate, so each scene has a game object with a generic PhysicsSimulator script on it. This script does nothing on the client, only on the server. Clients only ever have one instance of the subscene additively loaded (without localPhysicsMode ), while server has them all. All networked objects have a NetworkSceneChecker component which is what isolates them to their specific subscene. Playing in the Instances File -> Build and Run Start at least 3 built instances: These will all be client players. Press Play in the Editor and click Host (Server + Client) in the HUD - This will be the host and the 1st player. You can also use Server Only if you prefer. Click Client in the built instances. WASDQE keys to move & turn your player capsule, Space to jump. Colliding with the small colored spheres scores points base on their color. Colliding with the larger tumblers sends them rolling around...they're server-side non-kinematic rigidbodies. Only scores for the players in the same subscene are shown at the top of the game window."
  },
  "Articles/Examples/Tanks/index.html": {
    "href": "Articles/Examples/Tanks/index.html",
    "title": "Tanks",
    "keywords": "Tanks General description of Tanks example."
  },
  "Articles/Examples/Room/index.html": {
    "href": "Articles/Examples/Room/index.html",
    "title": "Room",
    "keywords": "Room General description of Room example. Note: If using NetworkRoomManagerExt then the GamePlayer prefab should have a PlayerScore attached. If you dont want to add PlayerScore to your prefab then replace the NetworkRoomManagerExt script for NetworkRoomManager"
  },
  "Articles/Examples/index.html": {
    "href": "Articles/Examples/index.html",
    "title": "Samples Overview",
    "keywords": "Samples Overview Mirror includes several small examples to help you learn how to use various features and how to set things up so they work together. Basic Basic is what it sounds like...the most rudimentary baseline of a networked game. Features SyncVars updating random UI data for each player. Tanks This is a simple scene with animated tanks, networked rigidbody projectiles, and NavMesh movement Pong A simple example for \"How to build a multiplayer game with Mirror\" is Pong. It illustrates the usage of NetworkManager , NetworkManagerHUD , NetworkBehaviour, NetworkIdentity, NetworkTransform , NetworkStartPosition and various Attributes. Additive Scenes The Additive Scenes example demonstrates a server additively loading a sub-scene into a main scene at startup, and having a server-only trigger that generates a message to any client whose player enters the trigger zone to also load the sub-scene, and subsequently unload it when they leave the trigger zone. Only players inside the trigger zone can see the objects in the sub-scene. Network Proximity Checker components are key to making this scenario work. Multiple Concurrent Additive Scenes The Multiple Concurrent Additive Scenes example demonstrates a server additively loading multiple instances of a sub-scene into a main scene at startup, with physics separation, and assigning players to the instances to play matches independently. NetworkSceneChecker is the key component that makes this example work. Room System The Room System example demonstrates how to set up a \"staging\" scene where players assemble before starting a match. When all players are ready, the server sends them all a message to change scenes (along with the server itself) to the actual game play scene so they all come in at once. Includes fully playable game with a character controller where players collect server-spawned prizes for score."
  },
  "Articles/Guides/DevServer/gcloud/index.html": {
    "href": "Articles/Guides/DevServer/gcloud/index.html",
    "title": "Google Cloud Services",
    "keywords": "Google Cloud Services This guide will explain how to set up a Linux server running on Google Cloud . Google cloud offers $300 free credits to new users for a limited time, and it also have \"Always free products\". See overview and docs for more information. Before you begin In the Cloud Console, on the project selector page, select or create a Cloud project. Note: If you don't plan to keep the resources that you create in this procedure, create a project instead of selecting an existing project. After you finish these steps, you can delete the project, removing all resources associated with the project. Go to the project selector page You may need to enable billing for your Google Cloud project. If you have free credits (see above) then these will be used first. Learn how to confirm billing is enabled for your project. Setting up a new Server Start by creating and configuring a new Compute Engine instance. In the Cloud Console, go to the VM instances page: Go to the VM instances page If this is your first instance you will see a dialog prompting you to create a new virtual machine Click Create to get started. On the Create an instance page, configure your instance as follows: Name your instance. This tutorial uses the instance name mirror-instance-demo throughout. Select the region and zone in which you want your instance to be hosted. This tutorial uses the region us-central1 (Iowa) and the zone us-central1-a throughout. Machine configuration depends on the size of your game. For a simple example we can use a small server. select N1 for series select f1-micro for machine type In the Boot disk section, click Change. The Boot disk dialog will pop up. Change the disk type to SSD Persistent Disk. Boot disk can be left as default 10gb standard persistent disk with Debian GNU/Linux 9 (stretch) for this tutorial. You may want to change it to best fit your needs. You can instead use an ssd or increase its size, however this will increase the monthly cost. Note: The monthly estimate should be shown at the top right next to Name To configure Network settings first example the Management, security, disks, networking, solo tenancy section, then click on the Networking tab. Set a Network tag, this will allow you to set up firewall rules later on. This tutorial use mirror-demo as the tag Set up a static IP address for your instance a) Under Network interfaces click on default and it will bring up a config menu b) Select the External IP dropdown and select Create IP address c) Enter a name for this ip and press Reserve . For this tutorial we will use mirror-demo-ip Create your instance. Press the Create button at the bottom of the page to finish set up and create your instance Configure Firewall This will allow other people to connect to your server using its IP and port In the Cloud Console, go to the Firewall page. Go to the Firewall page Click Create firewall rule. On the Create a firewall rule page, fill out the form as follows: Name: mirror-demo-rule Target tags: mirror-demo Source filter: IP ranges Source IP ranges: 0.0.0.0/0 Protocols or ports: Select tcp, and then enter port 7777 into the field provided. note tcp and port 7777 is default settings for telepathy, if you are using a different transport you will need to find out what settings that uses. Press Create to confirm setting and create the rule. Connect to your new instance Once your instance has finished being created you can press the SSH button to connect to your instance in your web browser Setting up the linux instance When you first connect you will need to set up a few things First update the list of packages sudo apt-get update Install screen and unzip sudo apt-get install -y screen unzip screen allows you to have multiple terminals, allows you do do other stuff while your game is running unzip unzips can be used to extract files from a ZIP file after you upload it to the instance Build your game Build your game with Target Platform Linux and Server Build ticked Upload and extract your game Once you have built your game zip the folder so that you can upload it to your server. In the SSH connection window click on the settings cogwheel and select Upload File then find and select your zipped build folder. This should upload the game folder to the home directory. If you need to go to the home directory you can use: cd ~ Note: the destination will be /home/username where username should be the cloud account you are logged into. Once your file has finished upload you can extract the files unzip ./mirror-demo.zip Run server Move into game folder cd mirror-demo Mark game as executable chmod +x ./mirror-demo.x86_64 You should now be able to run your game server! The following is optional but will most likely be useful Start your server in a detached screen screen -d -m -S mirrorServer ./mirror-demo.x86_64 -logfile ~/server.log The parts of the command above: screen -d -m will create the new terminal in detached mode -S mirrorServer name of the screen ./mirror-demo.x86_64 your game server file -logfile ~/server.log unity argument for log file location, this will create a log file in the home directory Create start file so you can start your server the same way each time a) create start.sh echo \"screen -d -m -S mirrorServer ./mirror-demo.x86_64 -logfile ~/server.log\" > ./start.sh b) mark as executable chmod +x ./start.sh Run your server ./start.sh Using Screen Here are a few useful commands for using screen List active screens screen -ls Attach to existing screen, process-id is show when calling screen -ls screen name is given by -S when creating the screen, for this tutorial it was mirrorServer screen -r <process-id | screen name> Detach from screen press CTRL A + D Stop your game Once attached to a screen you can press CTRL + C to stop the process, this will stop your game and close the screen View log files You can use the -logfile ~/path/to/log.log argument for Unity when starting your game server. This will cause the logs to be written to a file instead of to the terminal. This will means recent logs wont show up in screen -r . you can use the tail command to view the the end of the log file tail -n 50 ./server.log you can use the -n argument to set how many lines to show you can use the -f argument follow the end of the file stream showing you any new logs that are written to the file in real time. You will need to press CTRL + C to exit follow mode Clean up after tutorial If you used an existing project you will need to delete the following: VM instance Firewall rule If you have created a new project you should be able to just delete the project. Go to the Manage resources page"
  },
  "Articles/Guides/DevServer/AWS/index.html": {
    "href": "Articles/Guides/DevServer/AWS/index.html",
    "title": "Amazon Web Services (AWS)",
    "keywords": "Amazon Web Services (AWS) During this section we will focus on using a Windows instance and connecting from a Windows computer. NOTE : AWS requires a payment method/credit card added before being able to use a Windows server. Don't forget to read up on the free tier limitations . During this example we will be using the free tier of the EC2 option, which gives us the possibility to use a Windows instance (if you have already added a payment method). For more information about which services offer a Free Tier, see AWS Free Tier . These are the steps we will go through from start to finish: Account creation Setting up an instance with the EC2 Management Console Configuring the server via RDP (Remote Desktop) Setting up the firewall to allow connections through Testing the connection 1. Account Creation Go to the Account creation page and sign up with your details and payment method (e.g. credit card). Adding the payment method is necessary to run a windows instance on AWS. 2. Setting up an instance with the EC2 Management Console After setting up your account you should be logged in. Always make sure you're in your correct region so it's a good habit to check in the top right corner. Change it to the closest location to you now. After this click on Services in the top left corner and click on EC2. This will bring you to the EC2 instance dashboard and ready to Launch your instance! Click on \"Launch Instance\" . There are 7 steps to creating your AWS Instance: Choose an Amazon Machine Image (AMI) Choose Instance Type Configure Instance Add Storage Add Tags Configure Security Group Review Step 1: Choose an Amazon Machine Image Scroll down until you see the Microsoft Windows Server 2019 Base (take the newest one if this is outdated). Make sure that the option you select has the \"Free Tier Eligible\" under the icon and click on \"Select\". Step 2: Choose Instance Type Make sure you choose the instance type with the \"free tier eligible\", at the time of writing this is the t2.micro instance. Click on \"Next: Configure Instance Details\" . Do not click on Review and Launch. Step 3: Configure Instance Nothing has to be changed at this step. Keep it default. Click on \"Next: Add Storage\" . Step 4: Add Storage Nothing has to be changed. Keep it default. The 30GB is more than you need but there will be an error if you choose a lower amount. Keep in mind that you can always click \"Previous\" if you need to return, you do not need to repeat the entire process if you make a mistake (unless you click Launch at the end). Click on \"Next: Add Tags\" to continue. Step 5: Add Tags Nothing has to be changed. Keep it default. Click on \"Next: Configure Security Groups\" Step 6: Configure Security Groups IMPORTANT STEP This makes it possible to connect to your instance from outside for: RDP (needed for this example) For clients connecting through port 7777 for your Mirror Project. SSH (if needed) Create a new security group and you can give it your own name and description. Add the following rules: RDP with source \"Anywhere\", Description can be whatever but put it as Remote Desktop Program. Custom TCP Rule with port 7777 and source \"Anywhere\", Description can be whatever but put it as Mirror. SSH with source \"Anywhere\", Description can be whatever but put it as SSH. SSH is not strictly necessary but can be used to remote connect to it through other means than the RDP. You can ignore the warning about the source as this is just a testing environment. In the future you might wish to restrict this but you will almost never know the clients' connection IP's beforehand. Click on \"Next: Review and Launch\" Step 7: Review Almost there! Make sure everything is correct and you are using the free tier, then click on \"Launch\" . One more thing: A window will pop up asking for your key pair. Just create a new one by selecting the dropdown: \"Create a new key pair\" and give it a name, click on \"Download Key Pair\" . Keep the key file (.PEM File) somewhere secure (To be 100% certain, back it up somewhere). YOU CANNOT ACCESS THE CREATED INSTANCE WITHOUT THIS KEY Now you can (finally) click on \"Launch Instances\" ! Go back to your EC2 dashboard by clicking on \"Services\" at the top left and clicking on EC2. Now you see you have \"Running Instances: 1\". Click on \"Running Instances\" to continue . A new instance might take around 5-10 minutes to set up. Refresh the page after 10 minutes if nothing changes. Now you did all this but you want to get ON the dedicated server right? Perfect! The next step will get you up and running! 3. Configuring the server via RDP (Remote Desktop) Time to get the RDP file so you can start connecting. There are a few things we'll need: RDP file with the key pair added to it Configure RDP file once downloaded to allow getting files from our C: drive or other drives (so you can easily get your zip project) Enter the windows Admin password once you start the RDP file Once you've done this, you should be able to continue using the same RDP file. RDP file with the key pair added to it Get the password before clicking Download Copy the Password for later Now click on \"Download Remote Desktop File\" . The RDP file will be downloaded. Configure RDP file for easy file access Go to your freshly downloaded RDP file and rightclick it and then click \"Edit\". Go to the third tab \"Local sources\", at the bottom click \"more\" under local devices and sources. On the new window select your C: drive or any other drive. This is your own computer your connecting from. For easy file exchange. Perfect! Now you can run the RDP file! The RDP file will ask a password. If you forgot your password you can get it back by rightclicking the instance and clicking on \"Get Windows Password\". You will be asked to re-enter your key pair (.PEM) file and decrypt the message. Once done you will be able to copy the password. There you have it! Now you have your password and Remote Desktop should show you logging into your dedicated server! Setting up the firewall to allow connections through Go to the windows firewall settings, go to the advanced firewall settings and go to inbound rules. Add a new rule and choose the port type. Select TCP and enter the 7777 port (or any other if you use another port in Mirror). Continue clicking next and keep things default. Close all the windows when done. AWESOME! You now have everything set up to accept incoming requests on port 7777 . 4. Testing the connection Before you can (finally) test out your server build of your project you need to get it on the dedicated server! Place your (zipped) server build at the root of your added drive (C: or another) to make it easier to find it fast. Go to \"My Computer\" and because of our previous changes to the RDP we should now see your local drive under \"Devices and Drives\". Double click it and because you placed your zipped server build on that drive, you should see it immediatly when it's done loading. Now unzip the project in a new folder on the dedicated server's desktop and run it. Want to test if it sees the 7777 port is open after you started your Mirror server? Get your IPv4 public IP from the EC2 Management Console from your instance and use it on your client to connect to that IP. Go to PortChecker and enter the Dedicated Server IP address and enter port 7777. NOTE: If you are not running your game / project then the port will be closed. It's only open when the server is running."
  },
  "Articles/Guides/DevServer/index.html": {
    "href": "Articles/Guides/DevServer/index.html",
    "title": "Development Servers",
    "keywords": "Development Servers During this guide we will set up a dedicated server and place the server build of our project on the dedicated server. IMPORTANT: Before we begin, there are some potential problems you may face, as no server is truly 'free': Service providers are NOT free. Most of the time you can start with free trials for a limited time, after x amount of time or x amount of used resources the trial will end and you might incur payment. Always read the providers free trial limitations. Some providers require a payment method for using a Windows instance, however as long as you do not go over the limitations the provider should not bill you. NOTE : Mirror is not affiliated and can not be held responsible for any charges or fees associated with service providers like AWS , Microsoft Azure , Google Compute Engine and others... Introduction During your development with Mirror you will need to test your project as a client and as a server. There are a few possible ways to test your project: Default build: Host/client as one and connecting with another build/editor to the host locally on 1 computer. Server build: Server is a separate executable. You can place it on your computer run it and connect to it as a client. Dedicated Server: Same as the server build but placed on an external machine, you connect to it with the server's external ip. This guide will focus on the \"Dedicated Server\" option. There are multiple providers and even self hosted dedicated machines. All possibilities still go through the same process to ensure connectivity to clients. A few requirements for a dedicated server: Port forwarding (Not strictly necessary but makes everything a lot easier without needing NAT punchthrough) Firewall exceptions Computer/machine that stays online and accessible whenever you need it. In the upcoming sections we will go through setting up a provider with the free tier. Always double check that you do not select a paid feature as this is purely meant as a short term period to test out basic functionality during development of your project. Amazon Web Services (AWS) See AWS setup Google Compute Engine See this guides: Google cloud setup Microsoft Azure Microsoft Azure (as of time of writing) allows setting up a windows instance during the free trial without an active payment method. To be added Self Hosted Dedicated Server A self hosted dedicated server is the same as the other providers but you provide the hardware, internet connection and costs for running the computer. Most of the time this is the cheapest option during development if you already have an extra machine. Preferably you would put the machine on a different network (to simulate the conditions as the other providers). This would mean you could connect to the machine and put your server build on whenever you need and have access to the router and security settings of the machine for port forwarding and firewall exceptions. In essence, this is the simplest set up but does require extra hardware."
  },
  "Articles/Guides/GameObjects/SpawnPlayer.html": {
    "href": "Articles/Guides/GameObjects/SpawnPlayer.html",
    "title": "Player Game Objects",
    "keywords": "Player Game Objects Mirror’s multiplayer HLAPI system handles player game objects differently to non-player game objects. When a new player joins the game (when a new client connects to the server), that player’s game object becomes a “local player” game object on the client of that player, and Unity associates the player’s connection with the player’s game object. Unity associates one player game object for each person playing the game, and routes networking commands to that individual game object. A player cannot invoke a command on another player’s game object, only their own. The NetworkBehaviour class (which you derive from to create your network scripts) has a property called isLocalPlayer. On each client’s player game object, Mirror sets that property to true on the NetworkBehaviour script, and invokes the OnStartLocalPlayer() callback. This means each client has a different game object set up like this, because on each client a different game object is the one that represents the local player. The diagram below shows two clients and their local players. Only the player game object that is “yours” (from your point of view as the player) has the isLocalPlayer flag set. Usually you should set this flag in script to determine whether to process input, whether to make the camera track the game object, or do any other client-side things that should only occur for the player belonging to that client. Player game objects represent the player (that is, the person playing the game) on the server, and have the ability to run commands from the player’s client. These commands are secure client-to-server remote procedure calls. In this server-authoritative system, other non-player server-side game objects cannot receive commands directly from client-side game objects. This is both for security, and to reduce the complexity of building your game. By routing all incoming commands from users through the player game object, you can ensure that these messages come from the right place, the right client, and can be handled in a central location. The Network Manager adds a player every time a client connects to the server. In some situations though, you might want it not to add players until an input event happens - such as a user pressing a “start” button on the controller. To disable automatic player creation, navigate to the Network Manager component’s Inspector and untick the Auto Create Player checkbox."
  },
  "Articles/Guides/GameObjects/SpawnObjectCustom.html": {
    "href": "Articles/Guides/GameObjects/SpawnObjectCustom.html",
    "title": "Custom Spawn Functions",
    "keywords": "Custom Spawn Functions You can use spawn handler functions to customize the default behavior when creating spawned game objects on the client. Spawn handler functions ensure you have full control of how you spawn the game object, as well as how you destroy it. Use ClientScene.RegisterSpawnHandler or ClientScene.RegisterPrefab to register functions to spawn and destroy client game objects. The server creates game objects directly, and then spawns them on the clients through this functionality. This functions takes either the asset ID or a prefab and two function delegates: one to handle creating game objects on the client, and one to handle destroying game objects on the client. The asset ID can be a dynamic one, or just the asset ID found on the prefab game object you want to spawn. The spawn / unspawn delegates will look something like this: Spawn Handler GameObject SpawnDelegate(Vector3 position, System.Guid assetId) { // do stuff here } or GameObject SpawnDelegate(SpawnMessage msg) { // do stuff here } UnSpawn Handler void UnSpawnDelegate(GameObject spawned) { // do stuff here } When a prefab is saved its assetId field will be automatically set. If you want to create prefabs at runtime you will have to generate a new GUID. Generate prefab at runtime // generate a new unique assetId System.Guid creatureAssetId = System.Guid.NewGuid(); // register handlers for the new assetId ClientScene.RegisterSpawnHandler(creatureAssetId, SpawnCreature, UnSpawnCreature); Use existing prefab // register prefab you'd like to custom spawn and pass in handlers ClientScene.RegisterPrefab(coinAssetId, SpawnCoin, UnSpawnCoin); Spawn on Server // spawn a coin - SpawnCoin is called on client NetworkServer.Spawn(gameObject, coinAssetId); The spawn functions themselves are implemented with the delegate signature. Here is the coin spawner. The SpawnCreature would look the same, but have different spawn logic: public GameObject SpawnCoin(SpawnMessage msg) { return Instantiate(m_CoinPrefab, msg.position, msg.rotation); } public void UnSpawnCoin(GameObject spawned) { Destroy(spawned); } When using custom spawn functions, it is sometimes useful to be able to unspawn game objects without destroying them. This can be done by calling NetworkServer.UnSpawn . This causes the object to be Reset on the server and sends a ObjectDestroyMessage to clients. The ObjectDestroyMessage will cause the custom unspawn function to be called on the clients. If there is no unspawn function the object will instead be Destroy Note that on the host, game objects are not spawned for the local client, because they already exist on the server. This also means that no spawn or unspawn handler functions are called. Setting Up a Game Object Pool with Custom Spawn Handlers Here is an example of how you might set up a simple game object pooling system with custom spawn handlers. Spawning and unspawning then puts game objects in or out of the pool. using System.Collections.Generic; using Mirror; using UnityEngine; namespace Mirror.Examples { public class PrefabPoolManager : MonoBehaviour { [Header(\"Settings\")] public int startSize = 5; public int maxSize = 20; public GameObject prefab; [Header(\"Debug\")] [SerializeField] Queue<GameObject> pool; [SerializeField] int currentCount; void Start() { InitializePool(); ClientScene.RegisterPrefab(prefab, SpawnHandler, UnspawnHandler); } void OnDestroy() { ClientScene.UnregisterPrefab(prefab); } private void InitializePool() { pool = new Queue<GameObject>(); for (int i = 0; i < startSize; i++) { GameObject next = CreateNew(); pool.Enqueue(next); } } GameObject CreateNew() { if (currentCount > maxSize) { Debug.LogError($\"Pool has reached max size of {maxSize}\"); return null; } // use this object as parent so that objects dont crowd hierarchy GameObject next = Instantiate(prefab, transform); next.name = $\"{prefab.name}_pooled_{currentCount}\"; next.SetActive(false); currentCount++; return next; } // used by ClientScene.RegisterPrefab GameObject SpawnHandler(SpawnMessage msg) { return GetFromPool(msg.position, msg.rotation); } // used by ClientScene.RegisterPrefab void UnspawnHandler(GameObject spawned) { PutBackInPool(spawned); } /// <summary> /// Used to take Object from Pool. /// <para>Should be used on server to get the next Object</para> /// <para>Used on client by ClientScene to spawn objects</para> /// </summary> /// <param name=\"position\"></param> /// <param name=\"rotation\"></param> /// <returns></returns> public GameObject GetFromPool(Vector3 position, Quaternion rotation) { GameObject next = pool.Count > 0 ? pool.Dequeue() // take from pool : CreateNew(); // create new because pool is empty // CreateNew might return null if max size is reached if (next == null) { return null; } // set position/rotation and set active next.transform.position = position; next.transform.rotation = rotation; next.SetActive(true); return next; } /// <summary> /// Used to put object back into pool so they can b /// <para>Should be used on server after unspawning an object</para> /// <para>Used on client by ClientScene to unspawn objects</para> /// </summary> /// <param name=\"spawned\"></param> public void PutBackInPool(GameObject spawned) { // disable object spawned.SetActive(false); // add back to pool pool.Enqueue(spawned); } } } To use this manager, create a new empty game object and add the PrefabPoolManager component (code above). Next, drag a prefab you want to spawn multiple times to the Prefab field, and set startSize and maxSize fields. startSize is how many will be spawned when your game starts. maxSize is the max number that can be spawned, if this number is reached then an error will be given when trying to more new objects. Finally, set up a reference to the PrefabPoolManager in the script you are using for player movement: PrefabPoolManager prefabPoolManager; void Start() { prefabPoolManager = FindObjectOfType<PrefabPoolManager>(); } Your player logic might contain something like this, which moves and fires coins: void Update() { if (!isLocalPlayer) return; // move var x = Input.GetAxis(\"Horizontal\") * 0.1f; var z = Input.GetAxis(\"Vertical\") * 0.1f; transform.Translate(x, 0, z); // shoot if (Input.GetKeyDown(KeyCode.Space)) { // Command function is called on the client, but invoked on the server CmdFire(); } } In the fire logic on the player, make it use the game object pool: [Command] void CmdFire() { // Set up bullet on server GameObject bullet = prefabPoolManager.GetFromPool(transform.position + transform.forward, Quaternion.identity); bullet.GetComponent<Rigidbody>().velocity = transform.forward * 4; // tell server to send SpawnMessage, which will call SpawnHandler on client NetworkServer.Spawn(bullet); // destroy bullet after 2 seconds StartCoroutine(Destroy(bullet, 2.0f)); } public IEnumerator Destroy(GameObject go, float delay) { yield return new WaitForSeconds(delay); // return object to pool on server prefabPoolManager.PutBackInPool(go); // tell server to send ObjectDestroyMessage, which will call UnspawnHandler on client NetworkServer.UnSpawn(go); } The Destroy method above shows how to return game objects to the pool so that they can be re-used when you fire again"
  },
  "Articles/Guides/GameObjects/SpawnObject.html": {
    "href": "Articles/Guides/GameObjects/SpawnObject.html",
    "title": "Spawning Game Objects",
    "keywords": "Spawning Game Objects In Unity, you usually “spawn” (that is, create) new game objects with Instantiate . However, in Mirror, the word “spawn” means something more specific. In the server-authoritative model of the Mirror, to “spawn” a game object on the server means that the game object is created on clients connected to the server, and is managed by the spawning system. Once the game object is spawned using this system, state updates are sent to clients whenever the game object changes on the server. When Mirror destroys the game object on the server, it also destroys it on the clients. The server manages spawned game objects alongside all other networked game objects, so that if another client joins the game later, the server can spawn the game objects on that client. These spawned game objects have a unique network instance ID called “netId” that is the same on the server and clients for each game object. The unique network instance ID is used to route messages set across the network to game objects, and to identify game objects. When the server spawns a game object with a Network Identity component, the game object spawned on the client has the same “state”. This means it is identical to the game object on the server; it has the same Transform, movement state, and (if Network Transform and SyncVars are used) synchronized variables. Therefore, client game objects are always up-to-date when Mirror creates them. This avoids issues such as game objects spawning at the wrong initial location, then reappearing at their correct position when a state update arrives. A game object Prefab must have a Network Identity component before trying to register it with the Network Manager. To register a Prefab with the Network Manager in the Editor, select the Network Manager game object, and in the Inspector, navigate to the Network Manager component. Click the triangle next to Spawn Info to open the settings, then under Registered Spawnable Prefabs, click the plus (+) button. Drag and drop Prefabs into the empty field to assign them to the list. Spawning Without Network Manager For more advanced users, you may find that you want to register Prefabs and spawn game objects without using the Network Manager component. To spawn game objects without using the Network Manager, you can handle the Prefab registration yourself via script. Use the ClientScene.RegisterPrefab method to register Prefabs to the Network Manager. using UnityEngine; using Mirror; public class MyNetworkManager : MonoBehaviour { public GameObject treePrefab; // Register prefab and connect to the server public void ClientConnect() { ClientScene.RegisterPrefab(treePrefab); NetworkClient.RegisterHandler<ConnectMessage>(OnClientConnect); NetworkClient.Connect(\"localhost\"); } void OnClientConnect(NetworkConnection conn, ConnectMessage msg) { Debug.Log(\"Connected to server: \" + conn); } } In this example, you create an empty game object to act as the Network Manager, then create and attach the MyNetworkManager script (above) to that game object. Create a prefab that has a Network Identity component attached to it, and drag that onto the treePrefab slot on the MyNetworkManager component in the Inspector. This ensures that when the server spawns the tree game object, it also creates the same kind of game object on the clients. Registering prefabs ensures that there is no stalling or loading time for creating the Asset. For the script to work, you also need to add code for the server. Add this to the MyNetworkManager script: public void ServerListen() { NetworkServer.RegisterHandler<ConnectMessage>(OnServerConnect); NetworkServer.RegisterHandler<ReadyMessage>(OnClientReady); // start listening, and allow up to 4 connections NetworkServer.Listen(4); } // When client is ready spawn a few trees void OnClientReady(NetworkConnection conn, ReadyMessage msg) { Debug.Log(\"Client is ready to start: \" + conn); NetworkServer.SetClientReady(conn); SpawnTrees(); } void SpawnTrees() { int x = 0; for (int i = 0; i < 5; ++i) { GameObject treeGo = Instantiate(treePrefab, new Vector3(x++, 0, 0), Quaternion.identity); NetworkServer.Spawn(treeGo); } } void OnServerConnect(NetworkConnection conn, ConnectMessage msg) { Debug.Log(\"New client connected: \" + conn); } The server does not need to register anything, as it knows what game object is being spawned (and the asset ID is sent in the spawn message). The client needs to be able to look up the game object, so it must be registered on the client. When writing your own network manager, it’s important to make the client ready to receive state updates before calling the spawn command on the server, otherwise they won’t be sent. If you’re using Mirror’s built-in Network Manager component, this happens automatically. For more advanced uses, such as object pools or dynamically created Assets, you can use the ClientScene.RegisterSpawnHandler method, which allows callback functions to be registered for client-side spawning. See documentation on Custom Spawn Functions for an example of this. If the game object has a network state like synchronized variables, then that state is synchronized with the spawn message. In the following example, this script is attached to the tree Prefab: using UnityEngine; using Mirror; class Tree : NetworkBehaviour { [SyncVar] public int numLeaves; public override void OnStartClient() { Debug.Log(\"Tree spawned with leaf count \" + numLeaves); } } With this script attached, you can change the numLeaves variable and modify the SpawnTrees function to see it accurately reflected on the client: void SpawnTrees() { int x = 0; for (int i = 0; i < 5; ++i) { GameObject treeGo = Instantiate(treePrefab, new Vector3(x++, 0, 0), Quaternion.identity); Tree tree = treeGo.GetComponent<Tree>(); tree.numLeaves = Random.Range(10,200); Debug.Log(\"Spawning leaf with leaf count \" + tree.numLeaves); NetworkServer.Spawn(treeGo); } } Attach the Tree script to the treePrefab script created earlier to see this in action. Constraints A NetworkIdentity must be on the root game object of a spawnable Prefab. Without this, the Network Manager can’t register the Prefab. NetworkBehaviour scripts must be on the same game object as the NetworkIdentity, not on child game objects Game Object Creation Flow The actual flow of internal operations that takes place for spawning game objects is: Prefab with Network Identity component is registered as spawnable. game object is instantiated from the Prefab on the server. Game code sets initial values on the instance (note that 3D physics forces applied here do not take effect immediately). NetworkServer.Spawn is called with the instance. The state of the SyncVars on the instance on the server are collected by calling OnSerialize on [Network Behaviour] components. A network message of type ObjectSpawn is sent to connected clients that includes the SyncVar data. OnStartServer is called on the instance on the server, and isServer is set to true Clients receive the ObjectSpawn message and create a new instance from the registered Prefab. The SyncVar data is applied to the new instance on the client by calling OnDeserialize on Network Behaviour components. OnStartClient is called on the instance on each client, and isClient is set to true As game play progresses, changes to SyncVar values are automatically synchronized to clients. This continues until game ends. NetworkServer.Destroy is called on the instance on the server. A network message of type ObjectDestroy is sent to clients. OnNetworkDestroy is called on the instance on clients, then the instance is destroyed. Player Game Objects Player game objects in the HLAPI work slightly differently to non-player game objects. The flow for spawning player game objects with the Network Manager is: Prefab with NetworkIdentity is registered as the PlayerPrefab Client connects to the server Client calls AddPlayer , network message of type MsgType.AddPlayer is sent to the server Server receives message and calls NetworkManager.OnServerAddPlayer game object is instantiated from the Player Prefab on the server NetworkManager.AddPlayerForConnection is called with the new player instance on the server The player instance is spawned - you do not have to call NetworkServer.Spawn for the player instance. The spawn message is sent to all clients like on a normal spawn. A network message of type Owner is sent to the client that added the player (only that client!) The original client receives the network message OnStartLocalPlayer is called on the player instance on the original client, and isLocalPlayer is set to true Note that OnStartLocalPlayer is called after OnStartClient , because it only happens when the ownership message arrives from the server after the player game object is spawned, so isLocalPlayer is not set in OnStartClient . Because OnStartLocalPlayer is only called for the client’s local player game object, it is a good place to perform initialization that should only be done for the local player. This could include enabling input processing, and enabling camera tracking for the player game object. Spawning Game Objects with Client Authority To spawn game objects and assign authority of those game objects to a particular client, use NetworkServer.Spawn , which takes as an argument the NetworkConnection of the client that is to be made the authority. For these game objects, the property hasAuthority is true on the client with authority, and OnStartAuthority is called on the client with authority. That client can issue commands for that game object. On other clients (and on the host), hasAuthority is false. Objects spawned with client authority must have LocalPlayerAuthority set in their NetworkIdentity . For example, the tree spawn example above can be modified to allow the tree to have client authority like this (note that we now need to pass in a NetworkConnection game object for the owning client’s connection): void SpawnTrees(NetworkConnection conn) { int x = 0; for (int i = 0; i < 5; ++i) { GameObject treeGo = Instantiate(treePrefab, new Vector3(x++, 0, 0), Quaternion.identity); Tree tree = treeGo.GetComponent<Tree>(); tree.numLeaves = Random.Range(10,200); Debug.Log(\"Spawning leaf with leaf count \" + tree.numLeaves); NetworkServer.Spawn(treeGo, conn); } } The Tree script can now be modified to send a command to the server: public override void OnStartAuthority() { CmdMessageFromTree(\"Tree with \" + numLeaves + \" reporting in\"); } [Command] void CmdMessageFromTree(string msg) { Debug.Log(\"Client sent a tree message: \" + msg); } Note that you can’t just add the CmdMessageFromTree call into OnStartClient , because at that point the authority has not been set yet, so the call would fail."
  },
  "Articles/Guides/GameObjects/SceneObjects.html": {
    "href": "Articles/Guides/GameObjects/SceneObjects.html",
    "title": "Scene Game Objects",
    "keywords": "Scene Game Objects There are two types of networked game objects in Mirror’s multiplayer system: Those that are created dynamically at runtime Those that are saved as part of a Scene Game objects that are created dynamically at runtime use the multiplayer Spawning system, and the prefabs they are instantiated from must be registered in the Network Manager’s list of networked game object prefabs. However, networked game objects that you save as part of a Scene (and therefore already exist in the Scene when it is loaded) are handled differently. These game objects are loaded as part of the Scene on both the client and server, and exist at runtime before any spawn messages are sent by the multiplayer system. When the Scene is loaded, all networked game objects in the Scene are disabled on both the client and the server. Then, when the Scene is fully loaded, the Network Manager automatically processes the Scene’s networked game objects, registering them all (and therefore causing them to be synchronized across clients), and enabling them, as if they were spawned at runtime. Networked game objects will not be enabled until a client has requested a Player object. Saving networked game objects in your Scene (rather than dynamically spawning them after the scene has loaded) has some benefits: They are loaded with the level, so there will be no pause at runtime. They can have specific modifications that differ from prefabs Other game object instances in the Scene can reference them, which can avoid you having to use code to finding the game objects and make references to them up at runtime. When the Network Manager spawns the networked Scene game objects, those game objects behave like dynamically spawned game objects. Mirror sends them updates and ClientRPC calls. If a Scene game object is destroyed on the server before a client joins the game, then it is never enabled on new clients that join. When a client connects, the client is sent an ObjectSpawnScene spawn message for each of the Scene game objects that exist on the server, that are visible to that client. This message causes the game object on the client to be enabled, and has the latest state of that game object from the server in it. This means that only game objects that are visible to the client, and not destroyed on the server, are activated on the client. Like regular non-Scene game objects, these Scene game objects are started with the latest state when the client joins the game."
  },
  "Articles/Guides/GameObjects/SpawnPlayerCustom.html": {
    "href": "Articles/Guides/GameObjects/SpawnPlayerCustom.html",
    "title": "Custom Character Spawning",
    "keywords": "Custom Character Spawning Many games need character customization. You may want to pick the color of the hair, eyes, skin, height, race, etc. By default Mirror will instantiate the player for you. While that is convenient, it might prevent you from customizing it. Mirror provides the option of overriding player creation and customize it. Create a class that extends NetworkManager if you have not done so. For example: public class MMONetworkManager : NetworkManager { ... } and use it as your Network manager. Open your Network Manager in the inspector and disable the \"Auto Create Player\" Boolean. Create a message that describes your player. For example: public struct CreateMMOCharacterMessage : NetworkMessage { public Race race; public string name; public Color hairColor; public Color eyeColor; } public enum Race { None, Elvish, Dwarvish, Human } Create your player prefabs (as many as you need) and add them to the \"Register Spawnable Prefabs\" in your Network Manager, or add a single prefab to the player prefab field in the inspector. Send your message and register a player: public class MMONetworkManager : NetworkManager { public override void OnStartServer() { base.OnStartServer(); NetworkServer.RegisterHandler<CreateMMOCharacterMessage>(OnCreateCharacter); } public override void OnClientConnect(NetworkConnection conn) { base.OnClientConnect(conn); // you can send the message here, or wherever else you want CreateMMOCharacterMessage characterMessage = new CreateMMOCharacterMessage { race = Race.Elvish, name = \"Joe Gaba Gaba\", hairColor = Color.red, eyeColor = Color.green }; conn.Send(characterMessage); } void OnCreateCharacter(NetworkConnection conn, CreateMMOCharacterMessage message) { // playerPrefab is the one assigned in the inspector in Network // Manager but you can use different prefabs per race for example GameObject gameobject = Instantiate(playerPrefab); // Apply data from the message however appropriate for your game // Typically Player would be a component you write with syncvars or properties Player player = gameobject.GetComponent<Player>(); player.hairColor = message.hairColor; player.eyeColor = message.eyeColor; player.name = message.name; player.race = message.race; // call this to use this gameobject as the primary controller NetworkServer.AddPlayerForConnection(conn, gameobject); } } Ready State In addition to players, client connections also have a “ready” state. The host sends clients that are ready information about spawned game objects and state synchronization updates; clients which are not ready are not sent these updates. When a client initially connects to a server, it is not ready. While in this non-ready state, the client can do things that don’t require real-time interactions with the game state on the server, such as loading Scenes, allowing the player to choose an avatar, or fill in log-in boxes. Once a client has completed all its pre-game work, and all its Assets are loaded, it can call ClientScene.Ready to enter the “ready” state. The simple example above demonstrates implementation of ready states; because adding a player with NetworkServer.AddPlayerForConnection also puts the client into the ready state if it is not already in that state. Clients can send and receive network messages without being ready, which also means they can do so without having an active player game object. So a client at a menu or selection screen can connect to the game and interact with it, even though they have no player game object. See documentation on Network Messages for more details about sending messages without using commands and RPC calls. Switching Players To replace the player game object for a connection, use NetworkServer.ReplacePlayerForConnection . This is useful for restricting the commands that players can issue at certain times, such as in a pregame room screen. This function takes the same arguments as AddPlayerForConnection , but allows there to already be a player for that connection. The old player game object does not have to be destroyed. The NetworkRoomManager uses this technique to switch from the NetworkRoomPlayer game object to a game play player game object when all the players in the room are ready. You can also use ReplacePlayerForConnection to respawn a player or change the object that represents the player. In some cases it is better to just disable a game object and reset its game attributes on respawn. The following code sample demonstrates how to actually replace the player game object with a new game object: public class MyNetworkManager : NetworkManager { public void ReplacePlayer(NetworkConnection conn, GameObject newPrefab) { // Cache a reference to the current player object GameObject oldPlayer = conn.identity.gameObject; // Instantiate the new player object and broadcast to clients NetworkServer.ReplacePlayerForConnection(conn, Instantiate(newPrefab)); // Remove the previous player object that's now been replaced NetworkServer.Destroy(oldPlayer); } } If the player game object for a connection is destroyed, then that client cannot execute Commands. They can, however, still send network messages. To use ReplacePlayerForConnection you must have the NetworkConnection game object for the player’s client to establish the relationship between the game object and the client. This is usually the property connectionToClient on the NetworkBehaviour class, but if the old player has already been destroyed, then that might not be readily available. To find the connection, there are some lists available. If using the NetworkRoomManager , then the room players are available in roomSlots . The NetworkServer also has lists of connections ."
  },
  "Articles/Components/NetworkAnimator.html": {
    "href": "Articles/Components/NetworkAnimator.html",
    "title": "Network Animator",
    "keywords": "Network Animator The Network Animator component allows you to synchronize animation states for networked objects. It synchronizes state and parameters from an Animator Controller. Note that if you create a Network Animator component on an empty game object, Mirror also creates a Network Identity component and an Animator component on that game object. Client Authority Enable this to have changes to animation parameters sent from client to server. Animator Use this field to define the Animator component you want the Network Animator to synchronize with. Normally, changes are sent to all observers of the object this component is on. Setting Sync Mode to Owner Only makes the changes private between the server and the client owner of the object. You can use the Sync Interval to specify how often it syncs (in seconds). Details The Network Animator ensures the synchronization of game object animation across the network, meaning that all players see the animation happen at the same. There are two kinds of authority for networked animation (see documentation on network authority ): NOTE: Animator Triggers are not synced directly. Call NetworkAnimator.SetTrigger instead. A game object with authority can use the SetTrigger function to fire an animation trigger on other clients. If the game object has authority on the client, you should animate it locally on the client that owns the game object. That client sends the animation state information to the server, which broadcasts it to all the other clients. For example, this may be suitable for player characters with client authority. If the game object has authority on the server, then you should animate it on the server. The server then sends state information to all clients. This is common for animated game objects that are not related to a specific client, such as scene objects and non-player characters, or server-authoritative clients."
  },
  "Articles/Components/NetworkRigidbody.html": {
    "href": "Articles/Components/NetworkRigidbody.html",
    "title": "Network Rigidbody",
    "keywords": "Network Rigidbody The Network Rigidbody classed as \"Experimental\" for now so please share any problems or bugs you find with it and use at your own risk if production builds. The Network Rigidbody component synchronizes velocity and other properties of a rigidbody across the network. This component is useful when you have a non-kinematic rigidbody that have constant forces applied to them, like gravity, but also want to apply forces or change velocity to that rigidbody or server or client with authority. For example, objects that move and jump using rigidbody using gravity. A game object with a Network Rigidbody component must also have a Network Identity component. When you add a Network Rigidbody component to a game object, Mirror also adds a Network Identity component on that game object if it does not already have one. Network Rigidbody works best when there is also a NetworkTransform for the object to keep position as well as velocity in sync. By default, Network Rigidbody is server-authoritative unless you check the box for Client Authority . Client Authority applies to player objects as well as non-player objects that have been specifically assigned to a client, but only for this component. With this enabled, value changes are send from the client to the server. The Sensitivity options allow you to set a minimum thresholds before values are send over network. This helps minimize network traffic for very small changes. For some object you may not want them to rotate but don't need to sync the Angular Velocity. The Clear Angular Velocity will set the Angular Velocity to zero each frame causing the minimizing when objects rotation. If Sync Angular Velocity is enabled then clear is ignored. The same can apply to Clear Velocity . Normally, changes are sent to all observers of the object this component is on. Setting Sync Mode to Owner Only makes the changes private between the server and the client owner of the object. You can use the Sync Interval to specify how often it syncs (in seconds). This applies both to Client Authority and Server Authority."
  },
  "Articles/Components/NetworkStartPosition.html": {
    "href": "Articles/Components/NetworkStartPosition.html",
    "title": "Network Start Position",
    "keywords": "Network Start Position To control where players are spawned, you can use the Network Start Position component. To use these, attach a Network Start Position component to a game object in the scene, and position the game object where you would like one of the players to start. You can add as many start positions to your Scene as you like. The Network Manager detects all start positions in your Scene, and when it spawns each player instance, it uses the position and orientation of one of them. The Network Manager will spawn players at (0, 0, 0) by default. Adding this component to a game object will automatically register/unregister its game object's transform to the Network Manager as an available spawning position. Depending on the Network Manager Player Spawn Method setting the spawning is either Random (possible that the same spawn position will be used by two or more players) or Round Robin (use every available position, until there are more clients than spawn points)."
  },
  "Articles/Components/NetworkManager.html": {
    "href": "Articles/Components/NetworkManager.html",
    "title": "Network Manager",
    "keywords": "Network Manager The Network Manager is a component for managing the networking aspects of a multiplayer game. The Network Manager features include: Game state management Spawn management Scene management Debugging information Customization See also NetworkManager in the API Reference. Getting Started with the Network Manager The Network Manager is the core controlling component of a multiplayer game. To get started, create an empty game object in your starting Scene, and add the Network Manager component. The newly added Network Manager component looks like this: The Inspector for the Network Manager in the Editor allows you to configure and control many things related to networking. Note : You can only ever have one active Network Manager in each scene because it's a singleton. Do not place the Network Manager component on a networked game object (one which has a Network Identity component), because Mirror disables these when the Scene loads. If you are already familiar with multiplayer game development, you might find it useful to know that the Network Manager component is implemented entirely using the API, so everything it does is also available to you through scripting. For advanced users, if you find that you need to expand on the Network Manager component’s features, you can use scripting to derive your own class from Network Manager and customize its behavior by overriding any of the virtual function hooks that it provides. However, the Network Manager component wraps up a lot of useful functionality into a single place, and makes creating, running and debugging multiplayer games as simple as possible. Transports Mirror uses a separate component (derived from the Transport class) to connect across the network. By default, it is Telepathy Transport. This design choice of separating the transport into its own component allows game developers to choose the transport that best fits their game needs. Changing transports is as simple as swapping out the component on the Network Manager object and assigning it to the Transport field. Transports are available for TCP, UDP, WebGL, and Steam. Additionally, there's a Multiplex transport that allows for using two transports together on the server, e.g. Telepathy and WebSockets, so that desktop and browser players can play together on the same server seamlessly. See Transports for more information. Game State Management A Networking multiplayer game can run in three modes - as a client, as a dedicated server, or as a host which is both a client and a server at the same time. If you’re using the Network Manager HUD, it automatically tells the Network Manager which mode to start in, based on which button the player clicks. If you’re writing your own UI that allows the player to start the game, you’ll need to call these from your own code. These methods are: NetworkManager.StartClient NetworkManager.StartServer NetworkManager.StartHost Whichever mode the game starts in (client, server, or host), the Network Address and Transport Port properties are used. In client mode, the game attempts to connect to the address and port specified. A fully-qualified domain name (FQDN) can also be used for the Network Address, e.g. \"game.example.com\". In server or host mode, the game listens for incoming connections on the port specified, but does not bind to any specific IP address (it listens on all available). Spawn Management Use the Network Manager to manage the spawning (networked instantiation) of networked game objects from Prefabs. Most games have a Prefab which represents the player, so the Network Manager has a Player Prefab slot. You should assign this slot with your player Prefab. When you have a player Prefab set, a player game object is automatically spawned from that Prefab for each user in the game. This applies to the local player on a hosted server, and remote players on remote clients. You must attach a Network Identity component to the Player Prefab before assigning it to this field. Once you have assigned a Player Prefab, you can start the game as a host and see the player game object spawn. Stopping the game destroys the player game object . If you build and run another copy of the game and connect it as a client to localhost , the Network Manager makes another player game object appear. When you stop that client, it destroys that player’s game object. In addition to the Player Prefab, you must also register other prefabs that you want to dynamically spawn during game play with the Network Manager. You can add prefabs to the list shown in the inspector labelled Registered Spawnable Prefabs. You can also register prefabs via code, with the ClientScene.RegisterPrefab method. If you have one Network Manager that is persisted through scenes via Don't Destroy On Load (DDOL), you need to register all prefabs to it which might be spawned in any scene. If you have a separate Network Manager in each scene, you only need to register the prefabs relevant for that scene. Start Positions The Network Manager will spawn Player Prefab at their defined transform position and rotation by default, however the Player Spawn Method property allows you to control how start positions are chosen in conjunction with Network Start Position components. Choose Random to spawn players at randomly chosen startPosition options. Choose Round Robin to cycle through startPosition options in a set list. If the Random or Round Robin modes don’t suit your game, you can customize how the start positions are selected by using code. You can access the available Network Start Position components by the list NetworkManager.startPositions , and you can use the helper method GetStartPosition on the Network Manager that can be used in an implementation of OnServerAddPlayer to find a start position. Scene Management Most games have more than one scene. At the very least, there is usually a title screen or starting menu scene in addition to the scene where the game is actually played. The Network Manager is designed to automatically manage scene state and scene transitions in a way that works for a multiplayer game. There are two slots on the Network Manager inspector for scenes: the Offline Scene and the Online Scene. Dragging scene assets into these slots activates networked Scene Management. When a server or host is started, the Online Scene is loaded. This then becomes the current network scene. Any clients that connect to that server are instructed to also load that scene. The name of this scene is stored in the networkSceneName property. When the network is stopped, by stopping the server or host or by a client disconnecting, the offline Scene is loaded. This allows the game to automatically return to a menu scene when disconnected from a multiplayer game. You can also change scenes while the game is active by calling ServerChangeScene . This makes all the currently connected clients change Scene too, and updates networkSceneName so that new clients also load the new Scene. While networked Scene management is active, any calls to game state management functions such as StartHost or StopClient can cause scene changes. This applies to the runtime control UI. By setting up scenes and calling these methods, you can control the flow of your multiplayer game. Note that scene change causes all the game objects in the previous scene to be destroyed. You should normally make sure the Network Manager persists between Scenes, otherwise the network connection is broken upon a scene change. To do this, ensure the Don’t Destroy On Load checkbox is ticked in the inspector. However it is also possible to have a separate Network Manager in each scene with different settings, which may be helpful if you wish to control incremental prefab loading, or different scene transitions. Customization There are virtual functions on the NetworkManager class that you can customize by creating your own derived class that inherits from NetworkManager . When implementing these functions, be sure to take care of the functionality that the default implementations provide. For example, in OnServerAddPlayer , the function NetworkServer.AddPlayer must be called to activate the player game object for the connection. To make this easier, we've made a set of Script Templates that have all the overrides stubbed out for you."
  },
  "Articles/Components/NetworkRoomPlayer.html": {
    "href": "Articles/Components/NetworkRoomPlayer.html",
    "title": "Network Room Player",
    "keywords": "Network Room Player The Network Room Player stores per-player state for the Network Room Manager while in the room. When using this component, you need to write a script which allows players to indicate they are ready to begin playing, which sets the ReadyToBegin property. A game object with a Network Room Player component must also have a Network Identity component. When you create a Network Room Player component on a game object, Unity also creates a Network Identity component on that game object if it does not already have one. Show Room GUI Enable this to show the developer GUI for players in the room. This UI is only intended to be used for ease of development. This is enabled by default. Ready To Begin Diagnostic indicator that a player is Ready. Index Diagnostic index of the player, e.g. Player 1, Player 2, etc. Network Sync Interval The rate at which information is sent from the Network Room Player to the server. Methods Client Virtual Methods public virtual void OnClientEnterRoom() {} public virtual void OnClientExitRoom() {} public virtual void OnClientReady(bool readyState) {}"
  },
  "Articles/Components/NetworkProximityChecker.html": {
    "href": "Articles/Components/NetworkProximityChecker.html",
    "title": "Network Proximity Checker",
    "keywords": "Network Proximity Checker The Network Proximity Checker component controls the visibility of game objects for network clients, based on proximity to players. Vis Range Define the range that the game object should be visible to observers. Vis Update Interval Define how often (in seconds) the game object should check for observers entering its visible range. Check Method Define which type of physics (2D or 3D) to use for proximity checking. Force Hidden Tick this checkbox to hide this object from all players. With the Network Proximity Checker, a game running on a client doesn’t have information about game objects that are not visible. This has two main benefits: it reduces the amount of data sent across the network, and it makes your game more secure against hacking. This component relies on physics to calculate visibility, so observer game objects must also have a collider component on it. A game object with a Network Proximity Checker component must also have a Network Identity component. When you create a Network Proximity Checker component on a game object, Mirror also creates a Network Identity component on that game object if it does not already have one. Scene objects with a Network Proximity Checker component are disabled when they're out of range, and spawned objects are destroyed when they're out of range."
  },
  "Articles/Components/NetworkTransform.html": {
    "href": "Articles/Components/NetworkTransform.html",
    "title": "Network Transform",
    "keywords": "Network Transform The Network Transform component synchronizes the position, rotation, and scale of networked game objects across the network. A game object with a Network Transform component must also have a Network Identity component. When you add a Network Transform component to a game object, Mirror also adds a Network Identity component on that game object if it does not already have one. By default, Network Transform is server-authoritative unless you check the box for Client Authority . Client Authority applies to player objects as well as non-player objects that have been specifically assigned to a client, but only for this component. With this enabled, position changes are send from the client to the server. Under Sensitivity , you can set the minimum thresholds of change to the transform values in order for network messages to be generated. This helps minimize network \"noise\" for minor twitch and jitter. Normally, changes are sent to all observers of the object this component is on. Setting Sync Mode to Owner Only makes the changes private between the server and the client owner of the object. You can use the Sync Interval to specify how often it syncs (in seconds)."
  },
  "Articles/Components/NetworkLogSettings.html": {
    "href": "Articles/Components/NetworkLogSettings.html",
    "title": "Network Log Settings",
    "keywords": "Network Log Settings See also LogFactory in the API Reference. Network Log Settings component The Network Log Settings component allows you to configure logging levels and load the settings in a build. When you first add NetworkLogSettings you will have to Create a new LogSettings asset that will store the settings. Note: If a LogSettings asset already exists the NetworkLogSettings component will set the Settings field when it is added to a game object. Log Settings When you first set up LogSettings the list of components may be empty or incomplete. Running the game will cause Mirror scripts to add their respective loggers to the list so their logging levels can be changed. Log settings can also be changed using the \"Mirror Log Level\" window, which can be opened from the editor menu: Window > Analysis > Mirror Log Levels. To change settings at runtime please see LogFactory . Issues Mirrors Logging api is currently work in progress. If there is a bug or a feature you want added please make an issue here ."
  },
  "Articles/Components/NetworkTransformChild.html": {
    "href": "Articles/Components/NetworkTransformChild.html",
    "title": "Network Transform Child",
    "keywords": "Network Transform Child The Network Transform Child component synchronizes the position and rotation of the child game object of a game object with a Network Transform component. You should use this component in situations where you need to synchronize an independently-moving child object of a Networked game object. To use the Network Transform Child component, attach it to the same parent game object as the Network Transform, and use the Target field to define which child game object to apply the component settings to. You can have multiple Network Transform Child components on one parent game object . You can modify Compress Rotation to save some bandwidth when synchronizing the rotation. You can use the Network Sync Interval to specify how often it syncs (in seconds). This component takes authority into account, so local player game objects (which have local authority) synchronize their position from the client to server, then out to other clients. Other game objects (with server authority) synchronize their position from the server to clients."
  },
  "Articles/Components/NetworkMatchChecker.html": {
    "href": "Articles/Components/NetworkMatchChecker.html",
    "title": "Network Match Checker",
    "keywords": "Network Match Checker The Network Match Checker component controls visibility of networked objects based on match id. Any object with this component on it will only be visible to other objects in the same match. This would be used to isolate players to their respective matches within a single game server instance. When you create a match, generate and store, in a List for example, a new match id with System.Guid.NewGuid(); and assign the same match id to the Network Match Checker via GetComponent<NetworkMatchChecker>().matchId . Mirror's built-in Observers system will isolate SyncVar's and ClientRpc's on networked objects to only send updates to clients with the same match id."
  },
  "Articles/Components/NetworkRoomManager.html": {
    "href": "Articles/Components/NetworkRoomManager.html",
    "title": "Network Room Manager",
    "keywords": "Network Room Manager **Please see the Room example in the Examples folder in your Mirror folder The Network Room Manager is a specialized type of Network Manager that provides a multiplayer room before entering the main play scene of the game. It allows you to set up a network with: A maximum player limit Automatic start when all players are ready Option to prevent players from joining a game in progress Customizable ways for players to choose options while in room There are two types of player objects with the Network Room Manager: Room Player Prefab One for each player Created when client connects, or player is added Persists until client disconnects Holds ready flag and configuration data Handles commands in the room Must use the Network Room Player component Player Prefab One for each player Created when game scene is started Destroyed when leaving game scene Handles commands in the game Properties Show Room GUI Show the default OnGUI controls for the room. Min Players Minimum number of players needed to start a game. Room Player Prefab The prefab to create for players when they enter the room (requires Network Room Player component). Room Scene The scene to use for the room. Gameplay Scene The scene to use for main game play. pendingPlayers List<PendingPlayer> that holds players that are ready to start playing. roomSlots List<NetworkRoomPlayer> that manages the slots for connected clients in the room. allPlayersReady Bool indicating if all players are ready to start playing. This value changes as players invoke CmdChangeReadyState indicating true or false, and will be set false when a new client connects. Methods Server Virtual Methods public virtual void OnRoomStartHost() {} public virtual void OnRoomStopHost() {} public virtual void OnRoomStartServer() {} public virtual void OnRoomServerConnect(NetworkConnection conn) {} public virtual void OnRoomServerDisconnect(NetworkConnection conn) {} public virtual void OnRoomServerSceneChanged(string sceneName) {} public virtual GameObject OnRoomServerCreateRoomPlayer(NetworkConnection conn) { return null; } public virtual GameObject OnRoomServerCreateGamePlayer(NetworkConnection conn) { return null; } public virtual bool OnRoomServerSceneLoadedForPlayer(GameObject roomPlayer, GameObject gamePlayer) { return true; } public virtual void OnRoomServerPlayersReady() { ServerChangeScene(GameplayScene); } Client Virtual Methods public virtual void OnRoomClientEnter() {} public virtual void OnRoomClientExit() {} public virtual void OnRoomClientConnect(NetworkConnection conn) {} public virtual void OnRoomClientDisconnect(NetworkConnection conn) {} public virtual void OnRoomStartClient() {} public virtual void OnRoomStopClient() {} public virtual void OnRoomClientSceneChanged(NetworkConnection conn) {} public virtual void OnRoomClientAddPlayerFailed() {}"
  },
  "Articles/Components/index.html": {
    "href": "Articles/Components/index.html",
    "title": "Components Overview",
    "keywords": "Components Overview These core components are included in Mirror: Network Animator The Network Animator component allows you to synchronize animation states for networked objects. It synchronizes state and parameters from an Animator Controller. Network Authenticator Network Authenticators facilitate integration of user accounts and credentials into your application. Network Discovery Network Discovery uses a UDP broadcast on the LAN enabling clients to find the running server and connect to it. Network Identity The Network Identity component is at the heart of the Mirror networking high-level API. It controls a game object’s unique identity on the network, and it uses that identity to make the networking system aware of the game object. It offers two different options for configuration and they are mutually exclusive, which means either one of the options or none can be checked. Network Headless Logger Network Headless Logger adds color to log when running in headless mode Network Lerp Rigidbody The Network Lerp Rigidbody synchronizes position and velocity of a rigidbody across the network. Network Log Settings The Network Log Settings component allows you to configure logging levels and load the settings in a build. Network Manager The Network Manager is a component for managing the networking aspects of a multiplayer game. Network Manager HUD The Network Manager HUD is a quick-start tool to help you start building your multiplayer game straight away, without first having to build a user interface for game creation/connection/joining. It allows you to jump straight into your gameplay programming, and means you can build your own version of these controls later in your development schedule. Network Match Checker The Network Match Checker component controls visibility of networked objects based on match id. Network Ping Display Network Ping Display shows the Ping time for clients using OnGUI Network Proximity Checker The Network Proximity Checker component controls the visibility of game objects for network clients, based on proximity to players. Network Rigidbody The Network Rigidbody synchronizes velocity and other properties of a rigidbody across the network. Network Room Manager The Network Room Manager is an extension component of Network Manager that provides a basic functional room. Network Room Player The Network Room Player is a component that's required on Player prefabs used in the Room Scene with the Network Room Manager above. Network Scene Checker The Network Scene Checker component controls visibility of networked objects between scenes. Network Start Position Network Start Position is used by the Network Manager when creating player objects. The position and rotation of the Network Start Position are used to place the newly created player object. Network Transform The Network Transform component synchronizes the movement and rotation of game objects across the network. Note that the network Transform component only synchronizes spawned networked game objects. Network Transform Child The Network Transform Child component synchronizes the position and rotation of the child game object of a game object with a Network Transform component."
  },
  "Articles/FAQ.html": {
    "href": "Articles/FAQ.html",
    "title": "FAQ",
    "keywords": "FAQ Anything to add to this list? Please make a PR or ask in the discord. How do I use this feature? How to Send/Sync custom data types? Mirror can automatically create Serialization functions for many custom data types when your scripts are compiled. For example, mirror will automatically create a functions for MyCustomStruct so that it can be sent without any extra work. [ClientRpc] public void RpcDoSomething(MyCustomStruct data) { // do stuff here } struct MyCustomStruct { int someNumber; Vector3 somePosition; } For More details DataTypes Serialization How to Connect How to connect to games on same PC Make sure the networkAddress field on NetworkManager or the Hud is set up localHost How to connect to a different PC/Device on same network Set the networkAddress field to the LAN IP of the host 192.168.x.x In some cases you may need additional steps, check below To check ip on Windows you can open powershell and use the ipconfig command, then under your current adapter (ethernet/wifi/etc) look for IPv4 Address IPv4 Address. . . . . . . . . . . : 192.168.x.x How to connect to a different PC/Device over the internet Set the networkAddress field to be the IP address of the host (google 'whats my IP') This section does not cover relays/dedicated vps/headless features For this to work, you will need to do some of the following, most of these depend on your set up and router Port forward : you'll have to login your Router Either forward your game port (default is 7777) for your PC's local IP. (192.168.1.20 for example) Or the quick (but less safe) add that local IP to DMZ. PC Firewalls : You can turn it off for a quick test (And turn it back on later) manually allow the editor and any builds you create it in firewalls settings. Try from a build rather than the Unity Editor Some anti virus/phones may have additional blocking. You can turn it off for a quick test (And turn it back on later) In rare cases ISPs or companies/schools block ports and connections, this is harder to adjust yourself. If you need more help it is best to google for guide for your setup and router. An alternative to the above is to use a dedicated server (vps) or use a relay."
  },
  "Articles/Guides/GameObjects/PickupDropChild.html": {
    "href": "Articles/Guides/GameObjects/PickupDropChild.html",
    "title": "Pickups, Drops, and Child Objects",
    "keywords": "Pickups, Drops, and Child Objects Frequently the question comes up about how to handle objects that are attached as children of the player prefab that all clients need to know about and synchronize, such as which weapon is equipped, picking up networked scene objects, and players dropping objects into the scene. Mirror cannot support multiple Network Identity components within an object hierarchy. Since the Player object must have a Network Identity, none of its descendant objects can have one. Child Objects Let's start with the simple case of a single attachment point that is somewhere down the hierarchy of our Player, such as a hand at the end of an arm. In a script that inherits from NetworkBehaviour on the Player Prefab, we'd have a GameObject reference where the attachment point can be assigned in the inspector, a SyncVar enum with various choices of what the player is holding, and and a Hook for the SyncVar to swap out the art of the held item based on the new value. In the image below, Kyle has an empty game object, RightHand , added to the wrist, and some prefabs to be equipped (Ball, Box, Cylinder), and a Player Equip script to handle them. NOTE : The item prefabs are art only ...they have no scripts, and they must not have networking components. They can have monobehaviour-based scripts, of course, which can be referenced and called from ClientRpc's on the player prefab. The inspector shows RightHand assigned in 2 places, the Player Equip script, as well as the target of the Network Transform Child component, so we could adjust the relative position of the attachment point (not the art) for all clients as needed. Below is the Player Equip script to handle the changing of the equipped item, and some notes for consideration: While we could just have all the art items attached at design time and just enable / disable them based on the enum, this doesn't scale well to a lot of items and if they have scripts on them for how they behave in the game, such as animations, special effects, etc. it could get ugly pretty fast, so this example locally instantiates and destroys instead as a design choice. The example makes no effort to deal with position offset between the item and the attach point, e.g. having the grip or handle of an item align with the hand. This is best dealt with in a monobehaviour script on the item that has public fields for the local position and rotation that can be set in the designer and a bit of code in Start to apply those values in local coordinates relative to the parent attach point. using UnityEngine; using System.Collections; using Mirror; public enum EquippedItem : byte { nothing, ball, box, cylinder } public class PlayerEquip : NetworkBehaviour { public GameObject sceneObjectPrefab; public GameObject rightHand; public GameObject ballPrefab; public GameObject boxPrefab; public GameObject cylinderPrefab; [SyncVar(hook = nameof(OnChangeEquipment))] public EquippedItem equippedItem; void OnChangeEquipment(EquippedItem oldEquippedItem, EquippedItem newEquippedItem) { StartCoroutine(ChangeEquipment(newEquippedItem)); } // Since Destroy is delayed to the end of the current frame, we use a coroutine // to clear out any child objects before instantiating the new one IEnumerator ChangeEquipment(EquippedItem newEquippedItem) { while (rightHand.transform.childCount > 0) { Destroy(rightHand.transform.GetChild(0).gameObject); yield return null; } switch (newEquippedItem) { case EquippedItem.ball: Instantiate(ballPrefab, rightHand.transform); break; case EquippedItem.box: Instantiate(boxPrefab, rightHand.transform); break; case EquippedItem.cylinder: Instantiate(cylinderPrefab, rightHand.transform); break; } } void Update() { if (!isLocalPlayer) return; if (Input.GetKeyDown(KeyCode.Alpha0) && equippedItem != EquippedItem.nothing) CmdChangeEquippedItem(EquippedItem.nothing); if (Input.GetKeyDown(KeyCode.Alpha1) && equippedItem != EquippedItem.ball) CmdChangeEquippedItem(EquippedItem.ball); if (Input.GetKeyDown(KeyCode.Alpha2) && equippedItem != EquippedItem.box) CmdChangeEquippedItem(EquippedItem.box); if (Input.GetKeyDown(KeyCode.Alpha3) && equippedItem != EquippedItem.cylinder) CmdChangeEquippedItem(EquippedItem.cylinder); } [Command] void CmdChangeEquippedItem(EquippedItem selectedItem) { equippedItem = selectedItem; } } Dropping Items Now that we can equip the items, we need a way to drop the current item into the world as a networked item. Remember that, as child art, the item prefabs have no networking components on them at all. First, let's add one more Input to the Update method above, and a CmdDropItem method: void Update() { if (!isLocalPlayer) return; if (Input.GetKeyDown(KeyCode.Alpha0) && equippedItem != EquippedItem.nothing) CmdChangeEquippedItem(EquippedItem.nothing); if (Input.GetKeyDown(KeyCode.Alpha1) && equippedItem != EquippedItem.ball) CmdChangeEquippedItem(EquippedItem.ball); if (Input.GetKeyDown(KeyCode.Alpha2) && equippedItem != EquippedItem.box) CmdChangeEquippedItem(EquippedItem.box); if (Input.GetKeyDown(KeyCode.Alpha3) && equippedItem != EquippedItem.cylinder) CmdChangeEquippedItem(EquippedItem.cylinder); if (Input.GetKeyDown(KeyCode.X) && equippedItem != EquippedItem.nothing) CmdDropItem(); } [Command] void CmdDropItem() { // Instantiate the scene object on the server Vector3 pos = rightHand.transform.position; Quaternion rot = rightHand.transform.rotation; GameObject newSceneObject = Instantiate(sceneObjectPrefab, pos, rot); // set the RigidBody as non-kinematic on the server only (isKinematic = true in prefab) newSceneObject.GetComponent<Rigidbody>().isKinematic = false; SceneObject sceneObject = newSceneObject.GetComponent<SceneObject>(); // set the child object on the server sceneObject.SetEquippedItem(equippedItem); // set the SyncVar on the scene object for clients sceneObject.equippedItem = equippedItem; // set the player's SyncVar to nothing so clients will destroy the equipped child item equippedItem = EquippedItem.nothing; // Spawn the scene object on the network for all to see NetworkServer.Spawn(newSceneObject); } In the image above, there's a sceneObjectPrefab field that is assigned to a prefab that will act as a container for our item prefabs. The SceneObject prefab has a SceneObject script with a SyncVar like the Player Equip script, and a SetEquippedItem method that takes the shared enum value as a parameter. using UnityEngine; using System.Collections; using Mirror; public class SceneObject : NetworkBehaviour { [SyncVar(hook = nameof(OnChangeEquipment))] public EquippedItem equippedItem; public GameObject ballPrefab; public GameObject boxPrefab; public GameObject cylinderPrefab; void OnChangeEquipment(EquippedItem oldEquippedItem, EquippedItem newEquippedItem) { StartCoroutine(ChangeEquipment(newEquippedItem)); } // Since Destroy is delayed to the end of the current frame, we use a coroutine // to clear out any child objects before instantiating the new one IEnumerator ChangeEquipment(EquippedItem newEquippedItem) { while (transform.childCount > 0) { Destroy(transform.GetChild(0).gameObject); yield return null; } // Use the new value, not the SyncVar property value SetEquippedItem(newEquippedItem); } // SetEquippedItem is called on the client from OnChangeEquipment (above), // and on the server from CmdDropItem in the PlayerEquip script. public void SetEquippedItem(EquippedItem newEquippedItem) { switch (newEquippedItem) { case EquippedItem.ball: Instantiate(ballPrefab, transform); break; case EquippedItem.box: Instantiate(boxPrefab, transform); break; case EquippedItem.cylinder: Instantiate(cylinderPrefab, transform); break; } } } In the run-time image below, the Ball(Clone) is attached to the RightHand object, and the Box(Clone) is attached to the SceneObject(Clone), which is shown in the inspector. The art prefabs have simple colliders on them (sphere, box, capsule). If your art item has a mesh collider, it must be marked as Convex to work with the RigidBody on the SceneObject container. Pickup Items Now that we have a box dropped in the scene, we need to pick it up again. To do that, a CmdPickupItem method is added to the Player Equip script: // CmdPickupItem is public because it's called from a script on the SceneObject [Command] public void CmdPickupItem(GameObject sceneObject) { // set the player's SyncVar so clients can show the equipped item equippedItem = sceneObject.GetComponent<SceneObject>().equippedItem; // Destroy the scene object NetworkServer.Destroy(sceneObject); } This method is simply called from OnMouseDown in the Scene Object script: void OnMouseDown() { NetworkClient.connection.identity.GetComponent<PlayerEquip>().CmdPickupItem(gameObject); } Since the SceneObject(Clone) is networked, we can pass it directly through to CmdPickupItem on the player object to set the equipped item SyncVar and destroy the scene object. For this entire example, the only prefab that needs to be registered with Network Manager besides the Player is the SceneObject prefab."
  },
  "Articles/Guides/GameObjects/index.html": {
    "href": "Articles/Guides/GameObjects/index.html",
    "title": "Networked Game Objects",
    "keywords": "Networked Game Objects Networked game objects are game objects which are controlled and synchronized by Mirror’s networking system. Using synchronized networked game objects, you can create a shared experience for all the players who are playing an instance of your game. They see and hear the same events and actions - even though that may be from their own unique viewpoints within your game. Multiplayer games in Mirror are typically built using Scenes that contain a mix of networked game objects and regular (non-networked) game objects. The networked game objects are those which move or change during gameplay in a way that needs to be synchronized across all users who are playing the game together. Non-networked game objects are those which either don’t move or change at all during gameplay (for example, static obstacles like rocks or fences), or game objects which have movement or changes that don’t need to be synchronized across players (for example, a gently swaying tree or clouds passing by in the background of your game). A networked game object is one which has a Network Identity component attached. However, a Network Identity component alone is not enough for your game object to be functional and active in your multiplayer game. The Network Identity component is the starting point for synchronization, and it allows the Network Manager to synchronize the creation and destruction of the game object, but other than that, it does not specify which properties of your game object should be synchronized. What exactly should be synchronized on each networked game object depends on the type of game you are making, and what each game object’s purpose is. Some examples of what you might want to synchronize are: The position and rotation of moving game objects such as the players and non-player characters. The animation state of an animated game object The value of a variable, for example how much time is left in the current round of a game, or how much energy a player has. Some of these things can be automatically synchronized by Mirror. The synchronized creation and destruction of networked game objects is managed by the NetworkManager, and is known as Spawning. You can use the Network Transform component to synchronize the position and rotation of a game object, and you can use the Network Animator component to synchronize the animation of a game object. To synchronize other properties of a networked game object, you need to use scripting. See State Synchronization for more information about this."
  },
  "Articles/Guides/Sync/SyncSortedSet.html": {
    "href": "Articles/Guides/Sync/SyncSortedSet.html",
    "title": "SyncSortedSet",
    "keywords": "SyncSortedSet SyncSortedSet are sets similar to C# SortedSet<T> that synchronize their contents from the server to the clients. Unlike SyncHashSets, all elements in a SyncSortedSet are sorted when they are inserted. Please note this has some performance implications. A SyncSortedSet can contain any supported mirror type Usage Add a SyncSortedSet field to your NetworkBehaviour class. For example: class Player : NetworkBehaviour { readonly SyncSortedSet<string> skills = new SyncSortedSet<string>(); int skillPoints = 10; [Command] public void CmdLearnSkill(string skillName) { if (skillPoints > 1) { skillPoints--; skills.Add(skillName); } } } You can also detect when a SyncSortedSet changes. This is useful for refreshing your character in the client or determining when you need to update your database. Subscribe to the Callback event typically during Start , OnClientStart or OnServerStart for that. Note that by the time you subscribe, the set will already be initialized, so you will not get a call for the initial data, only updates. Note SyncSets must be initialized in the constructor, not in Startxxx(). You can make them readonly to ensure correct usage. class Player : NetworkBehaviour { readonly SyncSortedSet<string> buffs = new SyncSortedSet<string>(); // this will add the delegate on the client. // Use OnStartServer instead if you want it on the server public override void OnStartClient() { buffs.Callback += OnBuffsChanged; } void OnBuffsChanged(SyncSortedSet<string>.Operation op, string buff) { switch (op) { case SyncSortedSet<string>.Operation.OP_ADD: // we added a buff, draw an icon on the character break; case SyncSortedSet<string>.Operation.OP_CLEAR: // clear all buffs from the character break; case SyncSortedSet<string>.Operation.OP_REMOVE: // We removed a buff from the character break; } } }"
  },
  "Articles/Guides/Sync/SyncHashSet.html": {
    "href": "Articles/Guides/Sync/SyncHashSet.html",
    "title": "SyncHashSet",
    "keywords": "SyncHashSet SyncHashSet are sets similar to C# HashSet<T> that synchronize their contents from the server to the clients. A SyncHashSet can contain any supported mirror type Usage Add a SyncHashSet field to your NetworkBehaviour class. For example: public class Player : NetworkBehaviour { [SerializeField] readonly SyncHashSet<string> skills = new SyncHashSet<string>(); int skillPoints = 10; [Command] public void CmdLearnSkill(string skillName) { if (skillPoints > 1) { skillPoints--; skills.Add(skillName); } } } You can also detect when a SyncHashSet changes. This is useful for refreshing your character in the client or determining when you need to update your database. Subscribe to the Callback event typically during Start , OnClientStart or OnServerStart for that. Note that by the time you subscribe, the set will already be initialized, so you will not get a call for the initial data, only updates. Note SyncSets must be initialized in the constructor, not in Startxxx(). You can make them readonly to ensure correct usage. public class Player : NetworkBehaviour { [SerializeField] public readonly SyncHashSet<string> buffs = new SyncHashSet<string>(); // this will add the delegate on the client. // Use OnStartServer instead if you want it on the server public override void OnStartClient() { buffs.Callback += OnBuffsChanged; } void OnBuffsChanged(SyncHashSet<string>.Operation op, string buff) { switch (op) { case SyncHashSet<string>.Operation.OP_ADD: // we added a buff, draw an icon on the character break; case SyncHashSet<string>.Operation.OP_CLEAR: // clear all buffs from the character break; case SyncHashSet<string>.Operation.OP_REMOVE: // We removed a buff from the character break; } } }"
  },
  "Articles/Guides/Sync/SyncVarHook.html": {
    "href": "Articles/Guides/Sync/SyncVarHook.html",
    "title": "SyncVar Hook",
    "keywords": "SyncVar Hook The hook attribute can be used to specify a function to be called when the SyncVar changes value on the client. The Hook method must have two parameters of the same type as the SyncVar property. One for the old value, one for the new value. The Hook is always called after the property value is set. You don't need to set it yourself. The Hook only fires for changed values, and changing a value in the inspector will not trigger an update. As of version 11.1.4 (March 2020) and later, hooks can be virtual methods and overriden in a derived class. Below is a simple example of assigning a random color to each player when they're spawned on the server. All clients will see all players in the correct colors, even if they join later. Note: The signature for hook methods was changed in version 9.0 (Feb 2020) to having 2 parameters (old and new values). If you're on an older version, hook methods just have one parameter (new value). using UnityEngine; using Mirror; public class PlayerController : NetworkBehaviour { [SyncVar(hook = nameof(SetColor))] Color playerColor = Color.black; // Unity makes a clone of the Material every time GetComponent<Renderer>().material is used. // Cache it here and Destroy it in OnDestroy to prevent a memory leak. Material cachedMaterial; public override void OnStartServer() { base.OnStartServer(); playerColor = Random.ColorHSV(0f, 1f, 1f, 1f, 0.5f, 1f); } void SetColor(Color oldColor, Color newColor) { if (cachedMaterial == null) cachedMaterial = GetComponent<Renderer>().material; cachedMaterial.color = newColor; } void OnDestroy() { Destroy(cachedMaterial); } }"
  },
  "Articles/Guides/Sync/SyncLists.html": {
    "href": "Articles/Guides/Sync/SyncLists.html",
    "title": "SyncLists",
    "keywords": "SyncLists SyncLists are array based lists similar to C# List<T> that synchronize their contents from the server to the clients. A SyncList can contain any supported mirror type . Differences with HLAPI HLAPI also supports SyncLists, but we have redesigned them to make them more efficient and easier to use. Some of the key differences include: In HLAPI, SyncLists were synchronized immediately when they changed. If you add 10 elements, that means 10 separate messages. Mirror synchronizes SyncLists with the SyncVars. The 10 elements and other SyncVars are batched together into a single message. Mirror also respects the sync interval when synchronizing lists. In HLAPI if you want a list of structs, you have to use SyncListStruct<MyStructure> , we changed it to just SyncList<MyStructure> In HLAPI the Callback is a delegate. In Mirror we changed it to an event, so that you can add many subscribers. In HLAPI the Callback tells you the operation and index. In Mirror, the callback also receives an item. We made this change so that we could tell what item was removed. In HLAPI you must create a class that inherits from SyncList . In Mirror you can just use SyncList directly (starting with version 20.0.0) Usage Add a SyncList field to your NetworkBehaviour class. For example: public struct Item { public string name; public int amount; public Color32 color; } public class Player : NetworkBehaviour { readonly SyncList<Item> inventory = new SyncList<Item>(); public int coins = 100; [Command] public void CmdPurchase(string itemName) { if (coins > 10) { coins -= 10; Item item = new Item { name = \"Sword\", amount = 3, color = new Color32(125, 125, 125, 255) }; // during next synchronization, all clients will see the item inventory.Add(item); } } } You can also detect when a SyncList changes in the client or server. This is useful for refreshing your character when you add equipment or determining when you need to update your database. Subscribe to the Callback event typically during Start , OnClientStart , or OnServerStart for that. Note that by the time you subscribe, the list will already be initialized, so you will not get a call for the initial data, only updates. Note SyncLists must be initialized in the constructor, not in Startxxx(). You can make them readonly to ensure correct usage. class Player : NetworkBehaviour { readonly SyncList<Item> inventory = new SyncList<Item>(); // this will add the delegates on both server and client. // Use OnStartClient instead if you just want the client to act upon updates void Start() { inventory.Callback += OnInventoryUpdated; } void OnInventoryUpdated(SyncList<Item>.Operation op, int index, Item oldItem, Item newItem) { switch (op) { case SyncList<Item>.Operation.OP_ADD: // index is where it got added in the list // item is the new item break; case SyncList<Item>.Operation.OP_CLEAR: // list got cleared break; case SyncList<Item>.Operation.OP_INSERT: // index is where it got added in the list // item is the new item break; case SyncList<Item>.Operation.OP_REMOVEAT: // index is where it got removed in the list // item is the item that was removed break; case SyncList<Item>.Operation.OP_SET: // index is the index of the item that was updated // item is the previous item break; } } } By default, SyncList uses a List to store it's data. If you want to use a different list implementation, pass it to the constructor of of SyncList. For example: class Player : NetworkBehaviour { public SyncList<Item> inventory = new SyncList<Item>(new MyItemList()); }"
  },
  "Articles/Guides/Sync/SyncDictionary.html": {
    "href": "Articles/Guides/Sync/SyncDictionary.html",
    "title": "SyncDictionary",
    "keywords": "SyncDictionary A SyncDictionary is an associative array containing an unordered list of key, value pairs. Keys and values can be any supported mirror type . By default we use .Net Dictionary which may impose additional constraints on the keys and values. SyncDictionary works much like SyncLists : when you make a change on the server the change is propagated to all clients and the Callback is called. Only deltas are transmitted. Usage Add a field to your NetworkBehaviour class fo type SyncDictionary<Key, Value> . For example: Note that by the time you subscribe to the callback, the dictionary will already be initialized, so you will not get a call for the initial data, only updates. Note SyncDictionaries must be initialized in the constructor, not in Startxxx(). You can make them readonly to ensure correct usage. Simple Example using UnityEngine; using Mirror; public struct Item { public string name; public int hitPoints; public int durability; } public class ExamplePlayer : NetworkBehaviour { public readonly SyncDictionary<string, Item> Equipment = new SyncDictionary<string, Item>(); public override void OnStartServer() { Equipment.Add(\"head\", new Item { name = \"Helmet\", hitPoints = 10, durability = 20 }); Equipment.Add(\"body\", new Item { name = \"Epic Armor\", hitPoints = 50, durability = 50 }); Equipment.Add(\"feet\", new Item { name = \"Sneakers\", hitPoints = 3, durability = 40 }); Equipment.Add(\"hands\", new Item { name = \"Sword\", hitPoints = 30, durability = 15 }); } public override void OnStartClient() { // Equipment is already populated with anything the server set up // but we can subscribe to the callback in case it is updated later on Equipment.Callback += OnEquipmentChange; } void OnEquipmentChange(SyncDictionary<string, Item>.Operation op, string key, Item item) { // equipment changed, perhaps update the gameobject Debug.Log(op + \" - \" + key); } } By default, SyncDictionary uses a Dictionary to store it's data. If you want to use a different IDictionary implementation such as SortedList or SortedDictionary , then use SyncIDictionary<Key,Value> and pass the dictionary instance you want it to use. For example: public class ExamplePlayer : NetworkBehaviour { public readonly SyncIDictionary<string, Item> Equipment = new SyncIDictionary<string, Item>(new SortedList<string, Item>()); }"
  },
  "Articles/Guides/Sync/SyncVars.html": {
    "href": "Articles/Guides/Sync/SyncVars.html",
    "title": "SyncVars",
    "keywords": "SyncVars SyncVars are properties of classes that inherit from NetworkBehaviour, which are synchronized from the server to clients. When a game object is spawned, or a new player joins a game in progress, they are sent the latest state of all SyncVars on networked objects that are visible to them. Use the SyncVar custom attribute to specify which variables in your script you want to synchronize. The state of SyncVars is applied to game objects on clients before OnStartClient() is called, so the state of the object is always up-to-date inside OnStartClient() . SyncVars can use any type supported by Mirror . You can have up to 64 SyncVars on a single NetworkBehaviour script, including SyncLists (see next section, below). The server automatically sends SyncVar updates when the value of a SyncVar changes, so you do not need to track when they change or send information about the changes yourself. Changing a value in the inspector will not trigger an update. The SyncVar hook attribute can be used to specify a method to be called when the SyncVar changes value on the client. SyncVar Example Let's say we have a networked object with a script called Enemy: public class Enemy : NetworkBehaviour { [SyncVar] public int health = 100; void OnMouseUp() { NetworkIdentity ni = NetworkClient.connection.identity; PlayerController pc = ni.GetComponent<PlayerController>(); pc.currentTarget = gameObject; } } The PlayerController might look like this: public class PlayerController : NetworkBehaviour { public GameObject currentTarget; void Update() { if (isLocalPlayer) if (currentTarget != null) if (currentTarget.tag == \"Enemy\") if (Input.GetKeyDown(KeyCode.X)) CmdShoot(currentTarget); } [Command] public void CmdShoot(GameObject enemy) { // Do your own shot validation here because this runs on the server enemy.GetComponent<Enemy>().health -= 5; } } In this example, when a Player clicks on an Enemy, the networked enemy game object is assigned to PlayerController.currentTarget . When the player presses X, with a correct target selected, that target is passed through a Command, which runs on the server, to decrement the health SyncVar. All clients will be updated with that new value. You can then have a UI on the enemy to show the current value. Class inheritance SyncVars work with class inheritance. Consider this example: class Pet : NetworkBehaviour { [SyncVar] String name; } class Cat : Pet { [SyncVar] public Color32 color; } You can attach the Cat component to your cat prefab, and it will synchronize both it's name and color . Warning Both Cat and Pet should be in the same assembly. If they are in separate assemblies, make sure not to change name from inside Cat directly, add a method to Pet instead."
  },
  "Articles/Guides/Sync/SyncEvent.html": {
    "href": "Articles/Guides/Sync/SyncEvent.html",
    "title": "SyncEvent (Obsolete)",
    "keywords": "SyncEvent (Obsolete) IMPORTANT SyncEvents have been removed in version 18.0.0, see this Issue for more information This is an attribute that can be put on events in NetworkBehaviour classes to allow them to be invoked on client when the event is called on the server. SyncEvent events are called by user code on the server, and then invoked on corresponding client objects on clients connected to the server. The arguments to the Event call are serialized across the network, so that the client event is invoked with the same values as the method on the server. These events must begin with the prefix \"Event\". using UnityEngine; using Mirror; public class DamageClass : NetworkBehaviour { public delegate void TakeDamageDelegate(int amount, float dir); [SyncEvent] public event TakeDamageDelegate EventTakeDamage; [Command] public void CmdDoMe(int val) { EventTakeDamage(val, 1.0f); } } public class Other : NetworkBehaviour { public DamageClass damager; int health = 100; void Start() { if (NetworkClient.active) damager.EventTakeDamage += TakeDamage; } public void TakeDamage(int amount, float dir) { health -= amount; } } SyncEvents allow networked actions to be propagated to other scripts attached to the object. In the example above, the Other class registers for the TakeDamage event on the DamageClass. When the event happens on the DamageClass on the server, the TakeDamage() method will be invoked on the Other class on the client object. This allows modular network aware systems to be created, that can be extended by new scripts that respond to the events generated by them."
  },
  "Articles/Guides/Sync/index.html": {
    "href": "Articles/Guides/Sync/index.html",
    "title": "State Synchronization",
    "keywords": "State Synchronization State synchronization refers to the synchronization of values such as integers, floating point numbers, strings and boolean values belonging to scripts. State synchronization is done from the Server to remote clients. The local client does not have data serialized to it. It does not need it, because it shares the Scene with the server. However, SyncVar hooks are called on local clients. Data is not synchronized in the opposite direction - from remote clients to the server. To do this, you need to use Commands. Changed values are synced in the next LateUpdate as long as it has been atleast syncInterval since the last sync. SyncVars SyncVars are variables of scripts that inherit from NetworkBehaviour, which are synchronized from the server to clients. SyncEvents (Obsolete) SyncEvents are networked events like ClientRpc’s, but instead of calling a function on the game object, they trigger Events instead. IMPORTANT: removed in version 18.0.0, see this Issue for more information. SyncLists SyncLists contain lists of values and synchronize data from servers to clients. SyncDictionary A SyncDictionary is an associative array containing an unordered list of key, value pairs. SyncHashSet An unordered set of values that do not repeat. SyncSortedSet A sorted set of values that do not repeat. Sync To Owner It is often the case when you don't want some player data visible to other players. In the inspector change the \"Network Sync Mode\" from \"Observers\" (default) to \"Owner\" to let Mirror know to synchronize the data only with the owning client. For example, suppose you are making an inventory system. Suppose player A,B and C are in the same area. There will be a total of 12 objects in the entire network: Client A has Player A (himself), Player B and Player C Client B has Player A , Player B (himself) and Player C Client C has Player A , Player B and Player C (himself) Server has Player A, Player B, Player C each one of them would have an Inventory component Suppose Player A picks up some loot. The server adds the loot to Player's A inventory, which would have a SyncLists of Items. By default, Mirror now has to synchronize player A's inventory everywhere, that means sending an update message to client A, client B and client C, because they all have a copy of Player A. This is wasteful, Client B and Client C do not need to know about Player's A inventory, they never see it on screen. It is also a security problem, someone could hack the client and display other people's inventory and use it to their advantage. If you set the \"Network Sync Mode\" in the Inventory component to \"Owner\", then Player A's inventory will only be synchronized with Client A. Now, suppose instead of 3 people you have 50 people in an area and one of them picks up loot. It means that instead of sending 50 messages to 50 different clients, you would only send 1. This can have a big impact in bandwith in your game. Other typical use cases include quests, player's hand in a card game, skills, experience, or any other data you don't need to share with other players. Advanced State Synchronization In most cases, the use of SyncVars is enough for your game scripts to serialize their state to clients. However in some cases you might require more complex serialization code. This page is only relevant for advanced developers who need customized synchronization solutions that go beyond Mirror’s normal SyncVar feature. Custom Serialization Functions To perform your own custom serialization, you can implement virtual functions on NetworkBehaviour to be used for SyncVar serialization. These functions are: public virtual bool OnSerialize(NetworkWriter writer, bool initialState); public virtual void OnDeserialize(NetworkReader reader, bool initialState); Use the initialState flag to differentiate between the first time a game object is serialized and when incremental updates can be sent. The first time a game object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, the dirty bits for that script are set to zero. If it returns false, the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame. The OnSerialize function is only called for initialState or when the NetworkBehaviour is dirty. A NetworkBehaviour will only be dirty if a SyncVar or SyncObject (e.g. SyncList ) has changed since the last OnSerialize call. After data has been sent the NetworkBehaviour will not be dirty again until the next syncInterval (set in the inspector). A NetworkBehaviour can also be marked as dirty by manually calling SetDirtyBit (this does not bypass the syncInterval limit). Although this works, it is usually better to let Mirror generate these methods and provide custom serializers for your specific field. Serialization Flow Game objects with the Network Identity component attached can have multiple scripts derived from NetworkBehaviour . The flow for serializing these game objects is: On the server: Each NetworkBehaviour has a dirty mask. This mask is available inside OnSerialize as syncVarDirtyBits Each SyncVar in a NetworkBehaviour script is assigned a bit in the dirty mask. Changing the value of SyncVars causes the bit for that SyncVar to be set in the dirty mask Alternatively, calling SetDirtyBit writes directly to the dirty mask NetworkIdentity game objects are checked on the server as part of it’s update loop If any NetworkBehaviours on a NetworkIdentity are dirty, then an UpdateVars packet is created for that game object The UpdateVars packet is populated by calling OnSerialize on each NetworkBehaviour on the game object NetworkBehaviours that are not dirty write a zero to the packet for their dirty bits NetworkBehaviours that are dirty write their dirty mask, then the values for the SyncVars that have changed If OnSerialize returns true for a NetworkBehaviour , the dirty mask is reset for that NetworkBehaviour so it does not send again until its value changes. The UpdateVars packet is sent to ready clients that are observing the game object On the client: an UpdateVars packet is received for a game object The OnDeserialize function is called for each NetworkBehaviour script on the game object Each NetworkBehaviour script on the game object reads a dirty mask. If the dirty mask for a NetworkBehaviour is zero, the OnDeserialize function returns without reading any more If the dirty mask is non-zero value, then the OnDeserialize function reads the values for the SyncVars that correspond to the dirty bits that are set If there are SyncVar hook functions, those are invoked with the value read from the stream. So for this script: public class data : NetworkBehaviour { [SyncVar(hook = nameof(OnInt1Changed))] public int int1 = 66; [SyncVar] public int int2 = 23487; [SyncVar] public string MyString = \"Example string\"; void OnInt1Changed(int oldValue, int newValue) { // do something here } } The following sample shows the code that is generated by Mirror for the SerializeSyncVars function which is called inside NetworkBehaviour.OnSerialize : public override bool SerializeSyncVars(NetworkWriter writer, bool initialState) { // Write any SyncVars in base class bool written = base.SerializeSyncVars(writer, forceAll); if (initialState) { // The first time a game object is sent to a client, send all the data (and no dirty bits) writer.WritePackedUInt32((uint)this.int1); writer.WritePackedUInt32((uint)this.int2); writer.Write(this.MyString); return true; } else { // Writes which SyncVars have changed writer.WritePackedUInt64(base.syncVarDirtyBits); if ((base.get_syncVarDirtyBits() & 1u) != 0u) { writer.WritePackedUInt32((uint)this.int1); written = true; } if ((base.get_syncVarDirtyBits() & 2u) != 0u) { writer.WritePackedUInt32((uint)this.int2); written = true; } if ((base.get_syncVarDirtyBits() & 4u) != 0u) { writer.Write(this.MyString); written = true; } return written; } } The following sample shows the code that is generated by Mirror for the DeserializeSyncVars function which is called inside NetworkBehaviour.OnDeserialize : public override void DeserializeSyncVars(NetworkReader reader, bool initialState) { // Read any SyncVars in base class base.DeserializeSyncVars(reader, initialState); if (initialState) { // The first time a game object is sent to a client, read all the data (and no dirty bits) int oldInt1 = this.int1; this.int1 = (int)reader.ReadPackedUInt32(); // if old and new values are not equal, call hook if (!base.SyncVarEqual<int>(num, ref this.int1)) { this.OnInt1Changed(num, this.int1); } this.int2 = (int)reader.ReadPackedUInt32(); this.MyString = reader.ReadString(); return; } int dirtySyncVars = (int)reader.ReadPackedUInt32(); // is 1st SyncVar dirty if ((dirtySyncVars & 1) != 0) { int oldInt1 = this.int1; this.int1 = (int)reader.ReadPackedUInt32(); // if old and new values are not equal, call hook if (!base.SyncVarEqual<int>(num, ref this.int1)) { this.OnInt1Changed(num, this.int1); } } // is 2nd SyncVar dirty if ((dirtySyncVars & 2) != 0) { this.int2 = (int)reader.ReadPackedUInt32(); } // is 3rd SyncVar dirty if ((dirtySyncVars & 4) != 0) { this.MyString = reader.ReadString(); } } If a NetworkBehaviour has a base class that also has serialization functions, the base class functions should also be called. Note that the UpdateVar packets created for game object state updates may be aggregated in buffers before being sent to the client, so a single transport layer packet may contain updates for multiple game objects."
  },
  "Articles/Guides/Communications/RemoteActions.html": {
    "href": "Articles/Guides/Communications/RemoteActions.html",
    "title": "Remote Actions",
    "keywords": "Remote Actions The network system has ways to perform actions across the network. These type of actions are sometimes called Remote Procedure Calls. There are two types of RPCs in the network system, Commands - which are called from the client and run on the server; and ClientRpc calls - which are called on the server and run on clients. The diagram below shows the directions that remote actions take: Commands Commands are sent from player objects on the client to player objects on the server. For security, Commands can only be sent from YOUR player object by default, so you cannot control the objects of other players. You can bypass the authority check using [Command(ignoreAuthority = true)] . To make a function into a command, add the [Command] custom attribute to it, and add the “Cmd” prefix. This function will now be run on the server when it is called on the client. Any parameters of allowed data type will be automatically passed to the server with the command. Commands functions must have the prefix “Cmd” and cannot be static. This is a hint when reading code that calls the command - this function is special and is not invoked locally like a normal function. public class Player : NetworkBehaviour { // assigned in inspector public GameObject cubePrefab; void Update() { if (!isLocalPlayer) return; if (Input.GetKey(KeyCode.X)) CmdDropCube(); } [Command] void CmdDropCube() { if (cubePrefab != null) { Vector3 spawnPos = transform.position + transform.forward * 2; Quaternion spawnRot = transform.rotation; GameObject cube = Instantiate(cubePrefab, spawnPos, spawnRot); NetworkServer.Spawn(cube); } } } Be careful of sending commands from the client every frame! This can cause a lot of network traffic. Commands and Authority It is possible to invoke commands on non-player objects if any of the following are true: The object was spawned with client authority The object has client authority set with NetworkIdentity.AssignClientAuthority the Command has the ignoreAuthority option set true. You can include an optional NetworkConnectionToClient sender = null parameter in the Command method signature and Mirror will fill in the sending client for you. Do not try to set a value for this optional parameter...it will be ignored. Commands sent from these object are run on the server instance of the object, not on the associated player object for the client. public enum DoorState : byte { Open, Closed } public class Door : NetworkBehaviour { [SyncVar] public DoorState doorState; [Command(ignoreAuthority = true)] public void CmdSetDoorState(DoorState newDoorState, NetworkConnectionToClient sender = null) { if (sender.identity.GetComponent<Player>().hasDoorKey) doorState = newDoorState; } } ClientRpc Calls ClientRpc calls are sent from objects on the server to objects on clients. They can be sent from any server object with a NetworkIdentity that has been spawned. Since the server has authority, then there no security issues with server objects being able to send these calls. To make a function into a ClientRpc call, add the [ClientRpc] custom attribute to it, and add the “Rpc” prefix. This function will now be run on clients when it is called on the server. Any parameters of allowed data type will automatically be passed to the clients with the ClientRpc call.. ClientRpc functions must have the prefix “Rpc” and cannot be static. This is a hint when reading code that calls the method - this function is special and is not invoked locally like a normal function. ClientRpc messages are only sent to observers of an object according to its Network Visibility . Player objects are always obeservers of themselves. In some cases, you may want to exclude the owner client when calling a ClientRpc. This is done with the excludeOwner option: [ClientRpc(excludeOwner = true)] . public class Player : NetworkBehaviour { int health; public void TakeDamage(int amount) { if (!isServer) return; health -= amount; RpcDamage(amount); } [ClientRpc] public void RpcDamage(int amount) { Debug.Log(\"Took damage:\" + amount); } } When running a game as a host with a local client, ClientRpc calls will be invoked on the local client even though it is in the same process as the server. So the behaviours of local and remote clients are the same for ClientRpc calls. TargetRpc Calls TargetRpc functions are called by user code on the server, and then invoked on the corresponding client object on the client of the specified NetworkConnection. The arguments to the RPC call are serialized across the network, so that the client function is invoked with the same values as the function on the server. These functions must begin with the prefix \"Target\" and cannot be static. Context Matters: If the first parameter of your TargetRpc method is a NetworkConnection then that's the connection that will receive the message regardless of context. If the first parameter is any other type, then the owner client of the object with the script containing your TargetRpc will receive the message. This example shows how a client can use a Command to make a request to the server ( CmdMagic ) by including another Player's connectionToClient as one of the parameters of the TargetRpc invoked directly from that Command: public class Player : NetworkBehaviour { public int health; [Command] void CmdMagic(GameObject target, int damage) { target.GetComponent<Player>().health -= damage; NetworkIdentity opponentIdentity = target.GetComponent<NetworkIdentity>(); TargetDoMagic(opponentIdentity.connectionToClient, damage); } [TargetRpc] public void TargetDoMagic(NetworkConnection target, int damage) { // This will appear on the opponent's client, not the attacking player's Debug.Log($\"Magic Damage = {damage}\"); } // Heal thyself [Command] public void CmdHealMe() { health += 10; TargetHealed(10); } [TargetRpc] public void TargetHealed(int amount) { // No NetworkConnection parameter, so it goes to owner Debug.Log($\"Health increased by {amount}\"); } } Arguments to Remote Actions The arguments passed to commands and ClientRpc calls are serialized and sent over the network. You can use any supported mirror type . Arguments to remote actions cannot be sub-components of game objects, such as script instances or Transforms."
  },
  "Articles/Guides/Communications/NetworkMessages.html": {
    "href": "Articles/Guides/Communications/NetworkMessages.html",
    "title": "Network Messages",
    "keywords": "Network Messages For the most part we recommend the high level Commands and RPC calls and SyncVar , but you can also send low level network messages. This can be useful if you want clients to send messages that are not tied to game objects, such as logging, analytics or profiling information. There is a public interface called NetworkMessage that you can extend to make serializable network message structs. This interface has Serialize and Deserialize functions that take writer and reader objects. You can implement these functions yourself, but we recommend you let Mirror generate them for you. The auto generated Serialize/Deserialize can efficiently deal any supported mirror type . Make your members public. If you need classes or complex containers such as List and Dictionary, you must implement the Serialize and Deserialize methods yourself. To send a message, use the Send() method on the NetworkClient, NetworkServer, and NetworkConnection classes, which all work the same way using a message struct that is derived from NetworkMessage. The code below demonstrates how to send and handle a message: To declare a custom network message class and use it: using UnityEngine; using Mirror; public class Scores : MonoBehaviour { public struct ScoreMessage : NetworkMessage { public int score; public Vector3 scorePos; public int lives; } public void SendScore(int score, Vector3 scorePos, int lives) { ScoreMessage msg = new ScoreMessage() { score = score, scorePos = scorePos, lives = lives }; NetworkServer.SendToAll(msg); } public void SetupClient() { NetworkClient.RegisterHandler<ScoreMessage>(OnScore); NetworkClient.Connect(\"localhost\"); } public void OnScore(NetworkConnection conn, ScoreMessage msg) { Debug.Log(\"OnScoreMessage \" + msg.score); } } Note that there is no serialization code for the ScoreMessage class in this source code example. The body of the serialization functions is automatically generated for this class by Mirror."
  },
  "Articles/Guides/Communications/NetworkManager.html": {
    "href": "Articles/Guides/Communications/NetworkManager.html",
    "title": "Network Manager Callbacks",
    "keywords": "Network Manager Callbacks See also NetworkManager in the API Reference. There are a number of events that can occur over the course of the normal operation of a multiplayer game, such as the host starting up, a player joining, or a player leaving. Each of these possible events has an associated callback that you can implement in your own code to take action when the event occurs. To do this for the NetworkManager , you need to create your own script which inherits from NetworkManager . You can then override the virtual methods on NetworkManager with your own implementation of what should happen when the given event occurs. This page lists all the virtual methods (the callbacks) that you can implement on the NetworkManager , and when they occur. The callbacks that occur, and the order they occur, vary slightly depending on which mode your game is running in, so each mode’s callbacks are listed separately below. A game can be running in one of three modes, host, client, or server-only. The callbacks for each mode are listed below: Host Mode: When the host is started: OnStartServer OnStartHost OnServerConnect OnStartClient OnClientConnect OnServerSceneChanged OnServerReady OnServerAddPlayer OnClientChangeScene OnClientSceneChanged When a client connects: OnServerConnect OnServerReady OnServerAddPlayer When a client disconnects: OnServerDisconnect When the host is stopped: OnStopHost OnServerDisconnect OnStopClient OnStopServer Client Mode When the client starts: OnStartClient OnClientConnect OnClientChangeScene OnClientSceneChanged When the client stops: OnStopClient OnClientDisconnect Server Mode When the server starts: OnStartServer OnServerSceneChanged When a client connects: OnServerConnect OnServerReady OnServerAddPlayer When a client disconnects: OnServerDisconnect When the server stops: OnStopServer"
  },
  "Articles/Guides/Communications/NetworkBehaviourCallbacks.html": {
    "href": "Articles/Guides/Communications/NetworkBehaviourCallbacks.html",
    "title": "NetworkBehaviour Callbacks",
    "keywords": "NetworkBehaviour Callbacks See also NetworkBehaviour in the API Reference. There are a number of events relating to network behaviours that can occur over the course of a normal multiplayer game. These include events such as the host starting up, a player joining, or a player leaving. Each of these possible events has an associated callback that you can implement in your own code to take action when the event occurs. When you create a script which inherits from NetworkBehaviour , you can write your own implementation of what should happen when these events occur. To do this, you override the virtual methods on the NetworkBehaviour class with your own implementation of what should happen when the given event occurs. This is a full list of virtual methods (callbacks) that you can implement on NetworkBehaviour , and where they are called Server Only OnStartServer called when behaviour is spawned on server OnStopServer called when behaviour is destroyed or unspawned on server OnSerialize called when behaviour is serialize before it is sent to client, when overriding make sure to call base.OnSerialize Client only OnStartClient called when behaviour is spawned on client OnStartAuthority called when behaviour has authority when it is spawned (eg local player) called when behaviour is given authority by the sever OnStartLocalPlayer called when the behaviour is on the local player object OnStopAuthority called when authority is taken from the object (eg local player is replaced but not destroyed) OnStopClient called when object is destroyed on client by the ObjectDestroyMessage or ObjectHideMessage messages Example flows Below is some example call order for different modes NOTE: Start is called by unity before the first frame, while normally this happens after Mirror's callbacks. But if you dont call NetworkServer.Spawn the same frame as instantiate then start may be called first Note: OnRebuildObservers and OnSetHostVisibility is now on NetworkVisibility instead of NetworkBehaviour Server mode When a NetworkServer.Spawn is called (eg when new client connections and a player is created) OnStartServer OnRebuildObservers Start Client mode When local player is spawned for client OnStartAuthority OnStartClient OnStartLocalPlayer Start Host mode These are only called on the Player Game Objects when a client connects: OnStartServer OnRebuildObservers OnStartAuthority OnStartClient OnSetHostVisibility OnStartLocalPlayer Start"
  },
  "Articles/Guides/Communications/index.html": {
    "href": "Articles/Guides/Communications/index.html",
    "title": "Actions and Communication",
    "keywords": "Actions and Communication When you are making a multiplayer game, In addition to synchronizing the properties of networked game objects, you are likely to need to send, receive, and react to other pieces of information - such as when the match starts, when a player joins or leaves the match, or other information specific to your type of game, for example a notification to all players that a flag has been captured in a “capture-the-flag” style game. Within the Mirror networking High-Level API there are three main ways to communicate this type of information. Remote Actions Remote actions allow you to call a method in your script across the network. You can make the server call methods on all clients or individual clients specifically. You can also make clients call methods on the server. Using remote actions, you can pass data as parameters to your methods in a very similar way to how you call methods in local (non-multiplayer) projects. Networking Callbacks Networking callbacks allow you to hook into built-in Mirror events which occur during the course of the game, such as when players join or leave, when game objects are created or destroyed, or when a new Scene is loaded. There are two types of networking callbacks that you can implement: Network manager callbacks, for callbacks relating to the network manager itself (such as when clients connect or disconnect) Network behaviour callbacks, for callbacks relating to individual networked game objects (such as when its Start function is called, or what this particular game object should do if a new player joins the game) Network Messages Network messages are a “lower level” approach to sending messages (although they are still classed as part of the networking “High level API”). They allow you to send data directly between clients and the server using scripting. You can send basic types of data (int, string, etc) as well as most common Unity types (such as Vector3). Since you implement this yourself, these messages are not associated directly with any particular game objects or Unity events - it is up to you do decide their purpose and implement them!"
  },
  "Articles/Guides/ClockSync.html": {
    "href": "Articles/Guides/ClockSync.html",
    "title": "Clock Synchronization",
    "keywords": "Clock Synchronization For many algorithms you need the clock to be synchronized between the client and the server. Mirror does that automatically for you. To get the current time use this code: double now = NetworkTime.time; It will return the same value in the client and the servers. It starts at 0 when the server starts. Note the time is a double and should never be casted to a float. Casting this down to a float means the clock will lose precision after some time: after 1 day, accuracy goes down to 8 ms after 10 days, accuracy is 62 ms after 30 days , accuracy is 250 ms after 60 days, accuracy is 500 ms Mirror will also calculate the RTT time as seen by the application: double rtt = NetworkTime.rtt; You can measure accuracy. double time_standard_deviation = NetworkTime.timeSd; for example, if this returns 0.2, it means the time measurements swing up and down roughly 0.2 s Network hiccups are compensated against by smoothing out the values using EMA. You can configure how often you want the the ping to be sent: NetworkTime.PingFrequency = 2.0f; You can also configure how many ping results are used in the calculation: NetworkTime.PingWindowSize = 10;"
  },
  "Articles/Guides/Serialization.html": {
    "href": "Articles/Guides/Serialization.html",
    "title": "Serialization",
    "keywords": "Serialization This page goes into depth about Serialization, for the basics see DataTypes . Mirror creates Serialize and Deserialize functions for types using Weaver. Weaver edits dll after unity compiles them using Mono.Cecil. This allows mirror to have a lot of complex features like SyncVar, ClientRpc and Message Serialization without the user needed to manually set everything up. Rules and tips There are some rules and limits for what Weaver can do. Some features add complexity and are hard to maintain so have not been implemented. These features are not impossible to implement and could be added if there is a high demand for them. You should be able to write Custom Read/Write functions for any type, and Weaver will use. This means if there is a unsupported type such as int[,] creating a custom Read/Write function will allow you to sync int[,] in SyncVar/ClientRpc/etc If you have a type that has a field that is not able to be Serialize, you can mark that field with [System.NonSerialized] and weaver will ignore it Unsupported Types Some of these types are unsupported due to the complexity they would add, as mentioned above. NOTE: Types in this list can have custom writers. Jagged and Multidimensional array Types that Inherit from UnityEngine.Component UnityEngine.Object UnityEngine.ScriptableObject Generic Types, eg MyData<T> Custom Read/Write must declare T, eg MyData<int> Interfaces Types that references themselves Built-in Read Write Functions Mirror provides some built-in Read/Write Functions. They can be found in NetworkReaderExtensions and NetworkWriterExtensions . This is a Non-compete list of types that have built-in functions, check the classes above to see the full list. Most c# primitive types Common Unity structs Vector3 Quaternion Rect Ray Guid NetworkIdentity, GameObject, Transform NetworkIdentity, GameObject, Transform The netId of the Object is sent over the network, and the Object with the same netId is returned on the other side. If the netId is zero or an object is not found then null will be returned. Generated Read Write Functions Weaver will Generate Read Write functions for Classes or Structs Enums Arrays eg int[] ArraySegments eg ArraySegment<int> Lists eg List<int> Classes and Structs Weaver will Read/Write every public field in the type, unless the field is marked with [System.NonSerialized] . If there is an unsupported type in the class or struct Weaver will fail to make Read/Write functions for it. NOTE: Weaver does not check properties Enums Weaver will use the underlying Type of an enum to Read and Write them. By default this is int . For example Switch will use the byte Read/Write functions to be Serialized public enum Switch : byte { Left, Middle, Right, } Collections Weaver will Generate writes for the collections listed above. Weaver will use the elements Read/Write function. The element must have a Read/Write function so must be a supported type, or have a custom Read/Write function. For example: float[] is a supported type because Mirror has a built-in Read/Write function for float . MyData[] is a supported type as Weaver is able to generate a Read/Write function for MyData public struct MyData { public int someValue; public float anotherValue; } Adding Custom Read Write functions Read Write functions are static methods in the form of: public static void WriteMyType(this NetworkWriter writer, MyType value) { // write MyType data here } public static MyType ReadMyType(this NetworkReader reader) { // read MyType data here } It is best practice to make Read/Write functions extension methods so they can be called like writer.WriteMyType(value) . It is a good idea to call them ReadMyType and WriteMyType so it is obvious what type they are for. However the name of the function doesn't matter, weaver should be able to find it no matter what it is called. Properties Example Weaver wont write properties, but a custom writer can be used to send them over the network. This can be useful if you want to have private set for your properties public struct MyData { public int someValue { get; private set; } public float anotherValue { get; private set; } public MyData(int someValue, float anotherValue) { this.someValue = someValue; this.anotherValue = anotherValue; } } public static class CustomReadWriteFunctions { public static void WriteMyType(this NetworkWriter writer, MyData value) { writer.WriteInt32(value.someValue); writer.WriteSingle(value.anotherValue); } public static MyData ReadMyType(this NetworkReader reader) { return new MyData(reader.ReadInt32(), reader.ReadSingle()); } } Unsupported type Example Rigidbody is an unsupported type because it inherits from Component . But a custom writer can be added so that it is synced using a NetworkIdentity if one is attached. public struct MyCollision { public Vector3 force; public Rigidbody rigidbody; } public static class CustomReadWriteFunctions { public static void WriteMyCollision(this NetworkWriter writer, MyCollision value) { writer.WriteVector3(value.force); NetworkIdentity networkIdentity = value.rigidbody.GetComponent<NetworkIdentity>(); writer.WriteNetworkIdentity(networkIdentity); } public static MyCollision ReadMyCollision(this NetworkReader reader) { Vector3 force = reader.ReadVector3(); NetworkIdentity networkIdentity = reader.ReadNetworkIdentity(); Rigidbody rigidBody = networkIdentity != null ? networkIdentity.GetComponent<Rigidbody>() : null; return new MyCollision { force = force, rigidbody = rigidBody, }; } } Above are functions for MyCollision , but instead you could add functions for Rigidbody and let weaver would generate a writer for MyCollision . public static class CustomReadWriteFunctions { public static void WriteRigidbody(this NetworkWriter writer, Rigidbody rigidbody) { NetworkIdentity networkIdentity = rigidbody.GetComponent<NetworkIdentity>(); writer.WriteNetworkIdentity(networkIdentity); } public static Rigidbody ReadRigidbody(this NetworkReader reader) { NetworkIdentity networkIdentity = reader.ReadNetworkIdentity(); Rigidbody rigidBody = networkIdentity != null ? networkIdentity.GetComponent<Rigidbody>() : null; return rigidBody; } } Debugging You can use tools like dnSpy to view the complied code after Weaver has altered it. This can help to understand and debug what Mirror and Weaver does."
  },
  "Articles/Guides/DataTypes.html": {
    "href": "Articles/Guides/DataTypes.html",
    "title": "Data types",
    "keywords": "Data types The client and server can pass data to each other via Remote methods , State Synchronization or via Network Messages Mirror supports a number of data types you can use with these, including: Basic c# types (byte, int, char, uint, UInt64, float, string, etc) Built-in Unity math type (Vector3, Quaternion, Rect, Plane, Vector3Int, etc) URI NetworkIdentity Game object with a NetworkIdentity component attached See important details in Game Objects section below. Structures with any of the above It's recommended to implement IEquatable<T> to avoid boxing, and to have the struct readonly because modifying one of fields doesn't cause a resync Classes as long as each field has a supported data type These will allocate garbage and will be instantiated new on the receiver every time they're sent. ScriptableObject as long as each field has a supported data type These will allocate garbage and will be instantiated new on the receiver every time they're sent. Arrays of any of the above Not supported with SyncVars or SyncLists ArraySegments of any of the above Not supported with SyncVars or SyncLists Game Objects Game Objects in SyncVars, SyncLists, and SyncDictionaries are fragile in some cases, and should be used with caution. As long as the game object already exists on both the server and the client, the reference should be fine. When the sync data arrives at the client, the referenced game object may not yet exist on that client, resulting in null values in the sync data. This is because interally Mirror passes the netId from the NetworkIdentity and tries to look it up on the client's NetworkIdentity.spawned dictionary. If the object hasn't been spawned on the client yet, no match will be found. It could be in the same payload, especially for joining clients, but after the sync data from another object. It could also be null because the game object is excluded from a client due to network visibility, e.g. NetworkProximityChecker . You may find that it's more robust to sync the NetworkIdentity.netID (uint) instead, and do your own lookup in NetworkIdentity.spawned to get the object, perhaps in a coroutine: public GameObject target; [SyncVar(hook = nameof(OnTargetChanged))] public uint targetID; void OnTargetChanged(uint _, uint newValue) { if (NetworkIdentity.spawned.TryGetValue(targetID, out NetworkIdentity identity)) target = identity.gameObject; else StartCoroutine(SetTarget()); } IEnumerator SetTarget() { while (target == null) { yield return null; if (NetworkIdentity.spawned.TryGetValue(targetID, out NetworkIdentity identity)) target = identity.gameObject; } } Custom Data Types Sometimes you don't want mirror to generate serialization for your own types. For example, instead of serializing quest data, you may want to serialize just the quest id, and the receiver can look up the quest by id in a predefined list. Sometimes you may want to serialize data which uses a different type not supported by Mirror, such as DateTime or System.Uri You can add support for any type by adding extension methods to NetworkWriter and NetworkReader . For example, to add support for DateTime , add this somewhere in your project: public static class DateTimeReaderWriter { public static void WriteDateTime(this NetworkWriter writer, DateTime dateTime) { writer.WriteInt64(dateTime.Ticks); } public static DateTime ReadDateTime(this NetworkReader reader) { return new DateTime(reader.ReadInt64()); } } ...then you can use DateTime in your [Command] or SyncList Inheritance and Polymorphism Sometimes you might want to send a polymorphic data type to your commands. Mirror does not serialize the type name to keep messages small and for security reasons, therefore Mirror cannot figure out the type of object it received by looking at the message. This code does not work out of the box. class Item { public string name; } class Weapon : Item { public int hitPoints; } class Armor : Item { public int hitPoints; public int level; } class Player : NetworkBehaviour { [Command] void CmdEquip(Item item) { // IMPORTANT: this does not work. Mirror will pass you an object of type item // even if you pass a weapon or an armor. if (item is Weapon weapon) { // The item is a weapon, // maybe you need to equip it in the hand } else if (item is Armor armor) { // you might want to equip armor in the body } } [Command] void CmdEquipArmor(Armor armor) { // IMPORTANT: this does not work either, you will receive an armor, but // the armor will not have a valid Item.name, even if you passed an armor with name } } CmdEquip will work if you provide a custom serializer for the Item type. For example: public static class ItemSerializer { const byte WEAPON = 1; const byte ARMOR = 2; public static void WriteItem(this NetworkWriter writer, Item item) { if (item is Weapon weapon) { writer.WriteByte(WEAPON); writer.WriteString(weapon.name); writer.WritePackedInt32(weapon.hitPoints); } else if (item is Armor armor) { writer.WriteByte(ARMOR); writer.WriteString(armor.name); writer.WritePackedInt32(armor.hitPoints); writer.WritePackedInt32(armor.level); } } public static Item ReadItem(this NetworkReader reader) { byte type = reader.ReadByte(); switch(type) { case WEAPON: return new Weapon { name = reader.ReadString(), hitPoints = reader.ReadPackedInt32() }; case ARMOR: return new Armor { name = reader.ReadString(), hitPoints = reader.ReadPackedInt32(), level = reader.ReadPackedInt32() }; default: throw new Exception($\"Invalid weapon type {type}\"); } } } Scriptable Objects People often want to send scriptable objects from the client or server. For example, you may have a bunch of swords created as scriptable objects and you want put the equipped sword in a syncvar. This will work fine, Mirror will generate a reader and writer for scriptable objects by calling ScriptableObject.CreateInstance and copy all the data. However the generated reader and writer are not suitable for every occasion. Scriptable objects often reference other assets such as textures, prefabs, or other types that can't be serialized. Scriptable objects are often saved in the in the Resources folder. Scriptable objects sometimes have a large amount of data in them. The generated reader and writers may not work or may be inneficient for these situations. Instead of passing the scriptable object data, you can pass the name and the other side can lookup the same object by name. This way you can have any kind of data in your scriptable object. You can do that by providing a custom reader and writer. Here is an example: [CreateAssetMenu(fileName = \"New Armor\", menuName = \"Armor Data\")] class Armor : ScriptableObject { public int Hitpoints; public int Weight; public string Description; public Texture2D Icon; // ... } public static class ArmorSerializer { public static void WriteArmor(this NetworkWriter writer, Armor armor) { // no need to serialize the data, just the name of the armor writer.WriteString(armor.name); } public static Armor ReadArmor(this NetworkReader reader) { // load the same armor by name. The data will come from the asset in Resources folder return Resources.Load<Armor>(reader.ReadString()); } }"
  },
  "Articles/Guides/Visibility.html": {
    "href": "Articles/Guides/Visibility.html",
    "title": "Network Visibility",
    "keywords": "Network Visibility Multiplayer games use the concept of network visibility to determine which players can see which game objects at any given time during game play. In a game that has a moving viewpoint and moving game objects, it’s common that players cannot see everything that is happening in the game at once. If a particular player, at a certain point in time during game play, cannot see most of the other players, non-player characters, or other moving or interactive things in your game, there is usually no need for the server to send information about those things to the player’s client. This can benefit your game in two ways: It reduces the amount of data sent across the network between players. This can help improve the responsiveness of your game, and reduce bandwidth use. The bigger and more complex your multiplayer game, the more important this issue is. It also helps prevent some cheating. Since a player client does not have information about things that can’t be seen, a hack on that player’s computer cannot reveal the information. The idea of “visibility” in the context of networking doesn’t necessarily relate to whether game objects are directly visible on-screen. Instead, it relates to whether data should or shouldn’t be sent about the game object in question to a particular client. Put simply, if a client can’t ‘see’ an game object, it does not need to be sent information about that game object across the network. Ideally you want to limit the amount of data you are sending across the network to only what is necessary, because sending large amounts of unnecessary data across the network can cause network performance problems. However, it can be also be resource intensive or complex to determine accurately whether a game object truly visible to a given player, so it’s often a good idea to use a more simple calculation for the purposes of determining whether a player should be sent networked data about it - i.e. whether it is ‘Network Visible’. The balance you want to achieve when considering this is between the cost of the complexity of the calculation for determining the visibility, and the cost of sending more information than necessary over the network. A very simple way to calculate this is a distance (proximity) check, and Mirror provides a built-in component for this purpose. Network Proximity Checker Component Mirror’s Network Proximity Checker component is simplest way to implement network visibility for players. It works in conjunction with the physics system to determine whether game objects are close enough (that is, “visible” for the purposes of sending network messages in your multiplayer game). Network Scene Checker Component Mirror's Network Scene Checker component can be used to isolate players and networked objects on the server in additive scene instances. Network Visibility on Remote Clients When a player on a remote client joins a networked game, only game objects that are network-visible to the player will be spawned on that remote client. This means that even if the player enters a large world with many networked game objects, the game can start quickly because it does not need to spawn every game object that exists in the world. Note that this applies to networked game objects in your Scene, but does not affect the loading of Assets. Unity still takes time to load the Assets for registered Prefabs and Scene game objects. When a player moves within the world, the set of network-visible game objects changes. The player’s client is told about these changes as they happen. The ObjectHide message is sent to clients when a game object becomes no longer network-visible. By default, Mirror destroys the game object when it receives this message. When a game object becomes visible, the client receives an ObjectSpawn message, as if Mirror has spawned the game object for the first time. By default, the game object is instantiated like any other spawned game object. Network Visibility on the Host The host shares the same Scene as the server, because it acts as both the server and the client to the player hosting the game. For this reason, it cannot destroy game objects that are not visible to the local player. Instead, there is the virtual method OnSetLocalVisibility in the NetworkVisibility class that is invoked. This method is invoked on all scripts that inherit from NetworkVisibility on game objects that change visibility state on the host. The default implementation of OnSetLocalVisibility disables or enables all renderer components on the game object. If you want to customize this implementation, you can override the method in your script, and provide a new behavior for how the host (and therefore the local client) should respond when a game object becomes network-visible or invisible (such as disabling HUD elements or renderers). Customizing Network Visibility Sometimes you might want to use other kinds of visibility check, such as grid-based rules, line-of-sight tests, navigation path tests, or any other type of test that suits your game. To do this, you can create your own custom Network Observer from a script template via the Assets menu by clicking Create -> Mirror -> Network Observer. It may be helpful to understand how the Network Proximity Checker works. The Network Proximity Checker is implemented using the public visibility interface of Mirror’s HLAPI. Using this same interface, you can implement any kind of visibility rules you desire. Each NetworkIdentity keeps track of the set of players that it is visible to. The players that a NetworkIdentity game object is visible to are called the “observers” of the NetworkIdentity. The Network Proximity Checker calls the RebuildObservers method on the Network Identity component at a fixed interval (set using the “Vis Update Interval” value in the inspector), so that the set of network-visible game objects for each player is updated as they move around. In the NetworkVisibility class (which your custom observer scripts inherit from), there are some virtual functions for determining visibility. These are: OnCheckObserver This method is called on the server, on each networked game object when a new player enters the game. If it returns true, that player is added to the object’s observers. The Network Proximity Checker does a simple distance check in its implementation of this function, and uses Physics.OverlapSphereNonAlloc to find the players that are within the visibility distance for this object. OnRebuildObservers This method is called on the server when RebuildObservers is invoked. This method expects the set of observers to be populated with the players that can see the object. The NetworkServer then handles sending ObjectHide and ObjectSpawn messages based on the differences between the old and new visibility sets. OnSetHostVisibility This method is called on the server by the visibility system for objects on a host. Objects on a host (with a local client) cannot be disabled or destroyed when they are not visibile to the local client. So this function is called to allow custom code to hide these objects. A typical implementation will disable renderer components on the object. This is only called on local clients on a host. You can check whether any given networked game object is a player by checking if its NetworkIdentity has a valid connectionToClient. For example: int hitCount = Physics.OverlapSphereNonAlloc(transform.position, visRange, hitsBuffer3D, castLayers); for (int i = 0; i < hitCount; i++) { Collider hit = hitsBuffer3D[i]; NetworkIdentity identity = hit.GetComponent<NetworkIdentity>(); if (identity != null && identity.connectionToClient != null) observers.Add(identity.connectionToClient); }"
  },
  "Articles/Guides/BestPractices.html": {
    "href": "Articles/Guides/BestPractices.html",
    "title": "Best Practices",
    "keywords": "Best Practices work in progress Custom Messages If you send custom message regularly then the message should be a struct so that there is no GC/allocations struct CreateVisualEffect : NetworkMessage { public Vector3 position; public Guid prefabId; // Mirror will automatically implement message that are empty public void Deserialize(NetworkReader reader) { } public void Serialize(NetworkWriter writer) { } }"
  },
  "Articles/Guides/Attributes.html": {
    "href": "Articles/Guides/Attributes.html",
    "title": "Attributes Overview",
    "keywords": "Attributes Overview Networking attributes are added to member functions of NetworkBehaviour scripts, to make them run on either the client or server. These attributes can be used for Unity game loop methods like Start or Update, as well as other implemented methods. NOTE : when using abstract or virtual methods the Attributes need to be applied to the override methods too. NetworkSettings This attribute has been deprecated because channels were moved to transports (where applicable) and interval was moved to an inspector property Server Only a server can call the method (throws a warning or an error when called on a client). ServerCallback Same as Server but does not throw warning when called on client. Client Only a Client can call the method (throws a warning or an error when called on the server). ClientCallback Same as Client but does not throw warning when called on server. ClientRpc The server uses a Remote Procedure Call (RPC) to run that function on clients. See also: Remote Actions TargetRpc This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on clients from a server. Unlike the ClientRpc attribute, these functions are invoked on one individual target client, not all of the ready clients. See also: Remote Actions Command Call this from a client to run this function on the server. Make sure to validate input etc. It's not possible to call this from a server. Use this as a wrapper around another function, if you want to call it from the server too. See also Remote Actions​ The allowed argument types are: Basic type (byte, int, float, string, UInt64, etc) Built-in Unity math type (Vector3, Quaternion, etc), Arrays of basic types Structs containing allowable types NetworkIdentity Game object with a NetworkIdentity component attached. SyncVar SyncVars are used to synchronize a variable from the server to all clients automatically. Don't assign them from a client, it's pointless. Don't let them be null, you will get errors. You can use int, long, float, string, Vector3 etc. (all simple types) and NetworkIdentity and game object if the game object has a NetworkIdentity attached to it. You can use hooks . SyncEvent (Obsolete) SyncEvent are networked events like ClientRpc's, but instead of calling a function on the game object, they trigger Events instead. IMPORTANT: removed in version 18.0.0, see this Issue for more information."
  },
  "Articles/Guides/NetworkBehaviour.html": {
    "href": "Articles/Guides/NetworkBehaviour.html",
    "title": "NetworkBehaviour",
    "keywords": "NetworkBehaviour See also NetworkBehaviour in the API Reference. Network Behaviour scripts work with game objects that have a NetworkIdentity component. These scripts can perform high-level API functions such as Commands, ClientRpc's, SyncEvents and SyncVars. With the server-authoritative system of Mirror, the server must use the NetworkServer.Spawn function to spawn game objects with Network Identity components. Spawning them this way assigns them a netId and creates them on clients connected to the server. Note: This is not a component that you can add to a game object directly. Instead, you must create a script which inherits from NetworkBehaviour (instead of the default MonoBehaviour ), then you can add your script as a component to a game object. Properties isServer Returns true if this game object is running on the server, and has been spawned. isClient Returns true if this game object is on the client and has been spawned by the server. isLocalPlayer Returns true if this game object represents the player created for this client. hasAuthority Returns true on the client if this client has authority over this game object. It is meaningless in server context. netId The unique network ID of this game object. The server assigns this at run time. It is unique for all game objects in that network session. netIdentity Returns the NetworkIdentity of this object connectionToServer The NetworkConnection associated with the Network Identity component attached to this game object. This is only valid for player objects on the client. connectionToClient The NetworkConnection associated with the Network Identity component attached to this game object. This is only valid for player game objects on the server. NetworkBehaviour scripts have the following features: Synchronized variables Network callbacks Server and client functions Sending commands Client RPC calls Networked events Network Callbacks There are built-in callback functions which are invoked on NetworkBehaviour scripts for various network events. These are virtual functions on the base class, so you can override them in your own code like this: public class SpaceShip : NetworkBehaviour { public override void OnStartServer() { // disable client stuff } public override void OnStartClient() { // register client events, enable effects } } The built-in callbacks are: OnStartServer called on server when a game object spawns on the server, or when the server is started for game objects in the Scene OnStopServer called on server when a game object is destroyed on the server, or when the server is stopped for game objects in the Scene OnStartClient called on clients when the game object spawns on the client, or when the client connects to a server for game objects in the Scene OnStopClient called on clients when the server destroys the game object OnStartLocalPlayer called on clients for player game objects on the local client (only) OnStartAuthority called on clients for behaviours that have authority, based on context and hasAuthority. OnStopAuthority called on clients for behaviours when authority is removed. Note that in a peer-hosted setup, when one of the clients is acting as both host and client, both OnStartServer and OnStartClient are called on the same game object. Both these functions are useful for actions that are specific to either the client or server, such as suppressing effects on a server, or setting up client-side events. Server and Client functions You can tag member functions in NetworkBehaviour scripts with custom attributes to designate them as server-only or client-only functions. Server and ServerCallback return immediately if the client is not active. Likewise, Client and ClientCallback return immediately if the server is not active. The Server and Client attributes are for your own custom callback functions. They do not generate compile time errors, but they do emit a warning log message if called in the wrong scope. The ServerCallback and ClientCallback attributes are for built-in callback functions that are called automatically by Mirror. These attributes do not cause a warning to be generated. For more information, see Attributes . Commands To execute code on the server, you must use commands. The high-level API is a server-authoritative system, so commands are the only way for a client to trigger some code on the server. Only player game objects can send commands. When a client player game object sends a command, that command runs on the corresponding player game object on the server. This routing happens automatically, so it is impossible for a client to send a command for a different player. To define a command in your code, you must write a function which has: A name that begins with Cmd The Command attribute Commands are called just by invoking the function normally on the client. Instead of the command function running on the client, it is automatically invoked on the corresponding player game object on the server. Commands are type-safe, have built-in security and routing to the player, and use an efficient serialization mechanism for the arguments to make calling them fast. See Communications and related sections for more information. Client RPC Calls Client RPC calls are a way for server game objects to make things happen on client game objects. Client RPC calls are not restricted to player game objects, and may be called on any game object with a Network Identity component. To define a Client RPC call in your code, you must write a function which: Has a name that begins with Rpc Has the ClientRpc attribute See Communications and related sections for more information. Networked Events (Obsolete) IMPORTANT SyncEvents have been removed in version 18.0.0, see this Issue for more information Networked events are like Client RPC calls, but instead of calling a function on the game object, they trigger Events instead. This allows you to write scripts which can register for a callback when an event is triggered. To define a Networked event in your code, you must write a function which both: Has a name that begins with Event Has the SyncEvent attribute You can use events to build powerful networked game systems that can be extended by other scripts. This example shows how an effect script on the client can respond to events generated by a combat script on the server. SyncEvent is the base class that Commands and ClientRpc calls are derived from. You can use the SyncEvent attribute on your own functions to make your own event-driven networked game play code. Using SyncEvent, you can extend Mirror’s Multiplayer features to better fit your own programming patterns. See SyncEvents for more details."
  },
  "Articles/Guides/Profiler.html": {
    "href": "Articles/Guides/Profiler.html",
    "title": "Mirror Network Profiler",
    "keywords": "Mirror Network Profiler The Mirror Profiler is part of the Mirror Pro suit. As of this writing it is accessible to our GitHub Sponsors . Installation Make sure you have the latest version of Mirror. Become a GitHub Sponsor if you haven't. Visit with the Mirror Networking Discord. In the information channel you will learn how to join the github_sponsors channel. In the github_sponsors channel, pinned messages will guide you on how to download the profiler. Install the unity package in your project. Usage In Unity menu, click on Open Window -> Analysis -> Mirror Network Profiler. The profiler view will appear You may dock the profiler anywhere you want Start your game in the editor Press \"Record\" in the profiler Begin your game as host, client or server At the top a chart will show messages coming in and out Click the chart to select a frame The profiler will display information about all the messages sent and received in that frame Currently the messages display the following fields: In/Out: Whether the message was received (in) or sent (out) Name: Short name of the message, if the message was a [Command] , [ClientRpc] , [TargetRpc] or [TargetEvent] , this will display the name of the method, otherwise it will display the name of the message class. Bytes: The size of the message in bytes Count: In the case of out messages, this will contain how many clients the message was sent to. Total Bytes: the size of the message multiplied by the amount of clients the message was sent to (Bytes * Count) Channel: The channel used to send the message. As of this writing, we cannot determine the channel for inbound messages, so it displays -1. This will be improved in future versions. Transports can use channels for many purposes such as reliable, unreliable, encrypted, compressed, etc. Optimizing bandwidth On most transports, the total bandwidth is dominated by the Count column. This is because each message is packaged in a TCP or UDP frame, which have large headers. If you are sending multiple [Command] in the same frame, consider consolidating them into a single [Command] call if it makes sense If you see a large Count number on a specific message, consider adding a NetworkProximityChecker to your object, so that it is only visible to nearby players instead of the entire world. This can dramatically reduce the Count (and total bytes) depending on your game. If you are sending a message every single frame, consider changing your logic so that you only send messages when things change, or use a timer. Consider using SyncToOwner feature so that only the owner gets a message when private information such as inventory changes. This can dramatically reduce the Count depending on your game. If you have a lot of [ClientRpc] calls that synchronize data, consider using [SyncVar] and synclists instead. They can reduce the amount of messages because they only send deltas when they change, plus they get batched together, so hundreds of variables can be synchronized with a single message."
  },
  "Articles/Guides/Authority.html": {
    "href": "Articles/Guides/Authority.html",
    "title": "Network Authority",
    "keywords": "Network Authority Authority is a way of deciding who owns an object and has control over it. Server Authority Server authority means that the server has control of an object. Server has authority over an object by default. This means the server would manage and control of all collectible items, moving platforms, NPCs, and any other networked objects that aren't the player. Client Authority Client authority means that the client has control of an object. When a client has authority over an object it means that they can call Commands and that the object will automatically be destroyed when the client disconnects. Even if a client has authority over an object the server still controls SyncVar and control other serialization features. A component will need to use a Commands to update the state on the server in order for it to sync to other clients. How to give authority By default the server has Authority over all objects. The server can give authority to objects that a client needs to control, like the player object. If you spawn a player object using NetworkServer.AddPlayerForConnection then it will automatically be given authority. Using NetworkServer.Spawn You can give authority to a client when an object is spawned. This is done by passing in the connection to the spawn message GameObject go = Instantiate(prefab); NetworkServer.Spawn(go, connectionToClient); Using identity.AssignClientAuthority You can give authority to a client any time using AssignClientAuthority . This can be done by calling AssignClientAuthority on the object you want to give authority too identity.AssignClientAuthority(conn); You may want to do this when a player picks up an item // Command on player object void CmdPickupItem(NetworkIdentity item) { item.AssignClientAuthority(connectionToClient); } How to remove authority You can use identity.RemoveClientAuthority to remove client authority from an object. identity.RemoveClientAuthority(); Authority can't be removed from the player object. Instead you will have to replace the player object using NetworkServer.ReplacePlayerForConnection . On Authority When authority is given to or removed from an object a message will be sent to that client to notify them. This will cause the OnStartAuthority or OnStopAuthority functions to be called. Check Authority Client Side The identity.hasAuthority property can be used to check if the local player has authority over an object. Server Side The identity.connectionToClient property can be check to see which client has authority over an object. If it is null then the server has authority."
  },
  "Articles/Guides/index.html": {
    "href": "Articles/Guides/index.html",
    "title": "Networking Concepts Overview",
    "keywords": "Networking Concepts Overview High level scripting API Mirror’s networking has a “high-level” scripting API (which we’ll refer to as the HLAPI). Using this means you get access to commands which cover most of the common requirements for multiuser games without needing to worry about the “lower level” implementation details. The HLAPI allows you to: Control the networked state of the game using a “Network Manager”. Operate “client hosted” games, where the host is also a player client. Serialize data using a general-purpose serializer. Send and receive network messages. Send networked commands from clients to servers. Make remote procedure calls (RPCs) from servers to clients. Send networked events from servers to clients. Engine and Editor integration Mirror’s networking is integrated into the engine and the editor, allowing you to work with components and visual aids to build your multiplayer game. It provides: A NetworkIdentity component for networked objects. A NetworkBehaviour for networked scripts. Configurable automatic synchronization of object transforms. Automatic synchronization of script variables. Support for placing networked objects in Unity scenes. Network components"
  },
  "Articles/Guides/IDs.html": {
    "href": "Articles/Guides/IDs.html",
    "title": "Got ID?",
    "keywords": "Got ID? Asset Id Mirror uses GUID for Asset Ids. Every prefab with a NetworkIdentity component has an Asset Id, which is simply Unity's AssetDatabase.AssetPathToGUID converted to 16 bytes. Mirror needs that to know which prefabs to spawn. Scene Id Mirror uses uint for Scene Ids. Every game object with a NetworkIdentity in the scene (hierarchy) is assigned a scene id in OnPostProcessScene. Mirror needs that to distinguish scene objects from each other, because Unity has no unique id for different game objects in the scene. Network Instance Id (a.k.a. NetId) Mirror uses uint for NetId. Every NetworkIdentity is assigned a NetId in NetworkIdentity.OnStartServer, or after spawning it. Mirror uses the id when passing messages between client and server to tell which object is the recipient of the message. Connection Id Every network connection has a connection id, which is assigned by the low level Transport layer. Connection id 0 is reserved for the local connection when the server is also a client (host)"
  },
  "Articles/CommunityGuides/MirrorQuickStartGuide/index.html": {
    "href": "Articles/CommunityGuides/MirrorQuickStartGuide/index.html",
    "title": "Mirror Quick Start Guide",
    "keywords": "Mirror Quick Start Guide Written by StephenAllenGames.co.uk Edited by James Frowen This guide currently shows you: Basic scene setup Player movement Names and colours Scene script with canvas buttons Weapon switching Networked scene objects tweak Menu and scene switching Weapon firing It is best to first make a mini practice game before converting your single player game, or creating your ideal brand new multiplayer. The Pre-made Mirror examples are great for using as reference, it is recommend to use them regarding connection setup, with ports and firewalls. This can be a huge topic that changes from person to person, and is not covered in this guide, here we will use localHost (multiple games on same PC). Part 1 Blank Project, import Mirror from Asset Store . Part 2 Create new scene, save it, and add it to build settings Create a new GameObject, name it NetworkManager in the scene, and add these 3 components NetworkManager TelepathyTransport NetworkManagerHUD On the NetworkManager component, drag your Offline and Online scene into the slots, we have only one scene for now, so put your scene in both The scene must be in the build settings before dragging it to the field Part 3 Setup the scene Add a simple Plane floor with: positions (0, -1, 0) scale (2, 2, 2) (optional) add a material to this, I added one called dirt that is used one of mirrors examples Next we add a GameObject, name does not matter Add NetworkStartPosition component to this GameObject Duplicate the GameObject a few times, and scatter around your scene floor so that you have multiple spawn points. I did 4, one near each corner Part 4 Creating the player Create a capsule using the menus as shown in the image Attached a NetworkTransform component, this will auto add a Network Identity Tick Client Authority on the NetworkTransform Rename that object Player Add an empty PlayerScript Drag into Project to create a prefab Then delete Player from scene Drag your player prefab into Network manager, Set spawn method to Round Robin. Part 5 Add the following to your PlayerScript. using Mirror; using UnityEngine; namespace QuickStart { public class PlayerScript : NetworkBehaviour { public override void OnStartLocalPlayer() { Camera.main.transform.SetParent(transform); Camera.main.transform.localPosition = new Vector3(0, 0, 0); } void Update() { if (!isLocalPlayer) { return; } float moveX = Input.GetAxis(\"Horizontal\") * Time.deltaTime * 110.0f; float moveZ = Input.GetAxis(\"Vertical\") * Time.deltaTime * 4f; transform.Rotate(0, moveX, 0); transform.Translate(0, 0, moveZ); } } } Part 6 Press play in Unity editor, and then Host (server + client) button in the game window. You should be able to move around with a first person view capsule. Part 7 Build and run your scene, open it, host on one, and press the Client button on the other. Congrats you made a mini multiplayer game! Part 8 Player name above heads Inside your player Prefab, create an empty GameObject name it something like FloatingInfo position Y to 1.5 scale X to -1 Inside that FloatingInfo , create a 3D text using Unity menu (GameObject - 3D Object - 3D Text), Set it up as shown in the picture below Part 9 Update your PlayerScript.cs with this: using Mirror; using UnityEngine; namespace QuickStart { public class PlayerScript : NetworkBehaviour { public TextMesh playerNameText; public GameObject floatingInfo; private Material playerMaterialClone; [SyncVar(hook = nameof(OnNameChanged))] public string playerName; [SyncVar(hook = nameof(OnColorChanged))] public Color playerColor = Color.white; void OnNameChanged(string _Old, string _New) { playerNameText.text = playerName; } void OnColorChanged(Color _Old, Color _New) { playerNameText.color = _New; playerMaterialClone = new Material(GetComponent<Renderer>().material); playerMaterialClone.color = _New; GetComponent<Renderer>().material = playerMaterialClone; } public override void OnStartLocalPlayer() { Camera.main.transform.SetParent(transform); Camera.main.transform.localPosition = new Vector3(0, 0, 0); floatingInfo.transform.localPosition = new Vector3(0, -0.3f, 0.6f); floatingInfo.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f); string name = \"Player\" + Random.Range(100, 999); Color color = new Color(Random.Range(0f, 1f), Random.Range(0f, 1f), Random.Range(0f, 1f)) CmdSetupPlayer(name, color); } [Command] public void CmdSetupPlayer(string _name, Color _col) { // player info sent to server, then server updates sync vars which handles it on all clients playerName = _name; playerColor = _col; } void Update() { if (!isLocalPlayer) { // make non-local players run this floatingInfo.transform.LookAt(Camera.main.transform); return; } float moveX = Input.GetAxis(\"Horizontal\") * Time.deltaTime * 110.0f; float moveZ = Input.GetAxis(\"Vertical\") * Time.deltaTime * 4f; transform.Rotate(0, moveX, 0); transform.Translate(0, 0, moveZ); } } } Part 10 Add the PlayerNameText and FloatingInfo objects into the script on the player prefab, as shown below. Now if you build and run, host on one, join on the other, you will see player names and colors synced across the network! Well done, 5 stars to you! Part 11 A scene networked object all can access and adjust. Create a SceneScript.cs, add it onto an empty GameObject in the scene called SceneScript. Then create a Canvas with text and button, similar to below. Add the sceneScript variable, Awake function, and CmdSendPlayerMessage to PlayerScript.cs Also add the new playerName joined line to CmdSetupPlayer(); private SceneScript sceneScript; void Awake() { //allow all players to run this sceneScript = GameObject.FindObjectOfType<SceneScript>(); } [Command] public void CmdSendPlayerMessage() { if (sceneScript) { sceneScript.statusText = $\"{playerName} says hello {Random.Range(10, 99)}\"; } } [Command] public void CmdSetupPlayer(string _name, Color _col) { //player info sent to server, then server updates sync vars which handles it on all clients playerName = _name; playerColor = _col; sceneScript.statusText = $\"{playerName} joined.\"; } public override void OnStartLocalPlayer() { sceneScript.playerScript = this; //. . . . ^ new line to add here Add this code to SceneScript.cs using Mirror; using UnityEngine; using UnityEngine.UI; namespace QuickStart { public class SceneScript : NetworkBehaviour { public Text canvasStatusText; public PlayerScript playerScript; [SyncVar(hook = nameof(OnStatusTextChanged))] public string statusText; void OnStatusTextChanged(string _Old, string _New) { //called from sync var hook, to update info on screen for all players canvasStatusText.text = statusText; } public void ButtonSendMessage() { if (playerScript != null) { playerScript.CmdSendPlayerMessage(); } } } } Attach the ButtonSendMessage function to your Canvas Button. Attach Canvas Scene Text to SceneScript variable. ignore SceneScript’s, playerScript variable, it automatically sets this! Now if you build and run, host and join, you can send messages, and have a text log for actions! Wahooo! Experiment and adjust, have fun! Part 12 Weapon switching! The code bits. Add the following to your PlayerScript.cs private int selectedWeaponLocal = 1; public GameObject[] weaponArray; [SyncVar(hook = nameof(OnWeaponChanged))] public int activeWeaponSynced = 1; void OnWeaponChanged(int _Old, int _New) { // disable old weapon // in range and not null if (0 < _Old && _Old < weaponArray.Length && weaponArray[_Old] != null) { weaponArray[_Old].SetActive(false); } // enable new weapon // in range and not null if (0 < _New && _New < weaponArray.Length && weaponArray[_New] != null) { weaponArray[_New].SetActive(true); } } [Command] public void CmdChangeActiveWeapon(int newIndex) { activeWeaponSynced = newIndex; } void Awake() { // disable all weapons foreach (var item in weaponArray) { if (item != null) { item.SetActive(false); } } } Add the weapon switch button in update. Only local player switches its own weapon, so it goes below the !isLocalPlayer check. void Update() { if (!isLocalPlayer) { // make non-local players run this floatingInfo.transform.LookAt(Camera.main.transform); return; } float moveX = Input.GetAxis(\"Horizontal\") * Time.deltaTime * 110.0f; float moveZ = Input.GetAxis(\"Vertical\") * Time.deltaTime * 4f; transform.Rotate(0, moveX, 0); transform.Translate(0, 0, moveZ); if (Input.GetButtonDown(\"Fire2\")) //Fire2 is mouse 2nd click and left alt { selectedWeaponLocal += 1; if (selectedWeaponLocal > weaponArray.Length) { selectedWeaponLocal = 1; } CmdChangeActiveWeapon(selectedWeaponLocal); } } Part 13 Weapon models Add the basic cube weapons first, change these later. Double click your player prefab to enter it Add a \"WeaponsHolder\" empty GameObject, with position and rotation at 0,0,0. Inside that GameObject, create a cube from unity menu, (GameObject, 3D object, cube)- Remove the box colliders. Rename this Weapon1 , change position and scale to match the below pictures. Duplicate weapon 1 for a Weapon 2, and change its scale and position, now you should have 2 different looking ‘weapons’! Part 14 Weapon switch finale. Add these 2 GameObjects to your PlayerScript.cs weapons array. Disable weapon 2, so only weapon 1 shows when spawning. Build and run! You should see each player switching weapons, and whatever your player has equipped, will auto show on new joining players (sync var and hook magic!) Part 15 Here we will make a small adjustment, as using a GameObject.Find() may not guarantee Network Identity scene objects are found. In the image below you can see our NetworkIdentity scene object gets disabled, as they are disabled until a player is in ‘ready’ status (ready status is usually set when player spawns). So our chosen workaround is to have our GameObject.Find() get the non-networked scene object, which will have those Network Identity scene object as pre-set variables. Create a new script called SceneReference.cs, and add this one variable. using UnityEngine; namespace QuickStart { public class SceneReference : MonoBehaviour { public SceneScript sceneScript; } } Open up SceneScript.cs and add the following variable. public SceneReference sceneReference; Now in your Unity scene create a gameobject, name it SceneReference, and add the new script. On both Scene gameobjects, set the reference to each other. So SceneReference can speak to SceneScript, and SceneScript to SceneReference. Open up PlayerScript.cs and overwrite the Awake function to this: void Awake() { //allows all players to run this sceneScript = GameObject.Find(“SceneReference”).GetComponent<SceneReference>().sceneScript; } Part 16 Menu and Scene switching, here we will go from an offline Menu, with a play button, to a Games List with a back button and the Host/Join HUD, to your online map, and then a second map for host to switch to. Open up SceneScript.cs and add the following function. public void ButtonChangeScene() { if (isServer) { Scene scene = SceneManager.GetActiveScene(); if (scene.name == \"MyScene\") { NetworkManager.singleton.ServerChangeScene(\"MyOtherScene\"); } else { NetworkManager.singleton.ServerChangeScene(\"MyScene\"); } } else { Debug.Log(\"You are not Host.\"); } } Duplicate your previous Canvas button, rename it and reposition it, then setup the OnClick() to point to SceneScript.ButtonChangeScene, like in the image. Then drag your NetworkManager into your Project, to make it a Prefab, this way any changes we make later will apply to them all. If you haven’t already, you can sort out your project into folders, one for scripts, prefabs, scenes, textures etc. :) Part 17 Save, and then Duplicate your MyScene, rename to make a Menu, GamesList and MyOtherScene, then add them to the build settings, with Menu being first. Open up the Menu scene, remove the spawn points, SceneScript, SceneReference, Network Manager and Plane, so it looks like the below. Adjust the canvas button to say Play, centre it. Here is where you could add the Scores scene, Contact section, News, etc Create a Menu.cs script, add it onto a Menu gameObject. Add the code to Menu.cs, then in the Button, drag the Menu gameobject into the On Click () and set it to Menu.LoadScene, like in the picture. using UnityEngine; using UnityEngine.SceneManagement; namespace QuickStart { public class Menu : MonoBehaviour { public void LoadScene() { SceneManager.LoadScene(\"GamesList\"); } } } Part 18 Open up GamesList scene, do similar to Menu but KEEP NetworkManager prefab. Create a GamesList.cs, add the code, and add it onto a GamesList gameobject in the scene. Adjust a canvas button to say Menu (this is our back button). It should look like the image below. The games list is where you can add List server contents, or matchmaker, or just the host and join buttons, similar to the default NetworkManagerHud, for now leave this. :) using UnityEngine; using UnityEngine.SceneManagement; namespace QuickStart { public class GamesList : MonoBehaviour { public void LoadScene() { SceneManager.LoadScene(\"Menu\"); } } } Part 19 Open MyOtherScene, this is our second map. Change the camera background colour and floor material (or anything, just so you can see both scenes are different. To summarise, MyScene is map 1 and MyOtherScene is map 2. In your NetworkManager prefab in PROJECT (not the one in scenes), add Menu to offline, and MyScene to Online variables. This should change all the NetworkManager prefabs to have these settings. Build and Run, press Play on the Menu to go to GamesList, then click Host (for player 1). For player 2, press Play on Menu, then client connect on GamesList. Now the host can change scenes between map 1 and map 2, and if anyone disconnects or stops the game, Menu scene is load to start again. This whole process can be tidied up, but should provide a good scene switch template to your Mirror game :) Part 20 Here we will add basic weapon firing, using rigidbody prefabs. Raycasts with a representation of the fired object is usually better to do this, and keep phycisal objects for things like Grenades and Cannon balls. This section will also lack a lot of security and ant-cheat techniques in order to keep the guide simple, but anyway, here we go! Double click the Player Prefab to open it, create empty gameobjects and line them up with the end of your weapon, add them as child to each weapon. Some weapons may be short pistols, others long rifles, so the place where objects spawn will be different. Create a Weapon.cs script, add it to the Weapon1 and Weapon 2 gameObjects inside the player prefab. using UnityEngine; namespace QuickStart { public class Weapon : MonoBehaviour { public float weaponSpeed = 15.0f; public float weaponLife = 3.0f; public float weaponCooldown = 1.0f; public int weaponAmmo = 15; public GameObject weaponBullet; public Transform weaponFirePosition; } } Part 21 Now back in your scene we shall make 2 bullets, in Unitys menu, go to GameObject, 3D Object, Sphere. Add rigidbody to this sphere, make the scale 0.2, 0.2, 0.2, then save it as a Prefab in the Project. Do the same with a cube, so you have two different looking bullets. Inside your player prefab again, select a weapon, and set the variables on weapon script. Part 22 In SceneScript.cs, add this variable and function. public Text canvasAmmoText; public void UIAmmo(int _value) { canvasAmmoText.text = \"Ammo: \" + _value; } Enter MyScene (map 1). Duplicate the Canvas StatusText, rename to Ammo, then drag that Ammo text UI into SceneScript gameobject, canvasAmmoText variable. Do this on BOTH MyScene (map 1) and MyOtherScene (map 2), as we have not yet linked or prefabbed our canvas and scene scripts to auto update changes on each map. Open up PlayerScript.cs, add these two variables: private Weapon activeWeapon; private float weaponCooldownTime; In the ‘OnWeaponChanged’ function, update it with the new line, so it should look like this. void OnWeaponChanged(int _Old, int _New) { // disable old weapon // in range and not null if (0 < _Old && _Old < weaponArray.Length && weaponArray[_Old] != null) { weaponArray[_Old].SetActive(false); } // enable new weapon // in range and not null if (0 < _New && _New < weaponArray.Length && weaponArray[_New] != null) { weaponArray[_New].SetActive(true); activeWeapon = weaponArray[activeWeaponSynced].GetComponent<Weapon>(); if( isLocalPlayer ) { sceneScript.UIAmmo(activeWeapon.weaponAmmo); } } } In Awake(), add this at the end: if (selectedWeaponLocal < weaponArray.Length && weaponArray[selectedWeaponLocal] != null) { activeWeapon = weaponArray[selectedWeaponLocal].GetComponent<Weapon>(); sceneScript.UIAmmo(activeWeapon.weaponAmmo); } In Update(), add this at the end: if (Input.GetButtonDown(\"Fire1\") ) //Fire1 is mouse 1st click { if (activeWeapon && Time.time > weaponCooldownTime && activeWeapon.weaponAmmo > 0) { weaponCooldownTime = Time.time + activeWeapon.weaponCooldown; activeWeapon.weaponAmmo -= 1; sceneScript.UIAmmo(activeWeapon.weaponAmmo); CmdShootRay(); } } Add these two functions after the Update() {} function finishes. [Command] void CmdShootRay() { RpcFireWeapon(); } [ClientRpc] void RpcFireWeapon() { //bulletAudio.Play(); muzzleflash etc var bullet = (GameObject)Instantiate(activeWeapon.weaponBullet, activeWeapon.weaponFirePosition.position, activeWeapon.weaponFirePosition.rotation); bullet.GetComponent<Rigidbody>().velocity = bullet.transform.forward * activeWeapon.weaponSpeed; if (bullet) { Destroy(bullet, activeWeapon.weaponLife); } } Build and Run, you should have firing, with different speeds and cooldowns on all players :)"
  },
  "Articles/CommunityGuides/index.html": {
    "href": "Articles/CommunityGuides/index.html",
    "title": "Community Guides",
    "keywords": "Community Guides This section contains guides written by the community rather than by the developers themselves Mirror Quick Start Guide by StephenAllenGames.co.uk If you want to submit a guide either create a Pull request or ask in the discord"
  },
  "Articles/Components/Authenticators/Basic.html": {
    "href": "Articles/Components/Authenticators/Basic.html",
    "title": "Basic Authenticator",
    "keywords": "Basic Authenticator Mirror includes a Basic Authenticator in the Mirror / Authenticators folder which just uses a simple username and password. Drag the Basic Authenticator script to the inspector of the object in your scene that has Network Manager The Basic Authenticator component will automatically be assigned to the Authenticator field in Network Manager When you're done, it should look like this: Note: You don't need to assign anything to the event lists unless you want to subscribe to the events in your own code for your own purposes. Mirror has internal listeners for both events."
  },
  "Articles/Components/Authenticators/index.html": {
    "href": "Articles/Components/Authenticators/index.html",
    "title": "Authentication",
    "keywords": "Authentication When you have a multiplayer game, often you need to store information about your player for later games, keep game stats or communicate with your friends. For all these use cases, you often need a way to uniquely identify a user. Being able to tell users apart is called authentication. There are several methods available, some examples include: Ask the user for username and password Use a third party OAuth2 or OpenID identity provider, such as Facebook, Twitter, Google Use a third party service such as PlayFab, GameLift or Steam Use the device id, very popular method in mobile Use Google Play in Android Use Game Center in IOS Use a web service in your website Encryption Notice By default Mirror uses Telepathy, which is not encrypted, so if you want to do authentication through Mirror, we highly recommend you use a transport that supports encryption. Basic Authenticator Basic Authenticator Mirror includes a Basic Authenticator in the Mirror / Authenticators folder which just uses a simple username and password. Custom Authenticators Authenticators are derived from an Authenticator abstract class that allows you to implement any authentication scheme you need. From the Assets menu, click Create > Mirror > Network Authenticator to make your own custom Authenticator from our Script Templates , and just fill in the messages and validation code to suit your needs. When a client is successfully authenticated, call ServerAccept(conn); on the server and ClientAccept(conn); on the client. To reject a client call ServerReject(conn); on the server and ClientReject(conn); on the client. Mirror will responde to these method calls to proceed accordingly with completing the connection (or disconnecting) the client. Subscribe to OnServerAuthenticated and OnClientAuthenticated events if you wish to perform additional steps after authentication. Message Registration By default all messages registered to NetworkServer and NetworkClient require authentication unless explicitly indicated otherwise. To register messages to bypass authentication, you need to specify false for a bool parameter to the RegisterMessage method: NetworkServer.RegisterHandler<AuthenticationRequest>(OnAuthRequestMessage, false); Certain internal messages already have been set to bypass authentication: Server ConnectMessage DisconnectMessage ErrorMessage NetworkPingMessage Client ConnectMessage DisconnectMessage ErrorMessage SceneMessage NetworkPongMessage Tips Register handlers for messages in OnStartServer and OnStartClient . They're called from StartServer/StartHost, and StartClient, respectively. Send a message to the client if authentication fails, especially if there's some issue they can resolve. Call the Disconnect() method of the NetworkConnection on the server and client when authentication fails. If you want to give the user a few tries to get their credentials right, you certainly can, but Mirror will not do the disconnect for you. Remember to put a small delay on the Disconnect call on the server if you send a failure message so that it has a chance to be delivered before the connection is dropped. NetworkConnection has an authenticationData object where you can drop any data you need to persist on the server related to the authentication, such as account id's, tokens, character selection, etc. Now that you have the foundation of a custom Authenticator component, the rest is up to you. You can exchange any number of custom messages between the server and client as necessary to complete your authentication process before approving the client. Authentication can also be extended to character selection and customization, just by crafting additional messages and exchanging them with the client before completing the authentication process. This means this process takes place before the client player actually enters the game or changes to the Online scene. If you write a good authenticator, consider sharing it with other users or donating it to the Mirror project."
  },
  "Articles/Components/NetworkSceneChecker.html": {
    "href": "Articles/Components/NetworkSceneChecker.html",
    "title": "Network Scene Checker",
    "keywords": "Network Scene Checker The Network Scene Checker component controls the visibility of game objects for network clients, based on which scene they're in. Force Hidden Tick this checkbox to hide this object from all players. With the Network Scene Checker, a game running on a client doesn’t have information about game objects that are not visible. This has two main benefits: it reduces the amount of data sent across the network, and it makes your game more secure against hacking. This component would typically be used when the server has several subscenes loaded and needs to isolate networked objects to the subscene they're in. A game object with a Network Scene Checker component must also have a Network Identity component. When you create a Network Scene Checker component on a game object, Mirror also creates a Network Identity component on that game object if it does not already have one. Scene objects with a Network Scene Checker component are disabled when they're not in the same scene, and spawned objects are destroyed when they're not in the same scene. Use with Additive Scenes In Mirror, the Server and connected Clients are always on the same main scene, however the server and clients can have various combinations of smaller subscenes loaded additively. The server may load all subscenes at start, or it may dynamically load and unload subscenes where players or other activity is going on as needed. All player objects are always first spawned in the main scene, which may or may not have visual content, networked objects, etc. With this component attached to all networked objects, whenever the player object is moved to a subscene (from the main or from another subscene), the observers lists for objects in both the new scene and the prior scene are updated accordingly. Loading the subscene(s) on the server is through the normal process with SceneManager : SceneManager.LoadSceneAsync(subScene, LoadSceneMode.Additive); Next, you will send a SceneMessage to the client telling it to load a subscene additively: SceneMessage msg = new SceneMessage { sceneName = subScene, sceneOperation = SceneOperation.LoadAdditive }; connectionToClient.Send(msg); Then, on the server only, you just move the player object to the subscene: // Position the player object in world space first // This assumes it has a NetworkTransform component that will update clients player.transform.position = new Vector3(100, 1, 100); // Then move the player object to the subscene SceneManager.MoveGameObjectToScene(player, subScene); Optionally you can send another SceneMessage to the client with SceneOperation.UnloadAdditive to remove any previous additive scene the client no longer needs. This would apply to a game that has levels after a level change. A short delay may be necessary before removal to allow the client to get fully synced. Depending on the complexity of your game, you may find it helpful when switching a player between subscenes to move the player object to the main scene first, yield 100 ms, re-position it, and finally move it to the new subscene."
  },
  "Articles/Components/NetworkManagerHUD.html": {
    "href": "Articles/Components/NetworkManagerHUD.html",
    "title": "Network Manager HUD",
    "keywords": "Network Manager HUD The Network Manager HUD (“heads-up display”) is a quick-start tool to help you start building your multiplayer game straight away, without first having to build a user interface for game creation/connection/joining. It allows you to jump straight into your game play programming, and means you can build your own version of these controls later in your development schedule. It is not, however, intended to be included in finished games. The idea is that these controls are useful to get you started, but you should create your own UI later on, to allow your players to find and join games in a way that suits your game. For example, you might want to stylize the design of the screens, buttons and list of available games to match the overall style of your game. To start using the Network Manager HUD, either add the component to the same scene object that has the Network Manager component, or create an empty game object in your scene (menu: game object > Create Empty) and add the Network Manager HUD component to the new game object. Show GUI Tick this checkbox to show the HUD GUI at run time. This allows you to reveal or hide it for quick debugging. Offset X Set the horizontal pixel offset of the HUD GUI, measured from the left edge of the screen. Offset Y Set the vertical pixel offset of the HUD GUI, measured from the top edge of the screen. The Network Manager HUD provides the basic functions so that people playing your game can start hosting a networked game, or find and join an existing networked game. Unity displays the Network Manager HUD as a collection of simple UI buttons in the Game view. Using the HUD The Network Manager HUD starts in Server + Client mode, and displays buttons relating to hosting and joining a multiplayer game. Host (Server + Client) Click the Host (Server + Client) button to start a game as a host on the local network. This client is both the host and one of the players in the game. It uses the information from the Network Info section in the inspector to host the game. When you click this button, the HUD switches to a simple display of network details, and a Stop button which allows you to stop hosting the game and return to the main HUD menu. When you have started a game as a host, other players of the game can then connect to the host to join the game. Click the Stop button to disconnect from the host. Clicking Stop also returns to the main HUD menu. Client To connect to a host on the internet use the text field to the right of the Client button to specify the address of the host. The default host address is “localhost”, which means the client looks on its own computer for the game host. In addition to localhost , you can specify an IPv4 address, and IPv6 address, or a fully-qualified domain name (FQDN), e.g. game.example.com , and the transport with resolve the name using DNS. Click Client to attempt to connect to the host address you have specified. Use the default “localhost” in this field if you are running multiple instances of your game on one computer, to test multiplayer interactivity. To do this, you can create a standalone build of your game, and then launch it multiple times on your computer. This is a common way to quickly test that your networked game interactions are functioning as you expect, without you needing to deploy your game to multiple computers or devices. When you want to test your game on multiple machines you need to put the address of the computer acting as host into the address text field. The computer acting as the host needs to tell their IP address to everyone running clients, so that you can type this into the box. For local clients on a LAN, that's the local IP address. For remote clients, that's the WAN IP address of the router of the host. Firewall rules and port-forwarding are generally required for a computer to act as host and accept connections from other computers, whether they're on the LAN or the internet. Enter the IP address (or leave it as “localhost” if you are testing it on your own machine), then click Client to attempt to connect to the host. When the client is attempting to connect, the HUD displays a Cancel Connection Attempt button. Click this if you want to stop trying to connect to the host. If the connection is successful, the HUD displays the Stop button. Click this if you want to stop the game on the client and disconnect from the host: Server Only Click Server Only to start a game which acts as a server that other clients can connect to, but which does not act as a client to the game itself. This type of game is often called a “dedicated server”. A user cannot play the game on this particular instance of your game. All players must connect as clients, and nobody plays on the instance that is running as the server. A dedicated server results in better performance for all connected players, because the server doesn’t need to process a local player’s game play in addition to acting as server. You might also choose this option if you want to host a game that can be played over the internet (rather than just within a local network), but want to maintain control of the server yourself - for example, to prevent cheating by one of the clients, because only the server has authority over the game. To do this, you would need to run the game in Server Only mode on a computer with a public IP address."
  },
  "Articles/Components/NetworkPingDisplay.html": {
    "href": "Articles/Components/NetworkPingDisplay.html",
    "title": "Network Ping Display",
    "keywords": "Network Ping Display Network Ping Display shows the Ping time for clients using OnGUI. The Ping time is the moving average of the (RTT) Round-trip delay time. RTT is calculated by the PingMessage/PongMessage between the client and server. See Clock Synchronization for more info."
  },
  "Articles/Components/NetworkLerpRigidbody.html": {
    "href": "Articles/Components/NetworkLerpRigidbody.html",
    "title": "Network Lerp Rigidbody",
    "keywords": "Network Lerp Rigidbody The Network Lerp Rigidbody classed as \"Experimental\" for now so please share any problems or bugs you find with it and use at your own risk if production builds. The Network Lerp Rigidbody component synchronizes position and velocity of a rigidbody across the network. This component is useful when you have a non-kinematic rigidbody that have constant forces applied to them, like gravity, but also want to apply forces or change velocity to that rigidbody or server or client with authority. For example, objects that move and jump using rigidbody using gravity. A game object with a Network Rigidbody component must also have a Network Identity component. When you add a Network Rigidbody component to a game object, Mirror also adds a Network Identity component on that game object if it does not already have one. When using the Network Lerp Rigidbody you should have NetworkTransform on the same object as the Network Lerp Rigidbody will handle syncing the position By default, Network Lerp Rigidbody is server-authoritative unless you check the box for Client Authority . Client Authority applies to player objects as well as non-player objects that have been specifically assigned to a client, but only for this component. With this enabled, value changes are send from the client to the server. Normally, changes are sent to all observers of the object this component is on. Setting Sync Mode to Owner Only makes the changes private between the server and the client owner of the object. You can use the Sync Interval to specify how often it syncs (in seconds). This applies both to Client Authority and Server Authority."
  },
  "Articles/Components/NetworkHeadlessLogger.html": {
    "href": "Articles/Components/NetworkHeadlessLogger.html",
    "title": "Network Headless Logger",
    "keywords": "Network Headless Logger Network Headless Logger replaces the the default log handler with one that set Console.ForegroundColor . Only replaces the handler when running in headless mode. showExceptionStackTrace will log the stack trace of any exceptions sent to the handler."
  },
  "Articles/Components/NetworkIdentity.html": {
    "href": "Articles/Components/NetworkIdentity.html",
    "title": "Network Identity",
    "keywords": "Network Identity See also NetworkIdentity in the API Reference. The Network Identity component is at the heart of the Unity networking high-level API. It controls a game object’s unique identity on the network, and it uses that identity to make the networking system aware of the game object. It offers two different options for configuration and they are mutually exclusive, which means either one of the options or none can be checked. Server Only Tick this checkbox to ensure that Unity only spawns the game object on the server, and not on clients. Instantiated Network Game Objects With the Mirror’s server-authoritative networking system, the server must spawn networked game objects with network identities, using NetworkServer.Spawn . This automatically creates them on clients that are connected to the server, and assigns them a netId . You must put a Network Identity component on any Prefabs that spawn at runtime for the network system to use them. See Object Spawning for more information. Scene-based Network Game Objects You can also network game objects that are saved as part of your Scene (for example, environmental props). Networking game objects makes them behave slightly differently, because you need to have them spawn across the network. When building your game, Unity disables all Scene-based game objects with Network Identity components. When a client connects to the server, the server sends spawn messages to tell the client which Scene game objects to enable and what their most up-to-date state information is. This ensures the client’s game does not contain game objects at incorrect locations when they start playing, or that Unity does not spawn and immediately destroy game objects on connection (for example, if an event removed the game object before that client connected). See Networked Scene Game Objects for more information. Preview Pane Information This component contains network tracking information, and displays that information in the preview pane. For example, the scene ID, network ID and asset ID the object has been assigned. This allows you to inspect the information which can be useful for investigation and debugging. At runtime there is more information to display here (a disabled NetworkBehaviour is displayed non-bold):"
  },
  "Articles/Components/NetworkDiscovery.html": {
    "href": "Articles/Components/NetworkDiscovery.html",
    "title": "Network Discovery",
    "keywords": "Network Discovery Suppose your are next to a friend. He starts a game in host mode and you want to join him. How will your phone locate his? Finding out his IP address is not exactly intuitive or something kids can do. To solve this problem you can use Network Discovery. When your game starts, it sends a message in your current network asking \"Is there any server available?\". Any server within the same network will reply and provide information about how to connect to it. Mirror comes with a simple implementation of Network Discovery you can simply use in your game. It also provides a way for you to extend it so that you can pass additional data during the discovery phase. NetworkDiscovery and NetworkDiscoveryHUD components are included, or you can make your own from a ScriptTemplate . Network Discovery uses a UDP broadcast on the LAN enabling clients to find the running server and connect to it. When a server is started, it listens on the UDP Broadcast Listen Port for requests from clients and returns a connection URI that clients apply to their transport. You can adjust how often the clients send their requests out to find a server in seconds with the Active Discovery Interval. The Server Found event must be assigned to a handler method, e.g. the OnDiscoveredServer method of NetworkDiscoveryHUD. In the NetworkDiscoveryHUD, the NetworkDiscovery component should be assigned automatically. Quick Start To use Network Discovery follow these steps: Create a gameobject with a NetworkManager if you have not done so already Do not add a NetworkManagerHUD. Discovery has a different UI component. Add a NetworkDiscoveryHUD component to the NetworkManager gameobject. A NetworkDiscovery component will be automatically added and wired up to your HUD. Add a player to the NetworkManager if you have not done so. Build and run a standalone version Click on Start Host Start play mode in the editor and click on Find Servers The editor should find the standalone version and display a button Click on the button to connect to it. The NetworkDiscoveryHUD is provided as a simple and quick way to get started, but you will probably want to replace it with your own user interface. Custom Network Discovery You can completely replace the user interface by adding your own interface (typically Unity UI based) instead of the default NetworkDiscoveryHUD. You do still need the NetworkDiscovery component to do the heavy lifting. Sometimes you want to provide more information in the discovery messages. Some use cases could include: The client can show if the server is in PvP or PvE mode The client can show how full the servers are. The client can show the ping to each server so the player can chose the fastest server The client can show the language The client can show if the server is password protected To do this, we've provided a Template , so from the Assets menu, click Create > Mirror > Network Discovery. This will create a script in your project with 2 empty message classes and a custom NetworkDiscovery class that inherits from NetworkDiscoveryBase and has all the override methods included and documented for you. The message classes define what is sent between the client and server. As long as you keep your messages simple using the data types that Mirror can serialize, you won't need to write custom serializers for them. public struct DiscoveryRequest : NetworkMessage { public string language; // Add properties for whatever information you want sent by clients // in their broadcast messages that servers will consume. } enum GameMode {PvP, PvE}; public struct DiscoveryResponse : NetworkMessage { // you probably want uri so clients know how to connect to the server public Uri uri; public GameMode GameMode; public int TotalPlayers; public int HostPlayerName; // Add properties for whatever information you want the server to return to // clients for them to display or consume for establishing a connection. } The custom NetworkDiscovery class contains the overrides for handling the messages above. You may want to refer to the NetworkDiscovery.cs script in the Components/Discovery folder to see how these should be implemented. public class NewNetworkDiscovery: NetworkDiscoveryBase<DiscoveryRequest, DiscoveryResponse> { #region Server protected override void ProcessClientRequest(DiscoveryRequest request, IPEndPoint endpoint) { base.ProcessClientRequest(request, endpoint); } protected override DiscoveryResponse ProcessRequest(DiscoveryRequest request, IPEndPoint endpoint) { // TODO: Create your response and return it return new DiscoveryResponse(); } #endregion #region Client protected override DiscoveryRequest GetRequest() { return new DiscoveryRequest(); } protected override void ProcessResponse(DiscoveryResponse response, IPEndPoint endpoint) { // TODO: a server replied, do something with the response such as invoking a unityevent } #endregion }"
  },
  "Articles/General/Integrations/index.html": {
    "href": "Articles/General/Integrations/index.html",
    "title": "Integrations",
    "keywords": "Integrations Here we will maintain a list of assets known to be compatible with Mirror. If you know of others, please have the publisher contact us directly in our Discord . SmoothSync Weather Maker Noble Connect Free Dissonance Voice Chat RTS Engine Rucksack Steamworks Networking Master Audio Multiplayer"
  },
  "Articles/General/TCPvsUDP.html": {
    "href": "Articles/General/TCPvsUDP.html",
    "title": "TCP vs UDP",
    "keywords": "TCP vs UDP TCP and UDP are protocol used to send information over the internet. Key difference between UDP and TCP TCP has higher latency, reliable UDP has lower latency, unreliable TCP (Transmission Control Protocol) TCP is the most popular protocol on the internet. TCP is used for HTTP, SSH, FTP, and many more. TCP features make it easy for programers to work with TCP but at the cost of latency. TCP is better for slower paced games where latency isn't important. Key features include Reliable: Applications don't have to worry about missing packets. If a packet gets lost, TCP will resend it. All data is either transmitted successfully or you get an error and the connection is closed. Sequenced: TCP guarantees that every message will arrive in the same order it was sent. If you send \"a\" then \"b\" you will receive \"a\" then \"b\" on the other side as well. Connection oriented: TCP has the concept of a connection. A connection will say open until either the client or server decides to close it. Both the client and server get notified when the connection ends. Congestion control: If a server is being overwhelmed, TCP will throttle the data to avoid congestion collapse. Transports Telepathy Apathy WebGL UDP (User Datagram Protocol) UDP is used for real time applications such as fast paced action games or voice over ip, where low latency is more important than reliability. UDP features allow a greater control of how data is sent allowing non-critical data to be send faster. UDP is better for fast paced games where latency is important and if a few packets are lost the game can recover. Key features include Low Latency: UDP is faster because it doesn't need to wait for acknowledge packets, instead it can send keep sending new pacakges one after the other. Channel support: Channels allow for different delivery types. One channel can be used for critical data that needs to get to the destination, while a different channel can just be specified by send and forget without any reliability. Different packet types: Reliable Ordered, Reliable Unordered, Unreliable, and more depending on the implementation Transports Ignorance LiteNetLib The choice is yours Mirror is transport independent, they can simply by added to your NetworkManager GameObject. Mirror comes with 2 built in transports to pick from, Telepathy and Ninja WebSockets . See the transports page for more about transports. Pick whatever works best for you. We recommend you profile your game and collect real world numbers before you make a final decision."
  },
  "Articles/General/Deprecations.html": {
    "href": "Articles/General/Deprecations.html",
    "title": "Deprecations",
    "keywords": "Deprecations Certain features of Unity Networking (UNet) were removed from Mirror or modified for various reasons. This page will identify all changed and removed features, properties, and methods, the reason for change or removal, and possible alternatives. Note: Some changes in this document may apply to an upcoming release to the Asset Store. Match Namespace & Host Migration As part of the Unity Services, this entire namespace was removed. It didn't work well to begin with, and was incredibly complex to be part of the core networking package. We expect this, along with other back-end services, will be provided through standalone apps that have integration to Mirror. Network Server Simple This was too complex and impractical to maintain for what little it did, and was removed. There are much easier ways to make a basic listen server, with or without one of our transports. Couch Co-Op The core networking was greatly simplified by removing this low-hanging fruit. It was buggy, and too convoluted to be worth fixing. For those that need something like this, consider defining a non-visible player prefab as a message conduit that spawns actual player prefabs with client authority. All inputs would route through the conduit prefab to control the player objects. Message Types The MsgType enumeration was removed. All message types are generated dynamically. Use Send<T> instead. Network Transform Network Transform was significantly simplified so that it only syncs position, rotation and scale. Rigidbody support was removed. We may create a new NetworkRigidbody component that will be server authoritative with physics simulation and interpolation. Network Animator Network Animator was also simplified, as it batches all Animator parameters into a single update message. SyncVar Hook Parameters SyncVar property values are now updated before the hook is called, and hooks now require two parameters of the same type as the property: oldValue and newValue SyncListSTRUCT Use SyncList<YourSpecialStruct> instead. SyncList Operations OP_REMOVE was replaced by OP_REMOVEAT OP_DIRTY was replaced by OP_SET SyncIDictionary Operations OP_DIRTY was replaced by OP_SET Quality of Service Flags In classic UNet, QoS Flags were used to determine how packets got to the remote end. For example, if you needed a packet to be prioritized in the queue, you would specify a high priority flag which the Unity LLAPI would then receive and deal with appropriately. Unfortunately, this caused a lot of extra work for the transport layer and some of the QoS flags did not work as intended due to buggy code that relied on too much magic. In Mirror, QoS flags were replaced with a \"Channels\" system. While the default transport, Telepathy , does not use channels at all because it's TCP-based, other transports, such as Ignorance and LiteNetLib4Mirror , do support them. The currently defined channels are: Channels.DefaultReliable = 0 Channels.DefaultUnreliable = 1 Changes by Class NetworkManager networkPort Removed as part of separating Transports to components. Not all transports use ports, but those that do have a field for it. See Transports for more info. IsHeadless() Use compiler symbol UNITY_SERVER instead. client Use NetworkClient directly, it will be made static soon. For example, use NetworkClient.Send(message) instead of NetworkManager.client.Send(message) . IsClientConnected() Use static property NetworkClient.isConnected instead. onlineScene and offlineScene These store full paths now, so use SceneManager.GetActiveScene().path instead. OnStartClient(NetworkClient client) Override OnStartClient() instead since all NetworkClient methods are static now. OnClientChangeScene(string newSceneName) Override OnClientChangeScene(string newSceneName, SceneOperation sceneOperation, bool customHandling) instead. OnClientChangeScene(string newSceneName, SceneOperation sceneOperation) Override OnClientChangeScene(string newSceneName, SceneOperation sceneOperation, bool customHandling) instead. OnServerAddPlayer(NetworkConnection conn, AddPlayerMessage extraMessage) Override OnServerAddPlayer(NetworkConnection conn) instead. See Custom Player Spawn Guide for details. OnServerRemovePlayer(NetworkConnection conn, NetworkIdentity player) Use NetworkServer.RemovePlayerForConnection(NetworkConnection conn, GameObject player, bool keepAuthority = false) instead. NetworkRoomManager OnRoomServerCreateGamePlayer(NetworkConnection conn) Use OnRoomServerCreateGamePlayer(NetworkConnection conn, GameObject roomPlayer) instead. OnRoomServerSceneLoadedForPlayer(GameObject roomPlayer, GameObject gamePlayer) Use OnRoomServerSceneLoadedForPlayer(NetworkConnection conn, GameObject roomPlayer, GameObject gamePlayer) instead. NetworkIdentity clientAuthorityOwner Use connectionToClient instead GetSceneIdenity Use GetSceneIdentity instead (typo in original name) RemoveClientAuthority(NetworkConnection conn) NetworkConnection parameter is no longer needed and nothing is returned Local Player Authority checkbox This checkbox is no longer needed, and we simplified how Authority works in Mirror. NetworkBehaviour sendInterval attribute Use NetworkBehaviour.syncInterval field instead. Can be modified in the Inspector too. List<SyncObject> m_SyncObjects Use List<SyncObject> syncObjects instead. OnSetLocalVisibility(bool visible) Override OnSetHostVisibility(bool visible) instead. OnRebuildObservers , OnCheckObserver , and OnSetHostVisibility were moved to a separate class called NetworkVisibility NetworkBehaviour.OnNetworkDestroy was renamed to NetworkBehaviour.OnStopClient . NetworkConnection hostId Removed because it's not needed ever since we removed LLAPI as default. It's always 0 for regular connections and -1 for local connections. Use connection.GetType() == typeof(NetworkConnection) to check if it's a regular or local connection. isConnected Removed because it's pointless. A NetworkConnection is always connected. InvokeHandlerNoData(int msgType) Use InvokeHandler<T> instead. playerController renamed to identity since that's what it is: the NetworkIdentity for the connection. If you need to convert a project after this change, Visual Studio / VS Code can help...read more here . RegisterHandler(short msgType, NetworkMessageDelegate handler) Use NetworkServer.RegisterHandler<T>() or NetworkClient.RegisterHandler<T>() instead. UnregisterHandler(short msgType) Use NetworkServer.UnregisterHandler<T>() or NetworkClient.UnregisterHandler<T>() instead. Send(int msgType, MessageBase msg, int channelId = Channels.DefaultReliable) Use Send<T>(msg, channelId) instead. NetworkServer FindLocalObject(uint netId) Use NetworkIdentity.spawned[netId].gameObject instead. RegisterHandler(int msgType, NetworkMessageDelegate handler) Use RegisterHandler<T>(T msg) instead. RegisterHandler(MsgType msgType, NetworkMessageDelegate handler) Use RegisterHandler<T>(T msg) instead. UnregisterHandler(int msgType) Use UnregisterHandler<T>(T msg) instead. UnregisterHandler(MsgType msgType) Use UnregisterHandler<T>(T msg) instead. SendToAll(int msgType, MessageBase msg, int channelId = Channels.DefaultReliable) Use SendToAll<T>(T msg, int channelId = Channels.DefaultReliable) instead. SendToClient(int connectionId, int msgType, MessageBase msg) Use NetworkConnection.Send<T>(T msg, int channelId = Channels.DefaultReliable) instead. SendToClient<T>(int connectionId, T msg) Use NetworkConnection.Send<T>(T msg, int channelId = Channels.DefaultReliable) instead. SendToClientOfPlayer(NetworkIdentity identity, int msgType, MessageBase msg) Use SendToClientOfPlayer<T>(NetworkIdentity identity, T msg, int channelId = Channels.DefaultReliable) instead. SendToReady(NetworkIdentity identity, short msgType, MessageBase msg, int channelId = Channels.DefaultReliable) Use SendToReady<T>(NetworkIdentity identity, T msg, int channelId = Channels.DefaultReliable) instead. SpawnWithClientAuthority(GameObject obj, GameObject player) Use Spawn(GameObject obj, GameObject player) instead. SpawnWithClientAuthority(GameObject obj, NetworkConnection ownerConnection) Use Spawn(GameObject obj, NetworkConnection ownerConnection) instead. SpawnWithClientAuthority(GameObject obj, Guid assetId, NetworkConnection ownerConnection) Use Spawn(GameObject obj, Guid assetId, NetworkConnection ownerConnection) instead NetworkClient NetworkClient singleton Use NetworkClient directly. Singleton isn't needed anymore as all functions are static now. Example: NetworkClient.Send(message) instead of NetworkClient.singleton.Send(message) . allClients Use NetworkClient directly instead. There is always exactly one client. GetRTT() Use NetworkTime.rtt instead. RegisterHandler(int msgType, NetworkMessageDelegate handler) Use RegisterHandler<T>(T msg) instead. RegisterHandler(MsgType msgType, NetworkMessageDelegate handler) Use RegisterHandler<T>(T msg) instead. UnregisterHandler(int msgType) Use UnregisterHandler<T>(T msg) instead. UnregisterHandler(MsgType msgType) Use UnregisterHandler<T>(T msg) instead. Send(short msgType, MessageBase msg) Use Send<T>(T msg, int channelId = Channels.DefaultReliable) with no message id instead ShutdownAll() Use Shutdown() instead. There is only one client. ClientScene FindLocalObject(uint netId) Use NetworkIdentity.spawned[netId] instead. Messages Basic messages of simple types were all removed as unnecessary bloat. You can create your own message classes instead. StringMessage ByteMessage BytesMessage IntegerMessage DoubleMessage EmptyMessage NetworkMessage requires structs in all cases - classes no longer supported NetworkReader Read(byte[] buffer, int offset, int count) Use ReadBytes instead. ReadPackedInt32(int value) Use ReadInt32(int value) instead ReadPackedUInt32(uint value) Use ReadUInt32(uint value) instead ReadPackedUInt64(ulong value) Use ReadUInt64(ulong value) instead NetworkWriter Write(bool value) Use WriteBoolean instead. Write(byte value) Use WriteByte instead. Write(sbyte value) Use WriteSByte instead. Write(short value) Use WriteInt16 instead. Write(ushort value) Use WriteUInt16 instead. Write(int value) Use WriteInt32 instead. Write(uint value) Use WriteUInt32 instead. Write(long value) Use WriteInt64 instead. Write(ulong value) Use WriteUInt64 instead. Write(float value) Use WriteSingle instead. Write(double value) Use WriteDouble instead. Write(decimal value) Use WriteDecimal instead. Write(string value) Use WriteString instead. Write(char value) Use WriteChar instead. Write(Vector2 value) Use WriteVector2 instead. Write(Vector2Int value) Use WriteVector2Int instead. Write(Vector3 value) Use WriteVector3 instead. Write(Vector3Int value) Use WriteVector3Int instead. Write(Vector4 value) Use WriteVector4 instead. Write(Color value) Use WriteColor instead. Write(Color32 value) Use WriteColor32 instead. Write(Guid value) Use WriteGuid instead. Write(Transform value) Use WriteTransform instead. Write(Quaternion value) Use WriteQuaternion instead. Write(Rect value) Use WriteRect instead. Write(Plane value) Use WritePlane instead. Write(Ray value) Use WriteRay instead. Write(Matrix4x4 value) Use WriteMatrix4x4 instead. Write(NetworkIdentity value) Use WriteNetworkIdentity instead. Write(GameObject value) Use WriteGameObject instead. Write(byte[] buffer, int offset, int count) Use WriteBytes instead. WritePackedInt32(int value) Use WriteInt32(int value) instead WritePackedUInt32(uint value) Use WriteUInt32(uint value) instead WritePackedUInt64(ulong value) Use WriteUInt64(ulong value) instead Transport GetConnectionInfo(int connectionId, out string address) Use ServerGetClientAddress(int connectionId) instead. TelepathyTransport MaxMessageSize Use MaxMessageSizeFromClient or MaxMessageSizeFromServer instead."
  },
  "Articles/General/ScriptTemplates.html": {
    "href": "Articles/General/ScriptTemplates.html",
    "title": "Script Templates",
    "keywords": "Script Templates We've added Script Templates to make it easier to create derived class scripts that inherit from our base classes. All possible overrides are already made for you and organized. They're all fully commented as to what they all do. Base method calls are all in place where needed so you can see what they already do. Each has links at the top to their doc page(s). Import this package to add Script Templates to your project. Restart Required: You must restart Unity after importing this package! Root Folder Required: ScriptTemplates is a special folder to Unity and must remain in the Assets root...don't move it. Mirror Version Compatibility: This package is made for the current Asset Store release of Mirror. It may not be compatible with older versions of Mirror. After importing and restarting Unity, the Mirror section will appear under the Assets > Create menu, as well as the context menu that comes up when you right-click on any folder in your project. You'll be prompted for the file name like any other asset creation. Hopefully these templates will be helpful to new users of Mirror to learn what methods are available in various classes, as well as just being more convenient for everyone."
  },
  "Articles/General/Migration.html": {
    "href": "Articles/General/Migration.html",
    "title": "Migration Guide",
    "keywords": "Migration Guide Migrating a project from UNet (HLAPI) This guide gives you a step by step instruction for migrating your project from HLAP to Mirror. Mirror is a fork of UNet. As such the migration is straight forward for most projects. You should review the information on the Deprecations page to see if your project will be impacted. There's also a Migration Tool you can try: https://github.com/Lymdun/MirrorConverter/ 1. BACKUP You have been warned. 2. Install Mirror and Restart Unity Get Mirror from the asset store and import it in your project. Alternatively you can grab the latest release from GitHub if you're feeling adventurous, but be aware that bleeding edge dev releases are not necessarily stable. NOTE: You must restart Unity after adding Mirror to the project for the components menu to update correctly. 3. Replace namespace Replace UnityEngine.Networking for Mirror everywhere in your project. For example, if you have this: using UnityEngine.Networking; public class Player : NetworkBehaviour { ... } replace it with: using Mirror; public class Player : NetworkBehaviour { ... } At this point, you might get some compilation errors. Don't panic, these are easy to fix. Keep going... 4. Replace playerController with identity Replace references to NetworkConnection.playerController with NetworkConnection.identity . Click here for guidance. 5. Remove NetworkSettings NetworkSettings in UNet have channels, but this is flat out broken. Rather than ignoring your settings we removed channels from NetworkSettings completely. sendInterval is now set in code and / or the inspector too. For example, if you have this code: [NetworkSettings(channel=1,sendInterval=0.05f)] public class NetStreamer : NetworkBehaviour { ... } replace it with: public class NetStreamer : NetworkBehaviour { void Start() { syncInterval = 0.05f; } } Please note that the default transport Telpathy , completely ignores channels, all messages are reliable, sequenced and fragmented. They just work with no fuss. If you want to take advantage of unreliable channels use LLAPITransport instead. 6. Change SyncListStruct to SyncList There is a bug in the original UNet Weaver that makes it mess with our Mirror.SyncListStruct without checking the namespace. In Mirror, we fixed SyncLists so that they work with structs by default. For example, if you have definitions like: public class SyncListQuest : SyncListStruct<Quest> { } replace them with: public class SyncListQuest : SyncList<Quest> { } 7. Replace NetworkHash128 and NetworkInstanceId These have been changed to System.Guid and uint, respectively. For example, if you have something like this: public sealed class SpawnItemMessage : MessageBase { public NetworkHash128 assetID; public NetworkInstanceId networkInstanceID; public Vector3 position; public Quaternion rotation; } replace with: public sealed struct SpawnItemMessage : NetworkMessage { public System.Guid assetID; public uint networkInstanceID; public Vector3 position; public Quaternion rotation; } 8. Update your synclist callbacks In UNet, SyncLists have a callback delegate that gets called in the client whenever the list is updated. We have changed the callback to be a C# event instead and we also pass the item that was updated/removed. For example, if you have this code: using UnityEngine; using UnityEngine.Networking; public class MyBehaviour : NetworkBehaviour { public SyncListInt m_ints = new SyncListInt(); private void OnIntChanged(SyncListInt.Operation op, int index) { Debug.Log(\"list changed \" + op); } public override void OnStartClient() { m_ints.Callback = OnIntChanged; } } replace it with: using UnityEngine; using Mirror; public class MyBehaviour : NetworkBehaviour { public SyncListInt m_ints = new SyncListInt(); private void OnIntChanged(SyncListInt.Operation op, int index, int oldItem, int newItem) { Debug.Log(\"list changed \" + op + \" old item: \" + item + \" new item: \" + newItem); } public override void OnStartClient() { m_ints.Callback += OnIntChanged; } } Notice the callback will also work in the server in Mirror. 9. Replace Components Every networked prefab and scene object needs to be adjusted. They will be using NetworkIdentity from Unet, and you need to replace that component with NetworkIdentity from Mirror. You may be using other network components, such as NetworkAnimator or NetworkTransform . All components from Unet should be replaced with their corresponding component from Mirror. Note that if you remove and add a NetworkIdentity, you will need to reassign it in any component that was referencing it. 10. Update Extended Components Some commonly extended components, such as NetworkManager, have changed method parameters in Mirror. A commonly used override is OnServerAddPlayer. Using the original HLAPI, your override may have looked like this: public override void OnServerAddPlayer(NetworkConnection conn, short playerControllerId, NetworkReader extraMessageReader) { base.OnServerAddPlayer(conn, playerControllerId, extraMessageReader); // your code } In your newly Mirror-capable NetworkManager, if you are using the OnServerAddPlayer override, remove the \"playerControllerId\" and \"extraMessageReader\" parameters from your override and the base call: public override void OnServerAddPlayer(NetworkConnection conn) { base.OnServerAddPlayer(conn); // your code } See Custom Player Spawn Guide for details on how to submit custom characters now. 11. Pick your transport You can choose one of several transports in Mirror. Open your NetworkManager gameobject, in the inspector you will see a TelepathyTransport component by default. Drag in one of the available transports and remove TelepathyTransport if you wish to use a UDP based transport instead. 12. Configure address and port In HLAPI, you configure the port and local address in the NetworkManager. One of our goals is to make Mirror transport independent. Not all transports need address and port. Some transports might even use more than one port at the same time, so these settings were inadequate. We removed the port and address and all other Network Info properties from NetworkManager, and we moved them to the transport components instead. 13. Update your firewall and router LLAPI uses UDP. Mirror uses TCP by default. This means you may need to change your router port forwarding and firewall rules in your machine to expose the TCP port instead of UDP. This highly depends on your router and operating system. Video version See for yourself how uMMORPG was migrated to Mirror Possible Error Messages TypeLoadException: A type load exception has occurred. - happens if you still have SyncListStruct instead of SyncListSTRUCT in your project. NullPointerException: The most likely cause is that you replaced NetworkIdentities or other components but you had them assigned somewhere. Reassign those references. error CS0246: The type or namespace name 'UnityWebRequest' could not be found. Are you missing 'UnityEngine.Networking' using directive? Add this to the top of your script: using UnityWebRequest = UnityEngine.Networking.UnityWebRequest; UnityWebRequest is not part of UNet or Mirror, but it is in the same namespace as UNet. Changing the namespace to Mirror caused your script not to find UnityWebRequest. The same applies for WWW and all UnityWebRequest related classes."
  },
  "Articles/General/PlayerControllerToIdentity.html": {
    "href": "Articles/General/PlayerControllerToIdentity.html",
    "title": "Changing playerController to identity",
    "keywords": "Changing playerController to identity If you need to fix up a project after NetworkConnection.playerController was changed to identity these instructions should be helpful. Open your Unity project and look for Assets/Mirror/Runtime/ NetworkConnection : Open this file in Visual Studio or Visual Code from Unity and look for these lines: The line numbers could be off a bit if minor file changes happen above them after this document was written. Comment the last line shown: // public NetworkIdentity identity { get; internal set; } Double-click and then right-click playerController and select Rename: Change playerController to identity and click Apply: Visual Studio will now have applied the change throughout your project, but you're not done yet! Without using the replace feature this time, simply retype the name back to playerController and un-comment the last line in the code image that you commented out in step 3. Your code should now look like the code image again. Save your work!"
  },
  "Articles/General/ChangeLog.html": {
    "href": "Articles/General/ChangeLog.html",
    "title": "Change Log",
    "keywords": "Change Log Mirror is published to the Asset Store at the start of every month, unless some critical issue causes a delay. Mirror uses semantic versioning, and the versions shown here are those that were published to the Asset Store, and occasionally major version bumps happen mid-month between store submissions and are therefore not individually shown here. Version 28.x.x -- In Progress Added: Network Reader/Writer now does Read/WriteBlittable for better performance Added: KCP Transport updated to version 1.3. Fixed: Better presentation of Network Ping Display. Fixed: Middleware Transport now listens for inner events correctly. Fixed: Calling StartServer / StartClient more than once is now prevented. Fixed: NRE when no host player in PlayerScore in MultipleAdditiveScenes example Fixed: player collisions in MultipleAdditiveScenes example Fixed: Weaver now properly generates readers and writers for structs in other assemblies, e.g. Mathematics Changed: Server Only scene objects in examples replaced with normal objects instantiated on server or just eliminated Changed: Breaking Force NetworkMessage to use structs in all cases - classes no longer supported. Changed: Breaking Removed ReadPacked / WritePacked functions - Use Read and Write variants instead. Version 26.2.2 -- 2020-Nov-20 Added: KCP Transport . Added: Libuv2k Transport . Added: Quaternion and float compression. Added: Option to configure handshakeMaxSize in SimpleWebTransport. Added: ServerTeleport to Experimental NetworkTransform. Added: Accept and Reject methods to Authenticator base class for ease of use. Fixed: Weaver failure on Authenticators and assemblies with only messages and no behaviors. Fixed: Examples no longer rely on sequential connectionId. Fixed: Eliminated errors when first importing due to preprocessor defines in transports. Fixed: Scene ID logging is now consistantly in hex format. Fixed: sceneId when using BuildPipeline.BuildPlayer with incorrect case in path. Fixed: Trigger not applied correctly for host in NetworkAnimator. Fixed: Ensure ReadHelper.Read reads exactly number of bytes in SimpleWebTransport. Changed: Minimum Unity version is now 2018.4.28 LTS. Changed: Script Templates are now avalable as a separate package here . Changed: Telepathy Transport is now obsolete - Use KCP Transport instead. Changed: Breaking NetworkIdentity.clientAuthorityCallback is an event now. Changed: Breaking Removed older obsolete methods and tests. Changed: Breaking Transports no longer support sending to a List of connectionIds. Version 23.0.3 -- 2020-Oct-24 Added: Support null when serializing classes. Added: Support recursive data types. Added: Support jagged arrays. Added: New generic Read and Write methods for typed used by mirror and user callbacks. Added: NetworkAnimator now syncs animator.speed. Added: NetworkTransform Server Teleport function. Added: New websockets transport: SimpleWebTransport . Fixed: ClientScene.localplayer is now set to null when it is destroyed. Fixed: Fixing IndexChanged hook not being called for NetworkRoomPlayer. Fixed: Fixing NullReferenceException when loading scene. Fixed: Fixing NetworkConnectionToClient for IL2CPP. Fixed: NullReferenceException in tanks example when running in headless server only. Changed: Breaking Use SyncLists/SyncSet/SyncDictionary directly, eg SyncList<int> , see Pull Request 2307 . Changed: Breaking Renamed IMessageBase to NetworkMessage , see Pull Request 2317 . Changed: OnSerialize now includes the component index as byte before serializing each component. Better CPU performance at the cost of bandwidth. Changed: Can now have 256 NetworkBehaviours per NetworkIdentity. Removed: Breaking SyncEvents, see Pull Request 2178 . Removed: Breaking Removing manual invoke for Cmd and RPC, see Pull Request 2223 . Removed: Breaking Removed Serialize/Deserialize in messages, see Pull Request 2317 . Removed: Breaking Removing auto initialize for SyncLists/SyncSet/SyncDictionary, see Pull Request 2330 . Removed: Breaking Replacing Ninja.WebSockets with SimpleWebTransport . Version 17.3.0 -- 2020-Sep-04 Added: NetworkAnimator now syncs Layer Weight. Added: Lists can now be sent in Command/Rpc/Message/etc. Added: [Server] / [Client] can now be used outside of NetworkBehaviour. Added: Experimental NetworkLerpRigidbody component that syncs position and velocity and applies them using Lerp. Fixed: NetworkAnimator now fires triggers immediately on owner. Fixed: isServer will now keep its value after calling NetworkServer.Destroy . Fixed: [Client] error message now correctly logs the name of the method. Fixed: Messages can now be nested within other Message types. Fixed: [Server] / [Client] now correctly give error when used on abstract method. Fixed: Abstract classes can now implement IMessageBase. Fixed: Weaver now correctly gives error when generating a reader methods for abstract classes. Changed: NetworkServer no longer runs update if there are no connections. Changed: NetworkBehaviour.IsDirty is now a public. Changed: SyncEvent are now obsolete and will be removed in the next version. Removed: isHeadless is now obsolete, Use preprocessor directive #if UNITY_SERVER instead. Version 16.9.0 -- 2020-Aug-01 Added: NetworkHeadlessLogger log handler that sets console color. Added: New Mirror List Server, see Cloud folder . Added: Experimental NetworkRigidbody component that syncs velocity and other rigidbody settings. Fixed: base method called inside Command/RPC now work if the first base class does not have an override. Fixed: NetworkRoomPlayer now cleans up roomSlots on disable. Fixed: Fallback and Multiplex now disable their transports when they are disabled. Fixed: Websockets transport SocketState now returns false if socket is undefined . Fixed: SyncEvents can now have the same name if they are in different classes. Fixed: You can now have multiple SyncEvents per class. Fixed: Message base classes are now processed even if they are declared later in the file. Fixed: Registering a prefab with and same GUID no longer gives an error. Fixed: Weaver now generates Serialize methods for classes that implement IMessageBase. Changed: NetworkProximityChecker now has slightly better performance. Changed: ClientRpc no longer need Rpc prefix. Changed: Commands no longer need Cmd prefix. Changed: TargetRpc no longer need Target prefix. Changed: NetworkManager.networkSceneName is now protected set as it should not be set directly. Version 16.1.1 -- 2020-Jun-13 Added: [Command] now has an ignoreAuthority option for invoking Commands on objects the client doesn't have authority over, and Command methods can have an optional NetworkConnectionToClient sender parameter. Added: [ClientRpc] now has an excludeOwner option to prevent messages from going to the client that owns the object. Added: Commands and Rpc's can now be declared as virtual and overridden in derived classes. Added: NetworkLogSettings component and Log Settings Window. Added: SyncLists now support AddRange , InsertRange , and RemoveAll . Added: Network Room Manager now has a virtual OnRoomServerPlayersNotReady that fires on server from CheckReadyToBegin . Added: Network Room Player template now includes base Network Behaviour overrides. Added: Network Room Player now has a virtual hook for the index SyncVar, and the override is in the template. Added: Experimental Network Transform with more control settings and features. Added: Network Ping Display component Fixed: Network Room Manager.minPlayers is now protected so it's available for derived classes. Fixed: Network Room Manager no longer does redundant player prefab registration in OnStartClient . Fixed: Network Room Player OnClientEnterRoom now correctly only fires on clients. Fixed: RegisterClientMessages was being incorrectly invoked for every scene change. Fixed: Network Behaviour SyncMode and SyncInterval was not showing in the inspector in some cases (regression). Fixed: Network Manager now cleans up network objects better when server stops. Fixed: Network Manager no longer tries to change to offline scene redundantly in StopClient . Fixed: Network Connection's lastMessageTime wasn't being properly initialized, causing incorrect idle timeout disconnects. Fixed: Websockets transport now correctly pauses and queues messages during scene changes and should otherwise be more stable with SSL Changed: Breaking Websockets Transport now requires full path to PFX Certificate file. Changed: Improvements were made to the Tanks example. Changed: Network Room Player now uses virtual SyncVar hook for ReadyStateChanged. Changed: Network Proximity Checker now uses direct distance check against player objects instead of Physics.SphereCastNonAlloc for better performance. Removed: Discord Transport Version 13.0.1 -- 2020-May-06 Added: Multiple Concurrent Additive Scenes Example . Added: Network Match Checker component. Use this component to create many concurrent isolated matches within a single game server. Added: SyncLists now have Find and FindAll functions. Added: Network Behaviour now has OnStopServer and OnStopClient virtual methods. Added: Weaver now supports custom Reader & Writer for types in other assemblies. Added: Network Manager now has an optional setting to check for and disconnect remote connections that have gone silent for a specified interval. Added: Network Manager now has a ReplaceHandler method to avoid warnings when attempting to double register message handlers. Added: NetworkServer.SendToAll now has an optional bool to only send to ready clients, and a SendToReady method that doesn't require a Network Identity. Fixed: Network Animator no longer double-fires SetTrigger / ResetTrigger on the host client. Fixed: Network Animator is no longer limited to one component per object. Fixed: Destroy is no longer invoked twice on the server for the player object. Fixed: RegisterClientMessages is no longer invoked twice on the client. Fixed: Network Behaviour SyncMode and SyncInterval was not showing in the inspector in some cases. Fixed: Telepathy Transport - LateUpdate now processes a limited amount of messages per tick to avoid deadlocks. Changed: Network Behaviour: OnNetworkDestroy was renamed to OnStopClient . Changed: Breaking RemovePlayerMessage has been removed as a potential security risk. Use NetworkServer.RemovePlayerForConnection instead. Changed: Breaking Network Behaviour: OnRebuildObservers , OnCheckObserver , and OnSetHostVisibility were moved to a separate class called NetworkVisibility . Version 11.4.2 - 2020-Apr-03 Added: SyncVar hooks can be virtual now, and overriden in a derived class. Added: Virtual OnRoomStopServer added to Network Room Manager and Script Template. Added: 10K Networked Objects Benchmark Example. Fixed: Setting breakpoints in an IDE for Command's and Rpc's work correctly now. Fixed: NetworkServer.SendToObservers now reports correct channel to Mirror Profiler. Fixed: Network Room Manager's roomPlayerPrefab is now protected so it can be accessed in derived classes. Fixed: Network Room Player inspector and documentation updated to be less confusing. Fixed: Network Identity no longer double calls NetworkServer.Destroy . Fixed: Network Animator now correctly excludes parameters controlled by curves. Fixed: Network Behaviour now uses a property drawer for the SyncVar label so it displays better. Fixed: NetworkServer.SendToReady overloads are no longer ambiguous. Fixed: Network Room Manager no longer incorrectly destroys the game player object. It's left in the game scene to be cleaned up by Unity when the scene changes. Fixed: StopHost correctly raises OnServerDisconnect in Network Manager, and correctly unwinds before shutting down the server. Fixed: isServer is no longer incorrectly false on server in Network Identity's OnDestroy . Changed: Network Manager offlineScene and onlineScene store full paths now, so use SceneManager.GetActiveScene().path instead. Changed: Network Manager HUD now calls StopHost / StopServer / StopClient more appropriately. Changed: Network Manager HUD labels no longer say LAN. Associated docs also cleaned up to eliminate the misconception of Mirror being LAN only solution. Changed: Network Transform compression removed and message handling is much simpler now. Changed: Network Scene Checker initializes in Awake again because OnEnable proved to be unreliable in some cases. Changed: Network Manager will no longer lose references to scenes if they aren't in the Build Settings scene list, however moving or renaming scenes may cause references to be lost. Changed: Breaking Many obsolete methods and properties removed. Use version 10 first if upgrading from UNet or older Mirror. See Deprecations for complete list. Version 10.4.7 - 2020-Mar-03 Added: Weaver will now block play mode and builds if there are weaver errors and show them in the console again. Added: PooledNetworkReader and PooledNetworkWriter , both Disposable. Added: NetworkReader.ReadMessage<T> . Added: Network Discovery now handles headless server mode. Added: SyncVar, Cmd's and Rpc's now support Scriptable Objects via CreateInstance on the receiving side. Added: Discord Transport Removed in v16.1.1 Fixed: isClient now returns true on clients in OnDestroy for networked objects. Fixed: Host Player race condition for Ready message. Fixed: Network Animator and Network Transform now correctly check for client authority in their respective Command methods. Fixed: Network Room Manager Script Template had a virtual method instead of an override. Fixed: Network Server's calls to NetworkConnectionToClient.Send now includes the channelId parameter that was missing. Fixed: Network Server's calls to SendToAll, SendToReady, and SendToObservers send to the exact connection if it is detected as local connection, instead of falling back to the .localConnection. Fixed: Network Server.SpawnObjects returns false if server isn't running. Fixed: Network Transform rotation detection improved. Fixed: Weaver generated code now builds properly for IL2CPP (again). Changed: StartHost in Network Manager is no longer a virtual method (and shoudn't have been). Override OnStartHost instead. Changed: Network Room Manager's OnRoomServerSceneLoadedForPlayer now includes NetworkConnection parameter. Changed: Network Scene Checker now works from OnEnable instead of Awake, and uses Scene instead of scene name. Changed: Renamed NeworkWriter.Write to WriteMessage for consistency. Version 9.0.2 - 2020-Feb-04 Added: Network Animator now has a ResetTrigger function and server / client authority warnings. Added: Network Transform now has 3 new floats for Sensitivity to quiet down message traffic from micro changes. Added: Network Observer added to Script Templates -- See the new Mirror section in the Assets > Create menu. Added: Network Discovery has been reimplemented including an example and script template -- thanks to all those who contributed! Added: Network Scene Checker Component . Added: Mirror Icon for all components. Added: Inspector Headers to Network Behaviour, Network Transform, and Network Animator. Added: URI added to supported data types. Added: NetworkReaderPool has been implemented in place of new NetworkReader everywhere, significantly reducing garbage allocation. Fixed: Network Transform and Network Animator now uses NetworkWriterPool. Fixed: Network Transform and Network Animator now respect hasAuthority for client owned objects. Fixed: Network Transform will now correctly teleport if time / distance are too large. Fixed: Network Animator now correctly syncs when clientAuthority is false. Fixed: Client owned objects are now destroyed when client disconnects (regression). Fixed: Client authority is now preserved for networked objects carried through scene change in DontDestroyOnLoad (DDOL). Fixed: Starting server immediately after cancelling client connection attempt no longer throws a NRE. Fixed: IL2CPP builds no longer trigger an assert when stopping server. Fixed: SyncVars are now set for Host player before hook is invoked. Fixed: SyncDictionary now correctly updates the value before invoking callbacks. Fixed: StopHost no longer tries to change to the Offline scene twice. Fixed: Network Room Manager roomSlots are now correctly managed on both server and clients. Fixed: Network Room Manager now correctly supports multiple GamePlay scenes and adds a virtual OnRoomServerAddPlayer . Fixed: Additive scene operations no longer incorrectly lead to extraneous AddPlayer messages from clients. Fixed: NetworkWriterPool is now used everywhere instead of new NetworkWriter (we missed a couple when the pool was implemented). Fixed: Patch for Unity 2019.3.x RequestScriptReload was moved to EditorUtility from UnityEditorInternal.InternalEditorUtility. Fixed: Arrays of custom types are now correctly supported. Changed: Shutdown logic has been streamlined. Changed: NetworkIdentity.GetSceneIdenity method renamed to GetSceneIdentity (name typo). Changed: OnApplicationQuit virtual method added to Transport class and Transport.activeTransport.Shutdown() is no longer called from Network Manager. Changed: Breaking SyncVar Hooks now require two parameters, one each for the old and new value, and the property value is now set before the hook is called. Version 6.7.7 - 2020-Jan-01 Added: Script Templates -- See the new Mirror section in the Assets > Create menu. Added: Full Text Search added to docs. Added: Basic Chat example. Added: Some youtube videos have been created and linked from various doc pages where appropriate. Added: Transports can now support using a URI for connection including port. Added: version.txt file is now included with the release version in it. Added: Structs that inherit from IMessageBase now generate serializers. Fixed: Components now appear in docs under API Reference. Fixed: Delayed disconnect in Basic Authenticator. Fixed: Multiplexer now handles OnClientConnect and GetMaxMessageSize correctly. Fixed: Network Room Manager OnRoomServerCreateGamePlayer now includes the Room Player Object as parameter. Changed: Room example now has Network Room Manager in the Offline scene and correctly switches to the Room scene when server / client is started. Changed: Network Manager startPositionIndex and loadingSceneAsync are now public. Changed: SceneMessage now has an optional customHandling flag so devs can handle their own custom scene loading, e.g. using Addressables. Changed: Breaking Network Transform now defaults to server authority and has a Client Authority checkbox. Version 6.3.0 - 2019-Dec-09 Added: SyncMode selector now works for components on any scene objects owned by a client in addition to the player object, e.g. pets. Added: MessageBase now fully supports inheritance. Added: Room example now has UI button for host to return all clients to the Room scene and other improvements. Fixed: ReplacePlayerForConnection now works for existing scene objects as long as another player doesn't own the targetted object. Fixed: isClient and isServer are now true for networked objects in Start and OnStartClient / OnStartServer, respectively. Fixed: hasAuthority is now set before OnStartClient and OnStartLocalPlayer are invoked. Changed: connectionToClient is now used to assign client authority. Changed: In many respects, the Host player acts a lot more like a client and will reveal bugs better. Changed: ReplacePlayerForConnection now has an optional bool to retain authority of the previous object (default = false). Removed: NetworkServer.SpawnWithClientAuthority is deprecated in favor of overloads of NetworkServer.Spawn . Version 5.0.2 - 2019-Nov-03 Added: SyncList and SyncSet custom Equality Comparer support. Added: Custom serializers may be implemented for any type in Cmd's and Rpc's. Added: Fallback Transport . Fixed: SyncVar hooks are no longer called in Host if no change. Fixed: Network Identity no longer throws a null reference exception in RemoveClientAuthority. Fixed: Server transport now suspended during scene change to prevent erroneous messages. Fixed: SyncList, SyncDictionary and SyncSet now use a custom IEnumerator to avoid memory allocation. Fixed: sceneID is no longer reset in certain cases when editing a prefab. Changed: PreprocessorDefine code moved to CompilerSymbols folder to avoid paradox of missing symbols preventing the symbols being added to the project. Changed: Host player no longer gets authority assigned to all objects by default. Changed: Commands no longer bypass serialization for Host player, making debugging easier. Changed: Local connections now maintain their own message queue. Changed: Transport.Available is now abstract. Removed: Network Identity: Local Player Authority has been removed as no longer necessary. Version 4.0.7 - 2019-Oct-03 Added: Authenticators support to authenticate clients in the Connect phase. Added: Profiler events. These events can be subscribed to by the Network Profiler to provide visual information. Added: Transports now include channel in profiler events. Added: Transport abstract class now supports sending a message to a list of connection id's. Fixed: SceneMessage now has sceneOperation enum so clients can properly handle additive scenes. Fixed: NetworkClient handlers are now cleared in Shutdown. Fixed: Offline scene is no longer reloaded when client fails to connect or is rejected. Fixed: Start Position Index is now reset to zero when server is stopped. Fixed: Network Room Players are now all in DontDestroyOnLoad so they don't respawn in the game scene. Fixed: Network Room example player controller restores main camera on disable. Fixed: Components with different sync intervals were not sending updates to clients. Fixed: In certain cases, weaver wouldn't weave some external assemblies. Fixed: Network Animator now does a full sync for new clients. Fixed: Network Behaviour inspector now shows SyncMode for private SyncVars. Fixed: Calling Commands and Rpcs of parent classes from inherited classes works as it should. Fixed: Telepathy no longer hangs when attempting to connect to a nonexistent host. Fixed: Websockets Transport now properly returns the client endpoint information via ServerGetClientAddress . Fixed: WebGL build now works with ArraySegment. Changed: Mirror is now free of garbage memory allocation on the sending side. Some transports may still have a little garbage allocation yet. Changed: Deprecated the AddPlayerMessage extraMessage byte[] in favor of an easier approach to Custom Players . This is a breaking change: The virtual method OnServerAddPlayer loses the AddPlayerMessage parameter. Changed: NetworkIdentity.RemoveAuthorityForConnection is now easier to use: no need to supply the current \"owner\" anymore. Changed: Renamed NetworkConnection.playerController to identity ... see Deprecations for details. Changed: Lobby system renamed to Room to better align the name for what it is and make way for a future Lobby framework. Version 3.17.4 - 2019-Sep-04 Added: Custom Network Readers & Writers via extension methods. Added: Network Sync Mode selector on components to sync to observers (default) or just the owner. Added: SyncVars now support structs and enums in other assemblies. Added: Support for reading and writing array segments. Added: Network Animator now has layers support. Added: New virtual method OnServerChangeScene to Network Manager. Added: XML summary comments for intellisense and future generated class docs. Updated Examples and Documentation. Fixed: SceneID was not set to 0 for prefab variants. Fixed: Observers were not properly rebuilt on scene changes. Fixed: SyncVar hooks were not able to change other SyncVars in Host mode. Fixed: Telepathy not setting socket options on accepted clients. Fixed: Catch IL2CPP bug. Fixed: Telepathy and Websockets now start connections ID's at 1 instead of 2. Fixed: Websockets support for SSL restored. Fixed: Network Manager no longer complains about missing player prefab if auto-create is disabled. Fixed: Removed a garbage allocation in Network Transform. Fixed: NetworkClient.Ready was being called unncessarily in certain cases, e.g. SceneMessages. Changed: Documentation moved to website and API generated docs implemented. Changed: AddPlayerForConnection handler is now internal to keep safety checks intact. Changed: A bunch of messages converted to value types for performance. Version 3.11.6 - 2019-Jul-10 Fixed: Telepathy IPv4, IPv6, and FQDN should all work now. Fixed: TelepathyTransport error in UWP builds. Fixed: OnApplicationQuit is handled better now. Fixed: Performance and memory allocation improvements. Changed: Telepathy Source is now included instead of a DLL. Version 3.10.10 - 2019-Jun-19 Added: Scene Message now supports params for SceneMode (Normal / Additive) and PhysicsMode (2D / 3D). Added: ClientScene.Send now has an optional ChannelId parameter. Added: ASMDEF to Examples folder. Added: Support for sending and receiving ArraySegment<byte> Added: IReadOnlyList<T> in SyncLists. Fixed: Network Manager not switching to correct scene in some cases. Fixed: ListServer Ping not found in WebGL. Fixed: TelepathyTransport.GetMaxPacketSize uses the new configurable max size. Fixed: Significant reduction in memory allocation and garbage collection. Changed: Use transform.localPosition and transform.localRotation for better VR support. Removed: Websockets send queues (they never worked) and SSL (temporarily because it didn't work). Version 3.6.7 -- 2019-Apr-28 Changed: NetworkReader now uses ArraySegment<byte> to minimize allocations. Version 3.6.6 -- 2019-Apr-24 Fixed: Reverted two internal refactor commits that had unintended consequences. Version 3.6.5 -- 2019-Apr-23 Fixed: Unity 2019.1 compatibility. Fixed: Erroneous error indicating prefabs were missing Scene ID's. Fixed: OnDeserializeSafely now works without allocations. Fixed: Weaver not writing symbol files, preventing breakpoints from working in Visual Studio. Fixed: Network Identity SceneID generation now uses RNG Crypto Service Provider. Fixed: Scene lighting in Additive example. Fixed: Player Prefab transform details now respected when instantiated in the absence of NetworkStartPosition. Removed: Tests folder from Unity package generation (no end-user value). Version 3.5.9 -- 2019-Apr-12 Fixed: Network Manager round-robin mode using NetworkStartPosition objects now uses hierarchy sibling order. Fixed: IsLocalPlayer is now reliably accurate in Start() by combining OwnerMessage and SpawnPrefabMessage. Fixed: Stack overflow issues with Weaver and Cecil. Fixed: Corrected assembly paths passed to weaver. Fixed: Enum bandwdith reduced in SyncVars, Commands, and Rpcs. Fixed: Placeholder files added for removed code files so updating works better. Changed: Network Manager isHeadless is a static property now, changed from IsHeadless() . Version 3.5.3 -- 2019-Apr-10 Fixed: Exceptions in overrides of Network Manager and other components incorrectly silenced. Fixed: Lobby system sometimes would not spawn and swap game player prefabs into the game scene. Fixed: Application.targetFrameRate no longer set in host mode. Changed: Telepathy: Split MaxMessageSize to allow setting a different value for client and server. Version 3.4.9 -- 2019-Apr-6 Added: Semantic Versioning (which is why we jumped from 1.6 to 3.4.9). Added: SyncDictionary . Added: SyncHashSet . Added: SyncSortedSet . Added: SyncList and SyncDictionary support all IList and IDictionary derived types, respectively. Added: Documentation for SyncVars . Added: Documentation for SyncEvents . Added: NoRotation to Network Transform. Added: Scale is now included in spawn payload along with position and rotation. Added: Generic IMessageBase to allow struct message types. Added: Weaver now supports Vector2Int and Vector3Int. Added: List Server example. Added: Additive Scenes example. Fixed: SyncLists now work correctly for primitives and structs. Fixed: SyncVar Hooks now will update the local property value after the hook is called. You no longer need to have a line of code in your hook method to manualy update the local property. Fixed: Host should not call Disconnect on transports. Fixed: NetworkAnimimator now supports up to 64 animator parameters. Fixed: Network Manager StartServer no longer assumes scene zero is the default scene...uses GetActiveScene now. Fixed: NetworkServer.Shutdown now resets netId to zero. Fixed: Observers are now properly rebuilt when client joins and OnRebuildObservers / OnCheckObserver is overridden. Fixed: NetworkProximityChecker: On rare occasion, player could be excluded from observers rebuild. Fixed: NetworkLobbyPlayer OnClientReady works now. Fixed: NetworkLobbyPlayer Remove button not showing for P1 when Server Only. Fixed: NetworkLobbyManager pendingPlayers and lobbySlots lists are now public for inheritors. Fixed: Offline scene switching now works via StopClient() . Fixed: Pong example updated. Fixed: Source Weaver was deleting PDB files, preventing breakpoints and debugging from working. Changed: TargetRpc NetworkConnection paramater is now optional...the calling client's NetworkConnection is default. Changed: Movement example replaced with Tank example. Changed: NetworkClient functions are all static now, so the singleton is gone. Use NetworkClient directly. Changed: SyncList now supports structs directly, making SyncListSTRUCT obsolete. Removed: SyncListSTRUCT - Use SyncList instead. Removed: NetworkClient.ShutdownAll is obsolete -- Use NetworkClient.Shutdown instead. Version 1.6 -- 2019-Mar-14 Fixed: Websockets transport moved to Mirror.Websocket namespace. Fixed: Network Animator bandwidth abuse. Fixed: Network Animator float sync bug. Fixed: Persistent SceneID's for Networked objects. Changed: Documentation for Transports . Changed: Weaver is now full source...FINALLY! Changed: ClientScene.AddPlayer 2nd parameter is now byte[] extraData instead of MessageBase extraMessage . Please refer to the code sample here to see how to update your code. Changed: Network Manager -- Headless Auto-Start moved to Start() from Awake() . Changed: Removed Message ID's for all messages - See Network Messages for details. Message IDs are now generated automatically based on the message name. Previously you would call Send(MyMessage.MsgId, message), now you call Send(message). Removed: Documentation for Groove Transport - use Websockets Transport instead. Version 1.5 -- 2019-Mar-01 Added: Migration Tool to (mostly) automate conversion from UNet. Added: Full support for WebSockets and WebSocketsSecure to replace UNet LLAPI. Added: Transport Multiplexer - allows the use of multiple concurrent transports. Added: NetworkLobbyManager and NetworkLobbyPlayer with example game. Added: Configurable Server Tickrate in Network Manager. Added: New virtual OnClientChangeScene fires right before SceneManager.LoadSceneAsync is executed. Added: Unit tests for Weaver. Fixed: Garbage allocations removed from a lot of things (more work to do, we know). Fixed: NetworkProximityChecker now uses OverlapSphereNonAlloc and OverlapCircleNonAlloc . Fixed: SyncVar hook not firing when clients joined. Fixed: Network Manager no longer assumes it's on Scene(0) in Build Settings. Fixed: Network Animator no longer lmited to 6 variables. Fixed: TelepathyTransport delivering messages when disabled. Changed: Minimum Unity version: 2018.3.6 Removed: SceneAttribute.cs (merged to CustomAttributes.cs). Removed: NetworkClient.allClients (Use NetworkClient.singleton instead). Removed: NetworkServer.hostId and NetworkConnection.hostId (holdovers from LLAPI). Removed: NetworkConnection.isConnected (Network Connection is always connected). Removed: Transport.GetConnectionInfo (Use ServerGetClientAddress instead). Version 1.4 -- 2019-Feb-01 Added: HelpURL attirbutes to components. Added: Automatic targetFramerate for headless builds. Added: ByteMessage to Messages class. Fixed: Connectiing state can be cancelled properly. Fixed: Network Transform interpolation applied to client's own object. Fixed: Objects are spawned with correct rotation. Fixed: SceneId assignment. Fixed: Changed syncInterval wasn't saved...it is now. Fixed: Additive Scene loading. Changed: Mirror is now full source -- no more DLL's. Changed: Transports are now components -- TCP, UDP, WebGL, Steam. Changed: Transport class now dispatches Unity Events. Changed: NetworkServer.SendToClientOfPlayer uses NetworkIdentity now. Changed: NetworkServer.SendToObservers uses NetworkIdentity parameter now. Changed: NetworkServer.SendToReady uses NetworkIdentity now. Changed: NetworkServer.DestroyPlayerForConnection uses NetworkIdentity.spawned now. Changed: NetworkConnection.Dispose uses NetworkIdentity.spawned now. Changed: NetworkReader.ReadTransform uses NetworkIdentity.spawned now. Changed: Network Transform reimplemented -- physics removed, code simplified. Removed: NetworkClient.hostPort (port is handled at Transport level). Removed: NetworkServer.FindLocalObject (Use NetworkIdentity.spawned[netId] instead). Removed: ClientScene.FindLocalObject (Use NetworkIdentity.spawned[netId] instead)."
  },
  "Articles/General/index.html": {
    "href": "Articles/General/index.html",
    "title": "General Overview",
    "keywords": "General Overview Mirror’s multiplayer High Level API (HLAPI) is a system for building multiplayer capabilities for Unity games. It is built on top of the lower level transport real-time communication layer, and handles many of the common tasks that are required for multiplayer games. While the transport layer supports any kind of network topology, the HLAPI is a server authoritative system; although it allows one of the participants to be a client and the server at the same time, so no dedicated server process is required. Working in conjunction with the internet services, this allows multiplayer games to be played over the internet with little work from developers. The HLAPI is focused on ease of use and iterative development and provides useful functionality for multiplayer games, such as: Message handlers General purpose high performance serialization Distributed object management State synchronization Network classes: Server, Client, Connection, etc The HLAPI is built from a series of layers that add functionality: Server and Host In Mirror’s High Level API (HLAPI) system, multiplayer games include: Server A server is an instance of the game which all other players connect to when they want to play together. A server often manages various aspects of the game, such as keeping score, and transmit that data back to the client. Clients Clients are instances of the game that usually connect from different computers to the server. Clients can connect over a local network, or online. A client is an instance of the game that connects to the server, so that the person playing it can play the game with other people, who connect on their own clients. The server might be either a “dedicated server”, or a “host server”. Dedicated server This is an instance of the game that only runs to act as a server. Host server When there is no dedicated server, one of the clients also plays the role of the server. This client is the “host server”. The host server creates a single instance of the game (called the host), which acts as both server and client. The diagram below represents three players in a multiplayer game. In this game, one client is also acting as host, which means the client itself is the “local client”. The local client connects to the host server, and both run on the same computer. The other two players are remote clients - that is, they are on different computers, connected to the host server. The host is a single instance of your game, acting as both server and client at the same time. The host uses a special kind of internal client for local client communication, while other clients are remote clients. The local client communicates with the server through direct function calls and message queues, because it is in the same process. It actually shares the Scene with the server. Remote clients communicate with the server over a regular network connection. When you use Mirror’s HLAPI, this is all handled automatically for you. One of the aims of the multiplayer system is for the code for local clients and remote clients to be the same, so that you only have to think about one type of client most of the time when developing your game. In most cases, Mirror handles this difference automatically, so you should rarely need to think about the difference between your code running on a local client or a remote client. Instantiate and Spawn When you make a single player game In Unity, you usually use the GameObject.Instantiate method to create new game objects at runtime. However, with a multiplayer system, the server itself must “spawn” game objects in order for them to be active within the networked game. When the server spawns game objects, it triggers the creation of game objects on connected clients. The spawning system manages the lifecycle of the game object, and synchronizes the state of the game object based on how you set the game object up. For more details about networked instantiating and spawning, see documentation on Spawning game objects . Players and Local Players Mirror’s multiplayer HLAPI system handles player game objects differently to non-player game objects. When a new player joins the game (when a new client connects to the server), that player’s game object becomes a “local player” game object on the client of that player, and Mirror associates the player’s connection with the player’s game object. Mirror associates one player game object for each person playing the game, and routes networking commands to that individual game object. A player cannot invoke a command on another player’s game object, only their own. For more details, see documentation on Player game objects . Authority Servers and clients can both manage a game object’s behavior. The concept of “authority” refers to how and where a game object is managed. Mirror’s HLAPI is based around “server authority” as the default state, where the Server has authority over all game objects. Player game objects are a special case and treated as having “local authority”. You may want to build your game using a different system of authority - for more details, see Network Authority ."
  },
  "Articles/General/Support.html": {
    "href": "Articles/General/Support.html",
    "title": "Support",
    "keywords": "Support Discord You can find us on Discord . GitHub You can create an issue in GitHub You can also contribute with Pull Requests...see Contributing"
  },
  "Articles/General/Start.html": {
    "href": "Articles/General/Start.html",
    "title": "Getting Started",
    "keywords": "Getting Started This document describes steps to creating a multiplayer game with Mirror. The process described here is a simplified, higher level version of the actual process for a real game; it doesn’t always work exactly like this, but it provides a basic recipe for the process. Video tutorials Check out these awesome videos showing you how to get started with mirror. Courtesy of First Gear Games also known as Punfish in discord. Script Templates Create new Network Behaviours and other common scripts faster See Script Templates . NetworkManager set-up Add a new game object to the Scene and rename it “NetworkManager”. Add the NetworkManager component to the “NetworkManager” game object. Add the NetworkManagerHUD component to the game object. This provides the default UI for managing the network game state. See Using the NetworkManager . Player Prefab Find the Prefab for the player game object in the game, or create a Prefab from the player game object Add the NetworkIdentity component to the player Prefab Set the playerPrefab in the NetworkManager’s Spawn Info section to the player Prefab Remove the player game object instance from the Scene if it exists in the Scene See Player Objects for more information. Player movement Add a NetworkTransform component to the player Prefab Check the Client Authority checkbox on the component. Update input and control scripts to respect isLocalPlayer Override OnStartLocalPlayer to take control of the Main Camera in the scene for the player. For example, this script only processes input for the local player: using UnityEngine; using Mirror; public class Controls : NetworkBehaviour { void Update() { if (!isLocalPlayer) { // exit from update if this is not the local player return; } // handle player input for movement } } Basic player game state Make scripts that contain important data into NetworkBehaviours instead of MonoBehaviours Make important member variables into SyncVars See State Synchronization . Networked actions Make scripts that perform important actions into NetworkBehaviours instead of MonoBehaviours Update functions that perform important player actions to be commands See Networked Actions . Non-player game objects Fix non-player prefabs such as enemies: Add the NetworkIdentity component Add the NetworkTransform component Register spawnable Prefabs with the NetworkManager Update scripts with game state and actions Spawners Potentially change spawner scripts to be NetworkBehaviours Modify spawners to only run on the server (use isServer property or the OnStartServer() function) Call NetworkServer.Spawn() for created game objects Spawn positions for players Add a new game object and place it at player’s start location Add the NetworkStartPosition component to the new game object"
  },
  "Articles/Transports/Multiplexer.html": {
    "href": "Articles/Transports/Multiplexer.html",
    "title": "Multiplex Transport",
    "keywords": "Multiplex Transport The MultiplexTransport is not a transport itself, but it allows you to combine other transports so that your clients can connect to your servers via either one of them. A common use case for the MultiplexTransport is a server listening to both websockets and TCP. Your webgl clients can connect to the server using websockets and your mobile or desktop clients can connect to the same server via TCP. In HLAPI, you had to chose between websockets and UDP, but you cannot use both at the same time. You can configure any number of transports in the MultiplexTransport. To use the MultiplexTransport follow these steps: Add a gameobject with a NetworkManager to your scene if you have not done so By default, Unity will add TelepathyTransport to your NetworkManager game object Add a MultiplexTransport component to the gameobject Assign the MultiplexTransport component in your NetworkManager's transport Add a WebsocketTransport component to the gameobject Add the TelepathyTransport component to the MultiplexTransport as the first transport Add the WebsocketTransport component to the MultiplexTransport as the second transport Please note that Telepathy and WebsocketTransport cannot listen to the same port. By default Telepathy listens to 7777 and the websocket transport listens to 7778. If you build your game as a webgl game, the TelepathyTransport will be skipped and your client will use the websocket transport. If you build your game as a mobile or desktop app, it will choose TelepathyTransport. The server will happily accept connections from both. Here is what the configuration should look like:"
  },
  "Articles/Transports/Telepathy.html": {
    "href": "Articles/Transports/Telepathy.html",
    "title": "Telepathy Transport",
    "keywords": "Telepathy Transport Simple, message based, MMO Scale TCP networking in C#. And no magic. Telepathy was designed with the KISS Principle in mind. Telepathy is fast and extremely reliable, designed for MMO scale Networking. Telepathy uses framing, so anything sent will be received the same way. Telepathy is raw C# and can be used in Unity3D too. Telepathy is available on GitHub What makes Telepathy special? Telepathy was originally designed for uMMORPG after 3 years in UDP hell. We needed a library that is: Stable & Bug free: Telepathy uses only 400 lines of code. There is no magic. High performance: Telepathy can handle thousands of connections and packages. Concurrent: Telepathy uses one thread per connection. It can make heavy use of multi core processors. Simple: Telepathy takes care of everything. All you need to do is call Connect/GetNextMessage/Disconnect. Message based: if we send 10 and then 2 bytes, then the other end receives 10 and then 2 bytes, never 12 at once. MMORPGs are insanely difficult to make and we created Telepathy so that we would never have to worry about low level Networking again. What about... Async Sockets: didn't perform better in our benchmarks. ConcurrentQueue: .NET 3.5 compatibility is important for Unity. Wasn't faster than our SafeQueue anyway. UDP vs. TCP: Minecraft and World of Warcraft are two of the biggest multiplayer games of all time and they both use TCP networking. There is a reason for that."
  },
  "Articles/Transports/FizzySteamworks.html": {
    "href": "Articles/Transports/FizzySteamworks.html",
    "title": "FizzySteamworks Transport",
    "keywords": "FizzySteamworks Transport FizzySteamworks is a Steam P2P transport for Mirror, it utilizes Steam's P2P service to directly connect or relay your connection to another player. FizzySteamworks is based on the Steamworks.Net wrapper. You can get the release Here with the latest version of Steamworks.Net included or you can clone the repo Here . Features Multiple Customizable Channels : You can customize the channels in the transport, whether you want just 1 or 5 channels that are unreliable or reliable (best to leave channel 0 as reliable). Steam Nat Punching & Relay : The transport will use Steam to do Nat Punching to your destination, and if that doesn't work, steam's relay Server will be used to ensure you can always connect (latency may vary). No Code Changes Needed : If you Already use Mirror, you just need to slap this transport in (maybe add your steam App ID in your build), and everything should work the same like any other Mirror Transport. \"It Just Works\" -Todd Howard Credits Fizz Cube : Original author for this Transport. Chykary : The current maintainer for this Transport. rlabrecque : Creator of Steamworks.Net. vis2k : Creator of Mirror. Valve : Steam"
  },
  "Articles/Transports/Libuv2k.html": {
    "href": "Articles/Transports/Libuv2k.html",
    "title": "Libuv2k Transport",
    "keywords": "Libuv2k Transport Libuv2k transport for Mirror. About this transport libuv2k is a TCP transport using libuv( https://github.com/libuv/libuv ). libuv is the native C networking backend behind Node.js. It's battle tested and extremely fast. Usage Add the component to your NetworkManager. Features TCP Credits libuv( https://github.com/libuv/libuv )"
  },
  "Articles/Transports/KCPTransport.html": {
    "href": "Articles/Transports/KCPTransport.html",
    "title": "KCP Transport",
    "keywords": "KCP Transport KCP transport for Mirror. About this transport kcp2k[https://github.com/vis2k/kcp2k] is the new default Transport for Mirror. Why KCP: https://github.com/skywind3000/kcp/blob/master/README.en.md 100% C#. Works on all platforms except WebGL. Heavy test coverage (83.5%). Extremely fast. Extremely simple. Nearly allocation free*. \"KCP is a fast and reliable protocol that can achieve the transmission effect of a reduction of the average latency by 30% to 40% and reduction of the maximum delay by a factor of three, at the cost of 10% to 20% more bandwidth wasted than TCP. It is implemented by using the pure algorithm, and is not responsible for the sending and receiving of the underlying protocol (such as UDP), requiring the users to define their own transmission mode for the underlying data packet, and provide it to KCP in the way of callback. Even the clock needs to be passed in from the outside, without any internal system calls.\" We are very excited about KCP and highly recommend trying it in your project. => Previously we had pure C# transports that were slow => And native C transports that were fast, but hard to maintain. KCP brings us the best of both worlds: it's as fast as our native C transports, while still being easy to maintain because it's 100% pure C#! Usage Add the KCPTransport component to your NetworkManager. Credits skywind3000 for original kcp.c ( https://github.com/skywind3000/kcp ) kcp-csharp for first C# port ( https://github.com/limpo1989/kcp-csharp ) paul/lymdum/uwee for connection handling."
  },
  "Articles/Transports/FizzyFacepunch.html": {
    "href": "Articles/Transports/FizzyFacepunch.html",
    "title": "FizzyFacepunch Transport",
    "keywords": "FizzyFacepunch Transport FizzyFacepunch is a Steam P2P transport for Mirror, it utilizes Steam's P2P service to directly connect or relay your connection to another player. FizzyFacepunch is based on the Facepunch.Steamworks wrapper. You can get the release Here or you can clone the repo Here . Features Multiple Customizable Channels : You can customize the channels in the transport, whether you want just 1 or 5 channels that are unreliable or reliable (best to leave channel 0 as reliable). Steam Nat Punching & Relay : The transport will use Steam to do Nat Punching to your destination, and if that doesn't work, steam's relay Server will be used to ensure you can always connect (latency may vary). No Code Changes Needed : If you Already use Mirror, you just need to slap this transport in (maybe add your steam App ID in your build), and everything should work the same like any other Mirror Transport. \"It Just Works\" -Todd Howard Credits Chykary : The author of this Transport. Facepunch : Creator of Facepunch.Steamworks. vis2k : Creator of Mirror. Valve : Steam"
  },
  "Articles/Transports/SimpleWebTransport.html": {
    "href": "Articles/Transports/SimpleWebTransport.html",
    "title": "Simple Web Transport",
    "keywords": "Simple Web Transport Transport that uses the websocket protocol. This allows this transport to be used in WebGL builds of unity. Source code: SimpleWebTransport Usage Download the code from the source folder or package on Release page. Put the code somewhere in your Assets folder Replace your existing Transport with SimpleWebTransport on your NetworkManager Bugs? Please report any bugs or issues Here Websocket Secure This transport supports the wss protocol which is required for https pages. How to create and setup an SSL Cert If you host your webgl build on a https domain you will need to use wss which will require a ssl cert. See this page Logging Log levels can be set using the dropdown on the transport or or setting Mirror.SimpleWeb.Log.level . The transport applies the dropdown value in its Awake and OnValidate methods. Log methods Log methods in this transport use the ConditionalAttribute so they are removed depending on the preprocessor defines. These preprocessor defines effect the logging DEBUG allows warn/error logs SIMPLEWEB_LOG_ENABLED allows all logs Without SIMPLEWEB_LOG_ENABLED info or verbose logging will never happen even if log level allows it. See the Unity docs on how set custom defines."
  },
  "Articles/Transports/Ignorance.html": {
    "href": "Articles/Transports/Ignorance.html",
    "title": "Ignorance",
    "keywords": "Ignorance What is Ignorance? Ignorance is a reliable UDP transport layer that utilizes the native ENET C Networking library via a custom fork of ENet-CSharp providing an reliable and unreliable sequenced UDP transport for both 64Bit desktop operating systems (Windows, Mac OS and Linux) and Mobile OSes (Apple iOS and Android). It also supports up to 255 channels and 4096 clients connected at one time. ENET is a solid reliable UDP C++ network library that is mature and stable. Unity's LLAPI needs a replacement. Ignorance was designed with that goal in mind - fill the gap and provide a solid, performant RUDP transport for Mirror. Why Ignorance over the Unity LLAPI? Unity's old LLAPI was horridly inefficient, and lots of testing has shown that you will get reduced performance using Unity LLAPI in your project. This is due to the design of the old networking code - Unity Tech made \"by design\" decisions and poor bug fixes that were seen to other developers as band-aids over a gaping wound. They did not care about performance or bug fixes. Unity LLAPI was also closed source, meaning the Mirror developers could not take a knife to it and make it better. This is where the concept of Ignorance took shape. Who develops Ignorance? Coburn is the lead developer of the transport. Oiran Studio actively uses this transport for networked game projects. It is currently also being utilized by some game projects, where you can find on the Mirror Discord server. Why would I want to use reliable UDP over TCP? if you have realtime communications that you need speed over reliability (VoIP...) if you need channels if you need custom channel send types if you need a data hose for your game (a first person shooter, racing game, etc) Why wouldn't I want to use reliable UDP over TCP? if you have mission critical things (as in, data NEEDS to go from A and B, no exceptions) if you need fully reliable network protocol if you're paranoid if you're making a Minecraft-like game and need to keep everyone in sync I want to know more about reliable UDP... A little explanation is required. UDP is best described as a \"shattershot\" data transmission protocol, which means you just spray and pray that packets at a destination and hope for the best. The remote destination may or may not receive those packets, nor are they going to be in order. For example, if you have a packet stream that is: 1 2 3 4 5 6 7 ...then it may end up like any of the following on the other end due to packets arriving out of order. A dot in the following example means that packet went missing. 7 6 1 3 2 4 5 7 6 . . 4 . 1 . . . . 1 2 3 1 2 3 5 4 6 7 For example, say you lost a packet and that contained a player's health update. Everyone else might know they took 69 damage, but that client will still have the old value of say, 72 health. Without reliable UDP, you can become out of sync very quickly. When you're out of sync, the game is over - everything will start operating very strangely. Sequencing and Reliable Delivery Sequencing Sequencing basically tags packets so they know what number they are when being dispatched. So if you send packets 100, 101, 102 to the remote destination, the other end will reconstruct the packet in that order rather than in a different order (like 101, 100, 102 ). If a packet is missing, it'll be skipped but the network library will take note that it's missing and compensate. Reliable mode just tells ENET to send this while waiting for the remote to acknowledge packet reception, before claiming it was 'lost'. ENET will still classify said packets as lost if it doesn't hear back from the remote, but it will retransmit them to compensate for lossy connections or high latency situations. Reliable mode tries to emulate some of TCP's resending if not acknowledged in time, but as UDP does not have all the overhead TCP protocol has, it adds some packet overhead. Ignorance comes with two channels in both Reliable and Unreliable mode by default. There are other channel modes that developers can test as different ones might suit different loads, but the average person does not need to worry about this. Ignorance comes with sane defaults out of the box. Does Ignorance support Websockets? No, it does not. Mirror comes with built-in websockets support. Where can I get Ignorance? Grab the latest build from the releases page on the Ignorance repository . Simply import the Unity Package from the release you downloaded. Where can I get support? You can get support by opening a issue ticket on the Ignorance repository issue tracker or the #ignorance channel in the Mirror Discord server. I still don't understand what this transport is, my head is spinning, help! Come by the Discord and we'll do our best to explain it in plain English."
  },
  "Articles/Transports/LiteNetLibTransport.html": {
    "href": "Articles/Transports/LiteNetLibTransport.html",
    "title": "LiteNetLib Transport",
    "keywords": "LiteNetLib Transport LiteNetLib based transport for Mirror. Source code: LiteNetLibTransport Old version (not maintained) LiteNetLib4Mirror Usage Download the code from the source folder or package on Release page. Put the code somewhere in your Assets folder Replace your existing Transport with LiteNetLibTransport on your NetworkManager Features UDP Fully managed code Small CPU and RAM usage see full features of LiteNetLib here Bugs? Please report any bugs or issues Here"
  },
  "Articles/Transports/index.html": {
    "href": "Articles/Transports/index.html",
    "title": "Transports Overview",
    "keywords": "Transports Overview Mirror is a high level Networking Library that can use several different low level transports. To use a transport, simply add it as component to the NetworkManager and drag it into the NetworkManager's Transport field. KCP - KCP Transport based on kcp.c v1.7, nearly translated 1:1. TCP - Libuv2k based on Native C networking backend used by Node.js. TCP - Telepathy Simple, message based, MMO Scale TCP networking in C#. And no magic. TCP - Apathy Apathy is a fast, lightweight, allocation-free low level TCP library for Unity developed by vis2k. Apathy was developed in native C for maximum MMO Scale networking performance. TCP - Booster The Mirror Booster uncorks your multiplayer game by moving the Networking load out of Unity! WebSockets - SimpleWebTransport WebSockets transport layer for Mirror that target WebGL clients. Multiplexer Multiplexer is a bridging transport to allow a server to handle clients on different transports concurrently, for example desktop clients using Telepathy together with WebGL clients using Websockets. Fallback Fallback is a compatibility transport for transports that don't run on all platforms and need fallback options to cover all other platforms. UDP - Ignorance Ignorance implements a reliable and unreliable sequenced UDP transport based on ENet. UDP - LiteNetLibTransport LiteNetLibTransport implements a UDP transport based on LiteNetLib . Steam - FizzySteamworks Transport utilising Steam P2P network, building on Steamworks.NET. Steam - FizzyFacepunch Transport utilising Steam P2P network, building on Facepunch.Steamworks."
  },
  "Articles/Transports/LiteNetLib4Mirror.html": {
    "href": "Articles/Transports/LiteNetLib4Mirror.html",
    "title": "LiteNetLib4Mirror Transport",
    "keywords": "LiteNetLib4Mirror Transport LiteNetLib based transport for Mirror. Usage Download the unity package from Releases and import it to your project (it does not contain Mirror) Put LiteNetLib4MirrorTransport component on gameobject with NetworkManager and assign it there (Optional) Make your NetworkManager derrive from LiteNetLib4MirrorNetworkManager and use optional overloads from it Features UDP Built-in Network Discovery and UPnP Fully managed code Small CPU and RAM usage Small packet size overhead ( 1 byte for unreliable, 3 bytes for reliable packets ) Different send mechanics Reliable with order Reliable without order Ordered but unreliable with duplication prevention Simple UDP packets without order and reliability Automatic small packets merging Automatic fragmentation of reliable packets Automatic MTU detection NTP time requests Packet loss and latency simulation IPv6 support (dual mode) Connection statisitcs (need DEBUG or STATS_ENABLED flag) Multicasting (for discovering hosts in local network) IL2CPP Warning! With IL2CPP, IPv6 is only supported on Unity 2018.3.6f1 and later because of this: Unity ChangeLog IL2CPP: Added protocol support for IPv6 on Windows. (1099133) IL2CPP: Correctly indicate that IPv6 is not supported on non-IPv6 platforms. (1108823) Also, socket Reuse Address option isn't available in IL2CPP. Credits RevenantX - for LiteNetLib vis2k & Paul - for Mirror Coburn - for Ignorance which i've used as an example Dankrushen - for helping me find one small mistake which i couldn't find for two days Lucas Ontivero - for Open.Nat , used for UPnP shiena - for NetworkDiscoveryHUD"
  },
  "Articles/Transports/Fallback.html": {
    "href": "Articles/Transports/Fallback.html",
    "title": "Fallback Transport",
    "keywords": "Fallback Transport The FallbackTransport can be used to work around transport platform limits. For example, our Apathy transport is currently only available on Windows, Mac and Linux where as Telepathy is available on all Platforms. Apathy has significant performance improvements, and ideally we would want Mirror to use Apathy if on Windows/Mac/Linux and fall back to Telepathy otherwise. This is what the FallbackTransport allows us to do. Usage: Add a gameobject with a NetworkManager to your scene if you have not done so By default, Unity will add TelepathyTransport to your NetworkManager game object Add a FallbackTransport component to the gameobject Assign the FallbackTransport component in your NetworkManager's transport Add a ApathyTransport component to the gameobject Add both ApathyTransport and TelepathyTransport to the FallbackTransport's transport property. Important: all fallback transport need to be binary compatible with each other. For example, it might happen that the server runs Apathy and a client connects to it with Telepathy."
  },
  "Articles/Resources.html": {
    "href": "Articles/Resources.html",
    "title": "Resources",
    "keywords": "Resources This page has a collection of links for learning and using mirror. Some things this page includes Video tutorials Other guides Example scripts Anything to add to this list? Please make a PR or ask in the discord. Video Tutorials Playlists Unity - Mirror Networking by First Gear Games - Short tutorials that explain the basics and shows example code for Mirror. Also includes paid tutorials with more advanced features and extensions to mirror. Mirror Multiplayer by Dapper Dino - Tutorials that explain how to implement different features using Mirror. Unity + Mirror Networking Tutorials by Shrine Wars - Explains the basics about Networking with Unity and Mirror. Mirror Networking Tutorials by Jared Brandjes - Long tutorials explaining how to set up lobbies and matchmaking with Mirror. Object Pooling Simple object pooling script Advanced object pooling scripts"
  },
  "index.html": {
    "href": "index.html",
    "title": "Mirror Networking for Unity",
    "keywords": "Mirror Networking for Unity Mirror is the most compatible direct replacement for the deprecated Unity Networking API. Mirror has nearly all of the components and features from UNet, making networking easy, concise and maintainable, whether you're starting from scratch or converting an existing project. We even have a Migration Tool to do most of the work for you! Built to support games of any scale, from LAN party games to dedicated high-volume authoritative servers running hundreds of players, Mirror is the core networking solution for uMMORPG , uSurvival , Cubica , and more ! uMMORPG was possible with <6000 lines of code. We needed a networking library that allows us to launch our games, period! Full Source included for debugging convenience Several working examples included Active Discord for prompt support Requires Unity 2018.4 LTS and Runtime .Net 4.x (default in Unity 2019) and .Net 2.0 Compatibility is recommended Alpha / Beta Unity versions cannot be supported Multiple Transports Available: TCP ( Telepathy and Apathy and Booster ) UDP ( ENet and LiteNetLib ) WebGL ( Secure Web Sockets ) Steam ( Steamworks.Net ) and ( FacePunch ) Multiplexer ( Multiplexer ) Fallback ( Fallback ) List Server We've developed a List Server where game servers can register and clients can connect to find those servers to play on them. Key Features & Components: Transports are interchangeable components Additive Scene handling Single and separated Unity projects supported Network Authenticators to manage access to your game Network Discovery to easily connect LAN players to a LAN Server or Host Network Manager and HUD Network Room Manager and Room Player Network Identity Network Transform to sync position, rotation, and scale with interpolation Network Animator with 64 parameters Network Proximity Checker to help with Area of Interest Network Scene Checker to isolate players and networked objects to Additive scene instances Network Match Checker to isolate players and networked objects by Network Visibility SyncVar , SyncList , SyncDictionary , and SyncHashSet Integrations Dissonance Voice Chat Network Sync Transform Noble Connect Free Rucksack RTS Engine Smooth Sync Weather Maker Steamworks Networking Master Audio Multiplayer"
  },
  "api/Mirror.Tests.MultiplexTest.html": {
    "href": "api/Mirror.Tests.MultiplexTest.html",
    "title": "Class MultiplexTest",
    "keywords": "Class MultiplexTest Inheritance Object MultiplexTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class MultiplexTest : object Methods | Improve this Doc View Source Setup() Declaration public void Setup() | Improve this Doc View Source TearDown() Declaration public void TearDown() | Improve this Doc View Source TestAvailable() Declaration public void TestAvailable() | Improve this Doc View Source TestClient1Connected() Declaration public void TestClient1Connected() | Improve this Doc View Source TestClient2Connected() Declaration public void TestClient2Connected() | Improve this Doc View Source TestClientSend() Declaration public void TestClientSend() | Improve this Doc View Source TestConnect() Declaration public void TestConnect() | Improve this Doc View Source TestConnected() Declaration public void TestConnected() | Improve this Doc View Source TestConnectFirstUri() Declaration public void TestConnectFirstUri() | Improve this Doc View Source TestConnectSecondUri() Declaration public void TestConnectSecondUri() | Improve this Doc View Source TestDisconnect() Declaration public void TestDisconnect() | Improve this Doc View Source TestNotAvailable() Declaration public void TestNotAvailable() | Improve this Doc View Source TestServerConnected() Declaration public void TestServerConnected()"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.List_FloatStringStruct_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.List_FloatStringStruct_Test.Message.html",
    "title": "Struct List_FloatStringStruct_Test.Message",
    "keywords": "Struct List_FloatStringStruct_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public List<FloatStringStruct> collection Field Value Type Description List < FloatStringStruct > Implements NetworkMessage"
  },
  "api/Mirror.Weaver.Tests.Extra.html": {
    "href": "api/Mirror.Weaver.Tests.Extra.html",
    "title": "Namespace Mirror.Weaver.Tests.Extra",
    "keywords": "Namespace Mirror.Weaver.Tests.Extra Classes ReadWrite SomeDataClass SomeDataClassWithConstructor Structs AnotherData ComplexData SomeData SomeDataWithWriter"
  },
  "api/Mirror.Cloud.ListServerService.ListServerClientApi.html": {
    "href": "api/Mirror.Cloud.ListServerService.ListServerClientApi.html",
    "title": "Class ListServerClientApi",
    "keywords": "Class ListServerClientApi Inheritance Object BaseApi ListServerBaseApi ListServerClientApi Implements IListServerClientApi IBaseApi Inherited Members BaseApi.runner BaseApi.requestCreator Namespace : Mirror.Cloud.ListServerService Assembly : Mirror.Cloud.dll Syntax public sealed class ListServerClientApi : ListServerBaseApi, IListServerClientApi, IBaseApi Constructors | Improve this Doc View Source ListServerClientApi(ICoroutineRunner, IRequestCreator, ServerListEvent) Declaration public ListServerClientApi(ICoroutineRunner runner, IRequestCreator requestCreator, ServerListEvent onServerListUpdated) Parameters Type Name Description ICoroutineRunner runner IRequestCreator requestCreator ServerListEvent onServerListUpdated Methods | Improve this Doc View Source GetServerList() Declaration public void GetServerList() | Improve this Doc View Source Shutdown() Declaration public void Shutdown() | Improve this Doc View Source StartGetServerListRepeat(Int32) Declaration public void StartGetServerListRepeat(int interval) Parameters Type Name Description Int32 interval | Improve this Doc View Source StopGetServerListRepeat() Declaration public void StopGetServerListRepeat() Events | Improve this Doc View Source onServerListUpdated Declaration public event UnityAction<ServerCollectionJson> onServerListUpdated Event Type Type Description UnityAction < ServerCollectionJson > Implements IListServerClientApi IBaseApi"
  },
  "api/Mirror.Discovery.ServerResponse.html": {
    "href": "api/Mirror.Discovery.ServerResponse.html",
    "title": "Struct ServerResponse",
    "keywords": "Struct ServerResponse Implements NetworkMessage Namespace : Mirror.Discovery Assembly : Mirror.Components.dll Syntax public struct ServerResponse : NetworkMessage Fields | Improve this Doc View Source serverId Declaration public long serverId Field Value Type Description Int64 | Improve this Doc View Source uri Declaration public Uri uri Field Value Type Description Uri Properties | Improve this Doc View Source EndPoint Declaration public IPEndPoint EndPoint { get; set; } Property Value Type Description IPEndPoint Implements NetworkMessage"
  },
  "api/Mirror.Tests.Generators.ClassWithNoConstructor.html": {
    "href": "api/Mirror.Tests.Generators.ClassWithNoConstructor.html",
    "title": "Class ClassWithNoConstructor",
    "keywords": "Class ClassWithNoConstructor Inheritance Object ClassWithNoConstructor AttributeBehaviour_ClassWithNoConstructor Namespace : Mirror.Tests.Generators Assembly : Mirror.Tests.dll Syntax public class ClassWithNoConstructor : object Fields | Improve this Doc View Source a Declaration public int a Field Value Type Description Int32"
  },
  "api/Mirror.Examples.Chat.ChatNetworkManager.CreatePlayerMessage.html": {
    "href": "api/Mirror.Examples.Chat.ChatNetworkManager.CreatePlayerMessage.html",
    "title": "Struct ChatNetworkManager.CreatePlayerMessage",
    "keywords": "Struct ChatNetworkManager.CreatePlayerMessage Implements NetworkMessage Namespace : Mirror.Examples.Chat Assembly : Mirror.Examples.dll Syntax public struct CreatePlayerMessage : NetworkMessage Fields | Improve this Doc View Source name Declaration public string name Field Value Type Description String Implements NetworkMessage"
  },
  "api/Mirror.RemoteCalls.html": {
    "href": "api/Mirror.RemoteCalls.html",
    "title": "Namespace Mirror.RemoteCalls",
    "keywords": "Namespace Mirror.RemoteCalls Classes RemoteCallHelper Used to help manage remote calls for NetworkBehaviours Structs CommandInfo Delegates CmdDelegate Delegate for Command functions."
  },
  "api/Mirror.ILoggerExtensions.html": {
    "href": "api/Mirror.ILoggerExtensions.html",
    "title": "Class ILoggerExtensions",
    "keywords": "Class ILoggerExtensions Inheritance Object ILoggerExtensions Namespace : Mirror Assembly : Mirror.dll Syntax public static class ILoggerExtensions : object Methods | Improve this Doc View Source Assert(ILogger, Boolean, String) Declaration public static void Assert(this ILogger logger, bool condition, string message) Parameters Type Name Description ILogger logger Boolean condition String message | Improve this Doc View Source ErrorEnabled(ILogger) Declaration public static bool ErrorEnabled(this ILogger logger) Parameters Type Name Description ILogger logger Returns Type Description Boolean | Improve this Doc View Source LogEnabled(ILogger) Declaration public static bool LogEnabled(this ILogger logger) Parameters Type Name Description ILogger logger Returns Type Description Boolean | Improve this Doc View Source LogError(ILogger, Object) Declaration public static void LogError(this ILogger logger, object message) Parameters Type Name Description ILogger logger Object message | Improve this Doc View Source LogWarning(ILogger, Object) Declaration public static void LogWarning(this ILogger logger, object message) Parameters Type Name Description ILogger logger Object message | Improve this Doc View Source WarnEnabled(ILogger) Declaration public static bool WarnEnabled(this ILogger logger) Parameters Type Name Description ILogger logger Returns Type Description Boolean"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_Vector3_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_Vector3_Test.Message.html",
    "title": "Struct ArraySegment_Vector3_Test.Message",
    "keywords": "Struct ArraySegment_Vector3_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public ArraySegment<Vector3> collection Field Value Type Description ArraySegment < Vector3 > Implements NetworkMessage"
  },
  "api/Mirror.Tests.Generators.FloatStringStruct.html": {
    "href": "api/Mirror.Tests.Generators.FloatStringStruct.html",
    "title": "Struct FloatStringStruct",
    "keywords": "Struct FloatStringStruct Namespace : Mirror.Tests.Generators Assembly : Mirror.Tests.dll Syntax public struct FloatStringStruct Fields | Improve this Doc View Source anotherValue Declaration public string anotherValue Field Value Type Description String | Improve this Doc View Source value Declaration public float value Field Value Type Description Single"
  },
  "api/Mirror.Discovery.NetworkDiscoveryBase-2.html": {
    "href": "api/Mirror.Discovery.NetworkDiscoveryBase-2.html",
    "title": "Class NetworkDiscoveryBase<Request, Response>",
    "keywords": "Class NetworkDiscoveryBase<Request, Response> Base implementation for Network Discovery. Extend this component to provide custom discovery with game specific data NetworkDiscovery for a sample implementation Inheritance Object NetworkDiscoveryBase<Request, Response> NetworkDiscovery Namespace : Mirror.Discovery Assembly : Mirror.Components.dll Syntax public abstract class NetworkDiscoveryBase<Request, Response> : MonoBehaviour where Request : NetworkMessage where Response : NetworkMessage Type Parameters Name Description Request Response Fields | Improve this Doc View Source clientUdpClient Declaration protected UdpClient clientUdpClient Field Value Type Description UdpClient | Improve this Doc View Source secretHandshake Declaration public long secretHandshake Field Value Type Description Int64 | Improve this Doc View Source serverBroadcastListenPort Declaration protected int serverBroadcastListenPort Field Value Type Description Int32 | Improve this Doc View Source serverUdpClient Declaration protected UdpClient serverUdpClient Field Value Type Description UdpClient Properties | Improve this Doc View Source SupportedOnThisPlatform Declaration public static bool SupportedOnThisPlatform { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AdvertiseServer() Advertise this server in the local network Declaration public void AdvertiseServer() | Improve this Doc View Source BroadcastDiscoveryRequest() Sends discovery request from client Declaration public void BroadcastDiscoveryRequest() | Improve this Doc View Source ClientListenAsync() Awaits for server response Declaration public Task ClientListenAsync() Returns Type Description Task ClientListenAsync Task | Improve this Doc View Source GetRequest() Create a message that will be broadcasted on the network to discover servers Declaration protected virtual Request GetRequest() Returns Type Description Request An instance of ServerRequest with data to be broadcasted Remarks Override if you wish to include additional data in the discovery message such as desired game mode, language, difficulty, etc... | Improve this Doc View Source ProcessClientRequest(Request, IPEndPoint) Reply to the client to inform it of this server Declaration protected virtual void ProcessClientRequest(Request request, IPEndPoint endpoint) Parameters Type Name Description Request request Request comming from client IPEndPoint endpoint Address of the client that sent the request Remarks Override if you wish to ignore server requests based on custom criteria such as language, full server game mode or difficulty | Improve this Doc View Source ProcessRequest(Request, IPEndPoint) Process the request from a client Declaration protected abstract Response ProcessRequest(Request request, IPEndPoint endpoint) Parameters Type Name Description Request request Request comming from client IPEndPoint endpoint Address of the client that sent the request Returns Type Description Response The message to be sent back to the client or null Remarks Override if you wish to provide more information to the clients such as the name of the host player | Improve this Doc View Source ProcessResponse(Response, IPEndPoint) Process the answer from a server Declaration protected abstract void ProcessResponse(Response response, IPEndPoint endpoint) Parameters Type Name Description Response response Response that came from the server IPEndPoint endpoint Address of the server that replied Remarks A client receives a reply from a server, this method processes the reply and raises an event | Improve this Doc View Source RandomLong() Declaration public static long RandomLong() Returns Type Description Int64 | Improve this Doc View Source ServerListenAsync() Declaration public Task ServerListenAsync() Returns Type Description Task | Improve this Doc View Source Start() virtual so that inheriting classes' Start() can call base.Start() too Declaration public virtual void Start() | Improve this Doc View Source StartDiscovery() Start Active Discovery Declaration public void StartDiscovery() | Improve this Doc View Source StopDiscovery() Stop Active Discovery Declaration public void StopDiscovery()"
  },
  "api/Mirror.Cloud.ServerListEvent.html": {
    "href": "api/Mirror.Cloud.ServerListEvent.html",
    "title": "Class ServerListEvent",
    "keywords": "Class ServerListEvent Inheritance Object ServerListEvent Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public class ServerListEvent : UnityEvent<ServerCollectionJson>"
  },
  "api/Mirror.Weaver.Tests.Extra.ComplexData.html": {
    "href": "api/Mirror.Weaver.Tests.Extra.ComplexData.html",
    "title": "Struct ComplexData",
    "keywords": "Struct ComplexData Namespace : Mirror.Weaver.Tests.Extra Assembly : WeaverTestExtraAssembly.dll Syntax public struct ComplexData Fields | Improve this Doc View Source another Declaration public AnotherData another Field Value Type Description AnotherData | Improve this Doc View Source q Declaration public float q Field Value Type Description Single"
  },
  "api/Mirror.Cloud.Examples.Pong.html": {
    "href": "api/Mirror.Cloud.Examples.Pong.html",
    "title": "Namespace Mirror.Cloud.Examples.Pong",
    "keywords": "Namespace Mirror.Cloud.Examples.Pong Classes Ball BallManager Player"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_FloatStringStruct_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_FloatStringStruct_Test.html",
    "title": "Class ArraySegment_FloatStringStruct_Test",
    "keywords": "Class ArraySegment_FloatStringStruct_Test Inheritance Object ArraySegment_FloatStringStruct_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class ArraySegment_FloatStringStruct_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.Tests.Generated.Attributes.AttributeTest_NetworkBehaviour.html": {
    "href": "api/Mirror.Tests.Generated.Attributes.AttributeTest_NetworkBehaviour.html",
    "title": "Class AttributeTest_NetworkBehaviour",
    "keywords": "Class AttributeTest_NetworkBehaviour Inheritance Object AttributeTest_NetworkBehaviour Namespace : Mirror.Tests.Generated.Attributes Assembly : Mirror.Tests.dll Syntax public class AttributeTest_NetworkBehaviour : object Methods | Improve this Doc View Source Client_bool_returnsValue(Boolean) Declaration public void Client_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_bool_setsOutValue(Boolean) Declaration public void Client_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_byte_returnsValue(Boolean) Declaration public void Client_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_byte_setsOutValue(Boolean) Declaration public void Client_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_char_returnsValue(Boolean) Declaration public void Client_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_char_setsOutValue(Boolean) Declaration public void Client_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithConstructor_returnsValue(Boolean) Declaration public void Client_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithConstructor_setsOutValue(Boolean) Declaration public void Client_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void Client_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void Client_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_double_returnsValue(Boolean) Declaration public void Client_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_double_setsOutValue(Boolean) Declaration public void Client_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_float_returnsValue(Boolean) Declaration public void Client_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_float_setsOutValue(Boolean) Declaration public void Client_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_int_returnsValue(Boolean) Declaration public void Client_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_int_setsOutValue(Boolean) Declaration public void Client_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_long_returnsValue(Boolean) Declaration public void Client_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_long_setsOutValue(Boolean) Declaration public void Client_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ulong_returnsValue(Boolean) Declaration public void Client_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ulong_setsOutValue(Boolean) Declaration public void Client_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_Vector3_returnsValue(Boolean) Declaration public void Client_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_Vector3_setsOutValue(Boolean) Declaration public void Client_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_bool_returnsValue(Boolean) Declaration public void ClientCallback_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_bool_setsOutValue(Boolean) Declaration public void ClientCallback_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_byte_returnsValue(Boolean) Declaration public void ClientCallback_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_byte_setsOutValue(Boolean) Declaration public void ClientCallback_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_char_returnsValue(Boolean) Declaration public void ClientCallback_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_char_setsOutValue(Boolean) Declaration public void ClientCallback_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithConstructor_returnsValue(Boolean) Declaration public void ClientCallback_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithConstructor_setsOutValue(Boolean) Declaration public void ClientCallback_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void ClientCallback_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void ClientCallback_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_double_returnsValue(Boolean) Declaration public void ClientCallback_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_double_setsOutValue(Boolean) Declaration public void ClientCallback_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_float_returnsValue(Boolean) Declaration public void ClientCallback_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_float_setsOutValue(Boolean) Declaration public void ClientCallback_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_int_returnsValue(Boolean) Declaration public void ClientCallback_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_int_setsOutValue(Boolean) Declaration public void ClientCallback_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_long_returnsValue(Boolean) Declaration public void ClientCallback_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_long_setsOutValue(Boolean) Declaration public void ClientCallback_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ulong_returnsValue(Boolean) Declaration public void ClientCallback_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ulong_setsOutValue(Boolean) Declaration public void ClientCallback_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_Vector3_returnsValue(Boolean) Declaration public void ClientCallback_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_Vector3_setsOutValue(Boolean) Declaration public void ClientCallback_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_bool_returnsValue(Boolean) Declaration public void Server_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_bool_setsOutValue(Boolean) Declaration public void Server_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_byte_returnsValue(Boolean) Declaration public void Server_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_byte_setsOutValue(Boolean) Declaration public void Server_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_char_returnsValue(Boolean) Declaration public void Server_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_char_setsOutValue(Boolean) Declaration public void Server_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithConstructor_returnsValue(Boolean) Declaration public void Server_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithConstructor_setsOutValue(Boolean) Declaration public void Server_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void Server_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void Server_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_double_returnsValue(Boolean) Declaration public void Server_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_double_setsOutValue(Boolean) Declaration public void Server_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_float_returnsValue(Boolean) Declaration public void Server_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_float_setsOutValue(Boolean) Declaration public void Server_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_int_returnsValue(Boolean) Declaration public void Server_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_int_setsOutValue(Boolean) Declaration public void Server_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_long_returnsValue(Boolean) Declaration public void Server_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_long_setsOutValue(Boolean) Declaration public void Server_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ulong_returnsValue(Boolean) Declaration public void Server_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ulong_setsOutValue(Boolean) Declaration public void Server_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_Vector3_returnsValue(Boolean) Declaration public void Server_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_Vector3_setsOutValue(Boolean) Declaration public void Server_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_bool_returnsValue(Boolean) Declaration public void ServerCallback_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_bool_setsOutValue(Boolean) Declaration public void ServerCallback_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_byte_returnsValue(Boolean) Declaration public void ServerCallback_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_byte_setsOutValue(Boolean) Declaration public void ServerCallback_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_char_returnsValue(Boolean) Declaration public void ServerCallback_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_char_setsOutValue(Boolean) Declaration public void ServerCallback_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithConstructor_returnsValue(Boolean) Declaration public void ServerCallback_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithConstructor_setsOutValue(Boolean) Declaration public void ServerCallback_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void ServerCallback_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void ServerCallback_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_double_returnsValue(Boolean) Declaration public void ServerCallback_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_double_setsOutValue(Boolean) Declaration public void ServerCallback_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_float_returnsValue(Boolean) Declaration public void ServerCallback_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_float_setsOutValue(Boolean) Declaration public void ServerCallback_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_int_returnsValue(Boolean) Declaration public void ServerCallback_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_int_setsOutValue(Boolean) Declaration public void ServerCallback_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_long_returnsValue(Boolean) Declaration public void ServerCallback_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_long_setsOutValue(Boolean) Declaration public void ServerCallback_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ulong_returnsValue(Boolean) Declaration public void ServerCallback_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ulong_setsOutValue(Boolean) Declaration public void ServerCallback_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_Vector3_returnsValue(Boolean) Declaration public void ServerCallback_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_Vector3_setsOutValue(Boolean) Declaration public void ServerCallback_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.SyncDictionary-2.html": {
    "href": "api/Mirror.SyncDictionary-2.html",
    "title": "Class SyncDictionary<TKey, TValue>",
    "keywords": "Class SyncDictionary<TKey, TValue> Inheritance Object SyncIDictionary <TKey, TValue> SyncDictionary<TKey, TValue> SyncDictionaryTest.SyncDictionaryIntString Implements SyncObject IReadOnlyDictionary <TKey, TValue> Inherited Members SyncIDictionary<TKey, TValue>.objects SyncIDictionary<TKey, TValue>.Count SyncIDictionary<TKey, TValue>.IsReadOnly SyncIDictionary<TKey, TValue>.Callback SyncIDictionary<TKey, TValue>.Reset() SyncIDictionary<TKey, TValue>.IsDirty SyncIDictionary<TKey, TValue>.Keys SyncIDictionary<TKey, TValue>.Values SyncIDictionary<TKey, TValue>.Flush() SyncIDictionary<TKey, TValue>.OnSerializeAll(NetworkWriter) SyncIDictionary<TKey, TValue>.OnSerializeDelta(NetworkWriter) SyncIDictionary<TKey, TValue>.OnDeserializeAll(NetworkReader) SyncIDictionary<TKey, TValue>.OnDeserializeDelta(NetworkReader) SyncIDictionary<TKey, TValue>.Clear() SyncIDictionary<TKey, TValue>.ContainsKey(TKey) SyncIDictionary<TKey, TValue>.Remove(TKey) SyncIDictionary<TKey, TValue>.Item[TKey] SyncIDictionary<TKey, TValue>.TryGetValue(TKey, TValue) SyncIDictionary<TKey, TValue>.Add(TKey, TValue) SyncIDictionary<TKey, TValue>.Add(KeyValuePair<TKey, TValue>) SyncIDictionary<TKey, TValue>.Contains(KeyValuePair<TKey, TValue>) SyncIDictionary<TKey, TValue>.CopyTo(KeyValuePair<TKey, TValue>[], Int32) SyncIDictionary<TKey, TValue>.Remove(KeyValuePair<TKey, TValue>) SyncIDictionary<TKey, TValue>.GetEnumerator() Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncDictionary<TKey, TValue> : SyncIDictionary<TKey, TValue>, SyncObject, IReadOnlyDictionary<TKey, TValue> Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source SyncDictionary() Declaration public SyncDictionary() | Improve this Doc View Source SyncDictionary(IEqualityComparer<TKey>) Declaration public SyncDictionary(IEqualityComparer<TKey> eq) Parameters Type Name Description IEqualityComparer <TKey> eq Properties | Improve this Doc View Source Keys Declaration public Dictionary<TKey, TValue>.KeyCollection Keys { get; } Property Value Type Description Dictionary.KeyCollection <> | Improve this Doc View Source Values Declaration public Dictionary<TKey, TValue>.ValueCollection Values { get; } Property Value Type Description Dictionary.ValueCollection <> Methods | Improve this Doc View Source GetEnumerator() Declaration public Dictionary<TKey, TValue>.Enumerator GetEnumerator() Returns Type Description Dictionary.Enumerator <> Implements SyncObject IReadOnlyDictionary<, >"
  },
  "api/Mirror.NetworkReaderExtensions.html": {
    "href": "api/Mirror.NetworkReaderExtensions.html",
    "title": "Class NetworkReaderExtensions",
    "keywords": "Class NetworkReaderExtensions Built in Reader functions for Mirror Weaver automatically decects all extension methods for NetworkWriter Inheritance Object NetworkReaderExtensions Namespace : Mirror Assembly : Mirror.dll Syntax public static class NetworkReaderExtensions : object Methods | Improve this Doc View Source ReadArray<T>(NetworkReader) Declaration public static T[] ReadArray<T>(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ReadBoolean(NetworkReader) Declaration public static bool ReadBoolean(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Boolean | Improve this Doc View Source ReadByte(NetworkReader) Declaration public static byte ReadByte(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Byte | Improve this Doc View Source ReadBytes(NetworkReader, Int32) Declaration public static byte[] ReadBytes(this NetworkReader reader, int count) Parameters Type Name Description NetworkReader reader Int32 count Returns Type Description Byte [] | Improve this Doc View Source ReadBytesAndSize(NetworkReader) Declaration public static byte[] ReadBytesAndSize(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Byte [] | Improve this Doc View Source ReadBytesAndSizeSegment(NetworkReader) Declaration public static ArraySegment<byte> ReadBytesAndSizeSegment(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description ArraySegment < Byte > | Improve this Doc View Source ReadChar(NetworkReader) Declaration public static char ReadChar(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Char | Improve this Doc View Source ReadColor(NetworkReader) Declaration public static Color ReadColor(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Color | Improve this Doc View Source ReadColor32(NetworkReader) Declaration public static Color32 ReadColor32(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Color32 | Improve this Doc View Source ReadDecimal(NetworkReader) Declaration public static decimal ReadDecimal(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Decimal | Improve this Doc View Source ReadDouble(NetworkReader) Declaration public static double ReadDouble(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Double | Improve this Doc View Source ReadGameObject(NetworkReader) Declaration public static GameObject ReadGameObject(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description GameObject | Improve this Doc View Source ReadGuid(NetworkReader) Declaration public static Guid ReadGuid(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Guid | Improve this Doc View Source ReadInt16(NetworkReader) Declaration public static short ReadInt16(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Int16 | Improve this Doc View Source ReadInt32(NetworkReader) Declaration public static int ReadInt32(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Int32 | Improve this Doc View Source ReadInt64(NetworkReader) Declaration public static long ReadInt64(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Int64 | Improve this Doc View Source ReadList<T>(NetworkReader) Declaration public static List<T> ReadList<T>(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description List <T> Type Parameters Name Description T | Improve this Doc View Source ReadMatrix4x4(NetworkReader) Declaration public static Matrix4x4 ReadMatrix4x4(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Matrix4x4 | Improve this Doc View Source ReadNetworkIdentity(NetworkReader) Declaration public static NetworkIdentity ReadNetworkIdentity(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description NetworkIdentity | Improve this Doc View Source ReadPlane(NetworkReader) Declaration public static Plane ReadPlane(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Plane | Improve this Doc View Source ReadQuaternion(NetworkReader) Declaration public static Quaternion ReadQuaternion(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Quaternion | Improve this Doc View Source ReadRay(NetworkReader) Declaration public static Ray ReadRay(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Ray | Improve this Doc View Source ReadRect(NetworkReader) Declaration public static Rect ReadRect(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Rect | Improve this Doc View Source ReadSByte(NetworkReader) Declaration public static sbyte ReadSByte(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description SByte | Improve this Doc View Source ReadSingle(NetworkReader) Declaration public static float ReadSingle(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Single | Improve this Doc View Source ReadString(NetworkReader) Declaration public static string ReadString(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description String | Improve this Doc View Source ReadTransform(NetworkReader) Declaration public static Transform ReadTransform(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Transform | Improve this Doc View Source ReadUInt16(NetworkReader) Declaration public static ushort ReadUInt16(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description UInt16 | Improve this Doc View Source ReadUInt32(NetworkReader) Declaration public static uint ReadUInt32(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description UInt32 | Improve this Doc View Source ReadUInt64(NetworkReader) Declaration public static ulong ReadUInt64(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description UInt64 | Improve this Doc View Source ReadUri(NetworkReader) Declaration public static Uri ReadUri(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Uri | Improve this Doc View Source ReadVector2(NetworkReader) Declaration public static Vector2 ReadVector2(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector2 | Improve this Doc View Source ReadVector2Int(NetworkReader) Declaration public static Vector2Int ReadVector2Int(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector2Int | Improve this Doc View Source ReadVector3(NetworkReader) Declaration public static Vector3 ReadVector3(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector3 | Improve this Doc View Source ReadVector3Int(NetworkReader) Declaration public static Vector3Int ReadVector3Int(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector3Int | Improve this Doc View Source ReadVector4(NetworkReader) Declaration public static Vector4 ReadVector4(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description Vector4"
  },
  "api/Mirror.Tests.MemoryTransport.html": {
    "href": "api/Mirror.Tests.MemoryTransport.html",
    "title": "Class MemoryTransport",
    "keywords": "Class MemoryTransport Inheritance Object Transport MemoryTransport Inherited Members Transport.activeTransport Transport.OnClientConnected Transport.OnClientDataReceived Transport.OnClientError Transport.OnClientDisconnected Transport.ClientConnect(Uri) Mirror.Transport.ClientSend(System.Int32, ArraySegment<>) Transport.OnServerConnected Transport.OnServerDataReceived Transport.OnServerError Transport.OnServerDisconnected Mirror.Transport.ServerSend(System.Int32, System.Int32, ArraySegment<>) Transport.Update() Transport.OnApplicationQuit() Namespace : Mirror.Tests Assembly : Mirror.Tests.Common.dll Syntax public class MemoryTransport : Transport Methods | Improve this Doc View Source Available() Declaration public override bool Available() Returns Type Description Boolean Overrides Transport.Available() | Improve this Doc View Source ClientConnect(String) Declaration public override void ClientConnect(string address) Parameters Type Name Description String address Overrides Transport.ClientConnect(String) | Improve this Doc View Source ClientConnected() Declaration public override bool ClientConnected() Returns Type Description Boolean Overrides Transport.ClientConnected() | Improve this Doc View Source ClientDisconnect() Declaration public override void ClientDisconnect() Overrides Transport.ClientDisconnect() | Improve this Doc View Source ClientSend(Int32, ArraySegment<Byte>) Declaration public override void ClientSend(int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 channelId ArraySegment < Byte > segment | Improve this Doc View Source GetMaxPacketSize(Int32) Declaration public override int GetMaxPacketSize(int channelId) Parameters Type Name Description Int32 channelId Returns Type Description Int32 Overrides Transport.GetMaxPacketSize(Int32) | Improve this Doc View Source LateUpdate() Declaration public void LateUpdate() | Improve this Doc View Source ServerActive() Declaration public override bool ServerActive() Returns Type Description Boolean Overrides Transport.ServerActive() | Improve this Doc View Source ServerDisconnect(Int32) Declaration public override bool ServerDisconnect(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description Boolean Overrides Transport.ServerDisconnect(Int32) | Improve this Doc View Source ServerGetClientAddress(Int32) Declaration public override string ServerGetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description String Overrides Transport.ServerGetClientAddress(Int32) | Improve this Doc View Source ServerSend(Int32, Int32, ArraySegment<Byte>) Declaration public override void ServerSend(int connectionId, int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 connectionId Int32 channelId ArraySegment < Byte > segment | Improve this Doc View Source ServerStart() Declaration public override void ServerStart() Overrides Transport.ServerStart() | Improve this Doc View Source ServerStop() Declaration public override void ServerStop() Overrides Transport.ServerStop() | Improve this Doc View Source ServerUri() Declaration public override Uri ServerUri() Returns Type Description Uri Overrides Transport.ServerUri() | Improve this Doc View Source Shutdown() Declaration public override void Shutdown() Overrides Transport.Shutdown()"
  },
  "api/Mirror.Logging.ConsoleColorLogHandler.html": {
    "href": "api/Mirror.Logging.ConsoleColorLogHandler.html",
    "title": "Class ConsoleColorLogHandler",
    "keywords": "Class ConsoleColorLogHandler Inheritance Object ConsoleColorLogHandler Namespace : Mirror.Logging Assembly : Mirror.dll Syntax public class ConsoleColorLogHandler : ILogHandler Constructors | Improve this Doc View Source ConsoleColorLogHandler(Boolean) Declaration public ConsoleColorLogHandler(bool showExceptionStackTrace) Parameters Type Name Description Boolean showExceptionStackTrace Methods | Improve this Doc View Source LogException(Exception, UnityEngine.Object) Declaration public void LogException(Exception exception, UnityEngine.Object context) Parameters Type Name Description Exception exception UnityEngine.Object context | Improve this Doc View Source LogFormat(LogType, UnityEngine.Object, String, Object[]) Declaration public void LogFormat(LogType logType, UnityEngine.Object context, string format, params object[] args) Parameters Type Name Description LogType logType UnityEngine.Object context String format Object [] args"
  },
  "api/Mirror.SimpleWeb.ArrayBuffer.html": {
    "href": "api/Mirror.SimpleWeb.ArrayBuffer.html",
    "title": "Class ArrayBuffer",
    "keywords": "Class ArrayBuffer Inheritance Object ArrayBuffer Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public sealed class ArrayBuffer : IDisposable Constructors | Improve this Doc View Source ArrayBuffer(IBufferOwner, Int32) Declaration public ArrayBuffer(IBufferOwner owner, int size) Parameters Type Name Description IBufferOwner owner Int32 size Fields | Improve this Doc View Source array Declaration public readonly byte[] array Field Value Type Description Byte [] Methods | Improve this Doc View Source CopyFrom(ArraySegment<Byte>) Declaration public void CopyFrom(ArraySegment<byte> segment) Parameters Type Name Description ArraySegment < Byte > segment | Improve this Doc View Source CopyFrom(IntPtr, Int32) Declaration public void CopyFrom(IntPtr bufferPtr, int length) Parameters Type Name Description IntPtr bufferPtr Int32 length | Improve this Doc View Source CopyFrom(Byte[], Int32, Int32) Declaration public void CopyFrom(byte[] source, int offset, int length) Parameters Type Name Description Byte [] source Int32 offset Int32 length | Improve this Doc View Source CopyTo(Byte[], Int32) Declaration public void CopyTo(byte[] target, int offset) Parameters Type Name Description Byte [] target Int32 offset | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Release() Declaration public void Release() | Improve this Doc View Source SetReleasesRequired(Int32) How many times release needs to be called before buffer is returned to pool This allows the buffer to be used in multiple places at the same time Declaration public void SetReleasesRequired(int required) Parameters Type Name Description Int32 required | Improve this Doc View Source ToSegment() Declaration public ArraySegment<byte> ToSegment() Returns Type Description ArraySegment < Byte >"
  },
  "api/Mirror.Logging.NetworkHeadlessLogger.html": {
    "href": "api/Mirror.Logging.NetworkHeadlessLogger.html",
    "title": "Class NetworkHeadlessLogger",
    "keywords": "Class NetworkHeadlessLogger Used to replace log hanlder with Console Color LogHandler Inheritance Object NetworkHeadlessLogger Namespace : Mirror.Logging Assembly : Mirror.dll Syntax public class NetworkHeadlessLogger : MonoBehaviour"
  },
  "api/Mirror.Examples.Pong.html": {
    "href": "api/Mirror.Examples.Pong.html",
    "title": "Namespace Mirror.Examples.Pong",
    "keywords": "Namespace Mirror.Examples.Pong Classes Ball NetworkManagerPong Player QuitButtonHUD Simular to NetworkManagerHUD but just quit buttons"
  },
  "api/Mirror.Tests.NetworkBehaviourSendRPCInternalComponent.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourSendRPCInternalComponent.html",
    "title": "Class NetworkBehaviourSendRPCInternalComponent",
    "keywords": "Class NetworkBehaviourSendRPCInternalComponent Inheritance Object NetworkBehaviour NetworkBehaviourSendRPCInternalComponent Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourSendRPCInternalComponent : NetworkBehaviour Fields | Improve this Doc View Source called Declaration public int called Field Value Type Description Int32 Methods | Improve this Doc View Source CallSendRPCInternal() Declaration public void CallSendRPCInternal() | Improve this Doc View Source RPCGenerated(NetworkBehaviour, NetworkReader, NetworkConnection) Declaration public static void RPCGenerated(NetworkBehaviour comp, NetworkReader reader, NetworkConnection senderConnection) Parameters Type Name Description NetworkBehaviour comp NetworkReader reader NetworkConnection senderConnection"
  },
  "api/Mirror.Examples.MultipleAdditiveScenes.PlayerScore.html": {
    "href": "api/Mirror.Examples.MultipleAdditiveScenes.PlayerScore.html",
    "title": "Class PlayerScore",
    "keywords": "Class PlayerScore Inheritance Object NetworkBehaviour PlayerScore Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.MultipleAdditiveScenes Assembly : Mirror.Examples.dll Syntax public class PlayerScore : NetworkBehaviour Fields | Improve this Doc View Source clientMatchIndex Declaration public int clientMatchIndex Field Value Type Description Int32 | Improve this Doc View Source matchIndex Declaration public int matchIndex Field Value Type Description Int32 | Improve this Doc View Source playerNumber Declaration public int playerNumber Field Value Type Description Int32 | Improve this Doc View Source score Declaration public uint score Field Value Type Description UInt32 | Improve this Doc View Source scoreIndex Declaration public int scoreIndex Field Value Type Description Int32"
  },
  "api/Mirror.PlayerSpawnMethod.html": {
    "href": "api/Mirror.PlayerSpawnMethod.html",
    "title": "Enum PlayerSpawnMethod",
    "keywords": "Enum PlayerSpawnMethod Enumeration of methods of where to spawn player objects in multiplayer games. Namespace : Mirror Assembly : Mirror.dll Syntax public enum PlayerSpawnMethod : int Fields Name Description Random RoundRobin"
  },
  "api/Mirror.Weaver.WeaverTypes.html": {
    "href": "api/Mirror.Weaver.WeaverTypes.html",
    "title": "Class WeaverTypes",
    "keywords": "Class WeaverTypes Inheritance Object WeaverTypes Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class WeaverTypes : object Fields | Improve this Doc View Source ArraySegmentArrayReference Declaration public static MethodReference ArraySegmentArrayReference Field Value Type Description MethodReference | Improve this Doc View Source ArraySegmentConstructorReference Declaration public static MethodReference ArraySegmentConstructorReference Field Value Type Description MethodReference | Improve this Doc View Source ArraySegmentCountReference Declaration public static MethodReference ArraySegmentCountReference Field Value Type Description MethodReference | Improve this Doc View Source ArraySegmentOffsetReference Declaration public static MethodReference ArraySegmentOffsetReference Field Value Type Description MethodReference | Improve this Doc View Source CmdDelegateConstructor Declaration public static MethodReference CmdDelegateConstructor Field Value Type Description MethodReference | Improve this Doc View Source GetPooledWriterReference Declaration public static MethodReference GetPooledWriterReference Field Value Type Description MethodReference | Improve this Doc View Source getSyncVarGameObjectReference Declaration public static MethodReference getSyncVarGameObjectReference Field Value Type Description MethodReference | Improve this Doc View Source getSyncVarHookGuard Declaration public static MethodReference getSyncVarHookGuard Field Value Type Description MethodReference | Improve this Doc View Source getSyncVarNetworkIdentityReference Declaration public static MethodReference getSyncVarNetworkIdentityReference Field Value Type Description MethodReference | Improve this Doc View Source getTypeFromHandleReference Declaration public static MethodReference getTypeFromHandleReference Field Value Type Description MethodReference | Improve this Doc View Source getTypeReference Declaration public static MethodReference getTypeReference Field Value Type Description MethodReference | Improve this Doc View Source InitSyncObjectReference Declaration public static MethodReference InitSyncObjectReference Field Value Type Description MethodReference | Improve this Doc View Source ListAddReference Declaration public static MethodReference ListAddReference Field Value Type Description MethodReference | Improve this Doc View Source ListConstructorReference Declaration public static MethodReference ListConstructorReference Field Value Type Description MethodReference | Improve this Doc View Source ListCountReference Declaration public static MethodReference ListCountReference Field Value Type Description MethodReference | Improve this Doc View Source ListGetItemReference Declaration public static MethodReference ListGetItemReference Field Value Type Description MethodReference | Improve this Doc View Source logErrorReference Declaration public static MethodReference logErrorReference Field Value Type Description MethodReference | Improve this Doc View Source logWarningReference Declaration public static MethodReference logWarningReference Field Value Type Description MethodReference | Improve this Doc View Source NetworkBehaviourDirtyBitsReference Declaration public static MethodReference NetworkBehaviourDirtyBitsReference Field Value Type Description MethodReference | Improve this Doc View Source NetworkClientGetActive Declaration public static MethodReference NetworkClientGetActive Field Value Type Description MethodReference | Improve this Doc View Source NetworkServerGetActive Declaration public static MethodReference NetworkServerGetActive Field Value Type Description MethodReference | Improve this Doc View Source NetworkServerGetLocalClientActive Declaration public static MethodReference NetworkServerGetLocalClientActive Field Value Type Description MethodReference | Improve this Doc View Source ReadyConnectionReference Declaration public static MethodReference ReadyConnectionReference Field Value Type Description MethodReference | Improve this Doc View Source RecycleWriterReference Declaration public static MethodReference RecycleWriterReference Field Value Type Description MethodReference | Improve this Doc View Source registerCommandDelegateReference Declaration public static MethodReference registerCommandDelegateReference Field Value Type Description MethodReference | Improve this Doc View Source registerRpcDelegateReference Declaration public static MethodReference registerRpcDelegateReference Field Value Type Description MethodReference | Improve this Doc View Source ScriptableObjectCreateInstanceMethod Declaration public static MethodReference ScriptableObjectCreateInstanceMethod Field Value Type Description MethodReference | Improve this Doc View Source sendCommandInternal Declaration public static MethodReference sendCommandInternal Field Value Type Description MethodReference | Improve this Doc View Source sendRpcInternal Declaration public static MethodReference sendRpcInternal Field Value Type Description MethodReference | Improve this Doc View Source sendTargetRpcInternal Declaration public static MethodReference sendTargetRpcInternal Field Value Type Description MethodReference | Improve this Doc View Source setSyncVarGameObjectReference Declaration public static MethodReference setSyncVarGameObjectReference Field Value Type Description MethodReference | Improve this Doc View Source setSyncVarHookGuard Declaration public static MethodReference setSyncVarHookGuard Field Value Type Description MethodReference | Improve this Doc View Source setSyncVarNetworkIdentityReference Declaration public static MethodReference setSyncVarNetworkIdentityReference Field Value Type Description MethodReference | Improve this Doc View Source setSyncVarReference Declaration public static MethodReference setSyncVarReference Field Value Type Description MethodReference | Improve this Doc View Source syncVarEqualReference Declaration public static MethodReference syncVarEqualReference Field Value Type Description MethodReference | Improve this Doc View Source syncVarGameObjectEqualReference Declaration public static MethodReference syncVarGameObjectEqualReference Field Value Type Description MethodReference | Improve this Doc View Source syncVarNetworkIdentityEqualReference Declaration public static MethodReference syncVarNetworkIdentityEqualReference Field Value Type Description MethodReference Methods | Improve this Doc View Source Import(Type) Declaration public static TypeReference Import(Type t) Parameters Type Name Description Type t Returns Type Description TypeReference | Improve this Doc View Source Import<T>() Declaration public static TypeReference Import<T>() Returns Type Description TypeReference Type Parameters Name Description T | Improve this Doc View Source SetupTargetTypes(AssemblyDefinition) Declaration public static void SetupTargetTypes(AssemblyDefinition currentAssembly) Parameters Type Name Description AssemblyDefinition currentAssembly"
  },
  "api/Mirror.SpawnMessage.html": {
    "href": "api/Mirror.SpawnMessage.html",
    "title": "Struct SpawnMessage",
    "keywords": "Struct SpawnMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct SpawnMessage : NetworkMessage Fields | Improve this Doc View Source assetId The id of the prefab to spawn If sceneId != 0 then it is used instead of assetId Declaration public Guid assetId Field Value Type Description Guid | Improve this Doc View Source isLocalPlayer Is the spawning object the local player. Sets ClientScene.localPlayer Declaration public bool isLocalPlayer Field Value Type Description Boolean | Improve this Doc View Source isOwner Sets hasAuthority on the spawned object Declaration public bool isOwner Field Value Type Description Boolean | Improve this Doc View Source netId netId of new or existing object Declaration public uint netId Field Value Type Description UInt32 | Improve this Doc View Source payload The serialized component data ArraySegment to avoid unnecessary allocations Declaration public ArraySegment<byte> payload Field Value Type Description ArraySegment < Byte > | Improve this Doc View Source position Local position Declaration public Vector3 position Field Value Type Description Vector3 | Improve this Doc View Source rotation Local rotation Declaration public Quaternion rotation Field Value Type Description Quaternion | Improve this Doc View Source scale Local scale Declaration public Vector3 scale Field Value Type Description Vector3 | Improve this Doc View Source sceneId The id of the scene object to spawn Declaration public ulong sceneId Field Value Type Description UInt64 Implements NetworkMessage"
  },
  "api/Mirror.Tests.Generators.ClassWithConstructor.html": {
    "href": "api/Mirror.Tests.Generators.ClassWithConstructor.html",
    "title": "Class ClassWithConstructor",
    "keywords": "Class ClassWithConstructor Inheritance Object ClassWithConstructor Namespace : Mirror.Tests.Generators Assembly : Mirror.Tests.dll Syntax public class ClassWithConstructor : object Constructors | Improve this Doc View Source ClassWithConstructor(Int32) Declaration public ClassWithConstructor(int a) Parameters Type Name Description Int32 a Fields | Improve this Doc View Source a Declaration public int a Field Value Type Description Int32"
  },
  "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_UnregisterSpawnHandler.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_UnregisterSpawnHandler.html",
    "title": "Class ClientSceneTests_UnregisterSpawnHandler",
    "keywords": "Class ClientSceneTests_UnregisterSpawnHandler Inheritance Object ClientSceneTestsBase ClientSceneTests_UnregisterSpawnHandler Inherited Members ClientSceneTestsBase.ValidPrefabAssetGuid ClientSceneTestsBase.PrefabWithChildrenAssetGuid ClientSceneTestsBase.InvalidPrefabAssetGuid ClientSceneTestsBase.AnotherGuidString ClientSceneTestsBase.validPrefab ClientSceneTestsBase.validPrefabNetworkIdentity ClientSceneTestsBase.prefabWithChildren ClientSceneTestsBase.invalidPrefab ClientSceneTestsBase.validPrefabGuid ClientSceneTestsBase.anotherGuid ClientSceneTestsBase._createdObjects ClientSceneTestsBase.prefabs ClientSceneTestsBase.spawnHandlers ClientSceneTestsBase.unspawnHandlers ClientSceneTestsBase.spawnableObjects ClientSceneTestsBase.OneTimeSetUp() ClientSceneTestsBase.TearDown() ClientSceneTestsBase.OneTimeTearDown() Namespace : Mirror.Tests.ClientSceneTests Assembly : Mirror.Tests.dll Syntax public class ClientSceneTests_UnregisterSpawnHandler : ClientSceneTestsBase Methods | Improve this Doc View Source DoesNotRemovePrefabDictionary() Declaration public void DoesNotRemovePrefabDictionary() | Improve this Doc View Source RemovesSpawnHandlersFromDictionary() Declaration public void RemovesSpawnHandlersFromDictionary() | Improve this Doc View Source RemovesUnSpawnHandlersFromDictionary() Declaration public void RemovesUnSpawnHandlersFromDictionary()"
  },
  "api/Mirror.Tests.MockQuest.html": {
    "href": "api/Mirror.Tests.MockQuest.html",
    "title": "Class MockQuest",
    "keywords": "Class MockQuest Inheritance Object MockQuest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class MockQuest : object Constructors | Improve this Doc View Source MockQuest() Declaration public MockQuest() | Improve this Doc View Source MockQuest(Int32) Declaration public MockQuest(int id) Parameters Type Name Description Int32 id Properties | Improve this Doc View Source Id Declaration public int Id { get; set; } Property Value Type Description Int32"
  },
  "api/Mirror.Tests.NetworkBehaviourHookGuardTester.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourHookGuardTester.html",
    "title": "Class NetworkBehaviourHookGuardTester",
    "keywords": "Class NetworkBehaviourHookGuardTester Inheritance Object NetworkBehaviour NetworkBehaviourHookGuardTester Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourHookGuardTester : NetworkBehaviour Methods | Improve this Doc View Source HookGuard() Declaration public void HookGuard()"
  },
  "api/Mirror.SpawnHandlerDelegate.html": {
    "href": "api/Mirror.SpawnHandlerDelegate.html",
    "title": "Delegate SpawnHandlerDelegate",
    "keywords": "Delegate SpawnHandlerDelegate Namespace : Mirror Assembly : Mirror.dll Syntax public delegate GameObject SpawnHandlerDelegate(SpawnMessage msg); Parameters Type Name Description SpawnMessage msg Returns Type Description GameObject"
  },
  "api/Mirror.Weaver.Tests.WeaverMessageTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverMessageTests.html",
    "title": "Class WeaverMessageTests",
    "keywords": "Class WeaverMessageTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverMessageTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverMessageTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source AbstractMessageMethods() Declaration public void AbstractMessageMethods() | Improve this Doc View Source MessageMemberGeneric() Declaration public void MessageMemberGeneric() | Improve this Doc View Source MessageMemberInterface() Declaration public void MessageMemberInterface() | Improve this Doc View Source MessageNestedInheritance() Declaration public void MessageNestedInheritance() | Improve this Doc View Source MessageSelfReferencing() Declaration public void MessageSelfReferencing() | Improve this Doc View Source MessageValid() Declaration public void MessageValid() | Improve this Doc View Source MessageWithBaseClass() Declaration public void MessageWithBaseClass()"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.List_FloatStringStruct_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.List_FloatStringStruct_Test.html",
    "title": "Class List_FloatStringStruct_Test",
    "keywords": "Class List_FloatStringStruct_Test Inheritance Object List_FloatStringStruct_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class List_FloatStringStruct_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.Tests.NetworkBehaviourSetSyncVarGameObjectComponent.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourSetSyncVarGameObjectComponent.html",
    "title": "Class NetworkBehaviourSetSyncVarGameObjectComponent",
    "keywords": "Class NetworkBehaviourSetSyncVarGameObjectComponent Inheritance Object NetworkBehaviour NetworkBehaviourSetSyncVarGameObjectComponent Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourSetSyncVarGameObjectComponent : NetworkBehaviour Fields | Improve this Doc View Source test Declaration public GameObject test Field Value Type Description GameObject | Improve this Doc View Source testNetId Declaration public uint testNetId Field Value Type Description UInt32 Methods | Improve this Doc View Source SetSyncVarGameObjectExposed(GameObject, UInt64) Declaration public void SetSyncVarGameObjectExposed(GameObject newGameObject, ulong dirtyBit) Parameters Type Name Description GameObject newGameObject UInt64 dirtyBit"
  },
  "api/Mirror.Examples.NetworkRoom.RandomColor.html": {
    "href": "api/Mirror.Examples.NetworkRoom.RandomColor.html",
    "title": "Class RandomColor",
    "keywords": "Class RandomColor Inheritance Object NetworkBehaviour RandomColor Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.NetworkRoom Assembly : Mirror.Examples.dll Syntax public class RandomColor : NetworkBehaviour Fields | Improve this Doc View Source color Declaration public Color32 color Field Value Type Description Color32 Methods | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer()"
  },
  "api/Mirror.Examples.NetworkRoom.html": {
    "href": "api/Mirror.Examples.NetworkRoom.html",
    "title": "Namespace Mirror.Examples.NetworkRoom",
    "keywords": "Namespace Mirror.Examples.NetworkRoom Classes NetworkRoomManagerExt NetworkRoomPlayerExt PlayerController PlayerScore RandomColor Reward"
  },
  "api/Mirror.Examples.Additive.AdditiveNetworkManager.html": {
    "href": "api/Mirror.Examples.Additive.AdditiveNetworkManager.html",
    "title": "Class AdditiveNetworkManager",
    "keywords": "Class AdditiveNetworkManager Inheritance Object NetworkManager AdditiveNetworkManager Inherited Members NetworkManager.dontDestroyOnLoad NetworkManager.runInBackground NetworkManager.autoStartServerBuild NetworkManager.showDebugMessages NetworkManager.serverTickRate NetworkManager.offlineScene NetworkManager.onlineScene NetworkManager.transport NetworkManager.networkAddress NetworkManager.maxConnections NetworkManager.disconnectInactiveConnections NetworkManager.disconnectInactiveTimeout NetworkManager.authenticator NetworkManager.playerPrefab NetworkManager.autoCreatePlayer NetworkManager.playerSpawnMethod NetworkManager.spawnPrefabs NetworkManager.singleton NetworkManager.numPlayers NetworkManager.isNetworkActive NetworkManager.clientLoadedScene NetworkManager.mode NetworkManager.OnValidate() NetworkManager.Awake() NetworkManager.Start() NetworkManager.LateUpdate() NetworkManager.IsSceneActive(String) NetworkManager.StartServer() NetworkManager.StartClient() NetworkManager.StartClient(Uri) NetworkManager.StartHost() NetworkManager.StopHost() NetworkManager.StopServer() NetworkManager.StopClient() NetworkManager.OnApplicationQuit() NetworkManager.ConfigureServerFrameRate() NetworkManager.Shutdown() NetworkManager.OnDestroy() NetworkManager.networkSceneName NetworkManager.loadingSceneAsync NetworkManager.ServerChangeScene(String) NetworkManager.startPositionIndex NetworkManager.startPositions NetworkManager.RegisterStartPosition(Transform) NetworkManager.UnRegisterStartPosition(Transform) NetworkManager.GetStartPosition() NetworkManager.OnServerConnect(NetworkConnection) NetworkManager.OnServerDisconnect(NetworkConnection) NetworkManager.OnServerReady(NetworkConnection) NetworkManager.OnServerAddPlayer(NetworkConnection) NetworkManager.OnServerError(NetworkConnection, Int32) NetworkManager.OnServerChangeScene(String) NetworkManager.OnServerSceneChanged(String) NetworkManager.OnClientConnect(NetworkConnection) NetworkManager.OnClientDisconnect(NetworkConnection) NetworkManager.OnClientError(NetworkConnection, Int32) NetworkManager.OnClientNotReady(NetworkConnection) NetworkManager.OnClientChangeScene(String, SceneOperation, Boolean) NetworkManager.OnClientSceneChanged(NetworkConnection) NetworkManager.OnStartHost() NetworkManager.OnStartClient() NetworkManager.OnStopHost() Namespace : Mirror.Examples.Additive Assembly : Mirror.Examples.dll Syntax public class AdditiveNetworkManager : NetworkManager Fields | Improve this Doc View Source subScenes Declaration public string[] subScenes Field Value Type Description String [] | Improve this Doc View Source Zone Declaration public GameObject Zone Field Value Type Description GameObject Methods | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkManager.OnStartServer() | Improve this Doc View Source OnStopClient() Declaration public override void OnStopClient() Overrides NetworkManager.OnStopClient() | Improve this Doc View Source OnStopServer() Declaration public override void OnStopServer() Overrides NetworkManager.OnStopServer()"
  },
  "api/Mirror.MiddlewareTransport.html": {
    "href": "api/Mirror.MiddlewareTransport.html",
    "title": "Class MiddlewareTransport",
    "keywords": "Class MiddlewareTransport Allows Middleware to override some of the transport methods or let the inner transport handle them. Inheritance Object Transport MiddlewareTransport MyMiddleware Inherited Members Transport.activeTransport Transport.OnClientConnected Transport.OnClientDataReceived Transport.OnClientError Transport.OnClientDisconnected Transport.ClientConnect(Uri) Transport.OnServerConnected Transport.OnServerDataReceived Transport.OnServerError Transport.OnServerDisconnected Transport.Update() Transport.OnApplicationQuit() Namespace : Mirror Assembly : Mirror.dll Syntax public abstract class MiddlewareTransport : Transport Fields | Improve this Doc View Source inner Transport to call to after middleware Declaration public Transport inner Field Value Type Description Transport Methods | Improve this Doc View Source Available() Declaration public override bool Available() Returns Type Description Boolean Overrides Transport.Available() | Improve this Doc View Source ClientConnect(String) Declaration public override void ClientConnect(string address) Parameters Type Name Description String address Overrides Transport.ClientConnect(String) | Improve this Doc View Source ClientConnected() Declaration public override bool ClientConnected() Returns Type Description Boolean Overrides Transport.ClientConnected() | Improve this Doc View Source ClientDisconnect() Declaration public override void ClientDisconnect() Overrides Transport.ClientDisconnect() | Improve this Doc View Source ClientSend(Int32, ArraySegment<Byte>) Declaration public override void ClientSend(int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 channelId ArraySegment < Byte > segment Overrides Transport.ClientSend(Int32, ArraySegment<Byte>) | Improve this Doc View Source GetMaxPacketSize(Int32) Declaration public override int GetMaxPacketSize(int channelId = 0) Parameters Type Name Description Int32 channelId Returns Type Description Int32 Overrides Transport.GetMaxPacketSize(Int32) | Improve this Doc View Source ServerActive() Declaration public override bool ServerActive() Returns Type Description Boolean Overrides Transport.ServerActive() | Improve this Doc View Source ServerDisconnect(Int32) Declaration public override bool ServerDisconnect(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description Boolean Overrides Transport.ServerDisconnect(Int32) | Improve this Doc View Source ServerGetClientAddress(Int32) Declaration public override string ServerGetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description String Overrides Transport.ServerGetClientAddress(Int32) | Improve this Doc View Source ServerSend(Int32, Int32, ArraySegment<Byte>) Declaration public override void ServerSend(int connectionId, int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 connectionId Int32 channelId ArraySegment < Byte > segment Overrides Transport.ServerSend(Int32, Int32, ArraySegment<Byte>) | Improve this Doc View Source ServerStart() Declaration public override void ServerStart() Overrides Transport.ServerStart() | Improve this Doc View Source ServerStop() Declaration public override void ServerStop() Overrides Transport.ServerStop() | Improve this Doc View Source ServerUri() Declaration public override Uri ServerUri() Returns Type Description Uri Overrides Transport.ServerUri() | Improve this Doc View Source Shutdown() Declaration public override void Shutdown() Overrides Transport.Shutdown()"
  },
  "api/Mirror.Tests.OnStartLocalPlayerComponent.html": {
    "href": "api/Mirror.Tests.OnStartLocalPlayerComponent.html",
    "title": "Class OnStartLocalPlayerComponent",
    "keywords": "Class OnStartLocalPlayerComponent Inheritance Object NetworkBehaviour OnStartLocalPlayerComponent Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class OnStartLocalPlayerComponent : NetworkBehaviour Fields | Improve this Doc View Source called Declaration public int called Field Value Type Description Int32 Methods | Improve this Doc View Source OnStartLocalPlayer() Declaration public override void OnStartLocalPlayer() Overrides NetworkBehaviour.OnStartLocalPlayer()"
  },
  "api/Mirror.Examples.NetworkRoom.PlayerScore.html": {
    "href": "api/Mirror.Examples.NetworkRoom.PlayerScore.html",
    "title": "Class PlayerScore",
    "keywords": "Class PlayerScore Inheritance Object NetworkBehaviour PlayerScore Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.NetworkRoom Assembly : Mirror.Examples.dll Syntax public class PlayerScore : NetworkBehaviour Fields | Improve this Doc View Source index Declaration public int index Field Value Type Description Int32 | Improve this Doc View Source score Declaration public uint score Field Value Type Description UInt32"
  },
  "api/Mirror.SceneAttribute.html": {
    "href": "api/Mirror.SceneAttribute.html",
    "title": "Class SceneAttribute",
    "keywords": "Class SceneAttribute Converts a string property into a Scene property in the inspector Inheritance Object SceneAttribute Namespace : Mirror Assembly : Mirror.dll Syntax public class SceneAttribute : PropertyAttribute"
  },
  "api/Mirror.SimpleWeb.TcpConfig.html": {
    "href": "api/Mirror.SimpleWeb.TcpConfig.html",
    "title": "Struct TcpConfig",
    "keywords": "Struct TcpConfig Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public struct TcpConfig Constructors | Improve this Doc View Source TcpConfig(Boolean, Int32, Int32) Declaration public TcpConfig(bool noDelay, int sendTimeout, int receiveTimeout) Parameters Type Name Description Boolean noDelay Int32 sendTimeout Int32 receiveTimeout Fields | Improve this Doc View Source noDelay Declaration public readonly bool noDelay Field Value Type Description Boolean | Improve this Doc View Source receiveTimeout Declaration public readonly int receiveTimeout Field Value Type Description Int32 | Improve this Doc View Source sendTimeout Declaration public readonly int sendTimeout Field Value Type Description Int32 Methods | Improve this Doc View Source ApplyTo(TcpClient) Declaration public void ApplyTo(TcpClient client) Parameters Type Name Description TcpClient client"
  },
  "api/Mirror.Tests.Runtime.NetworkServerWithHostRuntimeTest.html": {
    "href": "api/Mirror.Tests.Runtime.NetworkServerWithHostRuntimeTest.html",
    "title": "Class NetworkServerWithHostRuntimeTest",
    "keywords": "Class NetworkServerWithHostRuntimeTest Inheritance Object NetworkServerWithHostRuntimeTest Namespace : Mirror.Tests.Runtime Assembly : Mirror.Tests.Runtime.dll Syntax public class NetworkServerWithHostRuntimeTest : object Methods | Improve this Doc View Source DisconnectTimeoutTest() Declaration public IEnumerator DisconnectTimeoutTest() Returns Type Description IEnumerator | Improve this Doc View Source TearDown() Declaration public void TearDown() | Improve this Doc View Source UnitySetUp() Declaration public IEnumerator UnitySetUp() Returns Type Description IEnumerator"
  },
  "api/Mirror.Tests.FakeNetworkConnection.html": {
    "href": "api/Mirror.Tests.FakeNetworkConnection.html",
    "title": "Class FakeNetworkConnection",
    "keywords": "Class FakeNetworkConnection Inheritance Object NetworkConnection NetworkConnectionToClient FakeNetworkConnection Inherited Members NetworkConnection.LocalConnectionId NetworkConnection.connectionId NetworkConnection.isAuthenticated NetworkConnection.authenticationData NetworkConnection.isReady NetworkConnection.lastMessageTime NetworkConnection.identity NetworkConnection.clientOwnedObjects NetworkConnection.Send<T>(T, Int32) Mirror.NetworkConnection.ValidatePacketSize(ArraySegment<>, System.Int32) NetworkConnection.ToString() NetworkConnection.InvokeHandler<T>(T, Int32) Namespace : Mirror.Tests Assembly : Mirror.Tests.Common.dll Syntax public class FakeNetworkConnection : NetworkConnectionToClient Constructors | Improve this Doc View Source FakeNetworkConnection() Declaration public FakeNetworkConnection() Properties | Improve this Doc View Source address Declaration public override string address { get; } Property Value Type Description String Overrides NetworkConnectionToClient.address Methods | Improve this Doc View Source Disconnect() Declaration public override void Disconnect() Overrides NetworkConnectionToClient.Disconnect()"
  },
  "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_OnSpawn.SpawnFinishedState.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_OnSpawn.SpawnFinishedState.html",
    "title": "Enum ClientSceneTests_OnSpawn.SpawnFinishedState",
    "keywords": "Enum ClientSceneTests_OnSpawn.SpawnFinishedState Namespace : Mirror.Tests.ClientSceneTests Assembly : Mirror.Tests.dll Syntax public enum SpawnFinishedState : int Fields Name Description hasAuthority isLocalPlayer isSpawnFinished"
  },
  "api/Mirror.Tests.TestObject.html": {
    "href": "api/Mirror.Tests.TestObject.html",
    "title": "Class TestObject",
    "keywords": "Class TestObject Inheritance Object TestObject Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class TestObject : object Fields | Improve this Doc View Source id Declaration public int id Field Value Type Description Int32 | Improve this Doc View Source text Declaration public string text Field Value Type Description String"
  },
  "api/Mirror.Tests.RemoteAttrributeTest.CommandOverrideTest.html": {
    "href": "api/Mirror.Tests.RemoteAttrributeTest.CommandOverrideTest.html",
    "title": "Class CommandOverrideTest",
    "keywords": "Class CommandOverrideTest Inheritance Object RemoteTestBase CommandOverrideTest Inherited Members RemoteTestBase.spawned RemoteTestBase.Setup() RemoteTestBase.TearDown() RemoteTestBase.CreateHostObject<T>(Boolean) RemoteTestBase.ProcessMessages() Namespace : Mirror.Tests.RemoteAttrributeTest Assembly : Mirror.Tests.dll Syntax public class CommandOverrideTest : RemoteTestBase Methods | Improve this Doc View Source OverrideVirtualCommandIsCalled() Declaration public void OverrideVirtualCommandIsCalled() | Improve this Doc View Source OverrideVirtualWithBaseCallsAllMethodsThatCallBase() Declaration public void OverrideVirtualWithBaseCallsAllMethodsThatCallBase() | Improve this Doc View Source OverrideVirtualWithBaseCallsBothVirtualAndBase() Declaration public void OverrideVirtualWithBaseCallsBothVirtualAndBase() | Improve this Doc View Source VirtualCommandIsCalled() Declaration public void VirtualCommandIsCalled() | Improve this Doc View Source VirtualCommandWithNoOverrideIsCalled() Declaration public void VirtualCommandWithNoOverrideIsCalled()"
  },
  "api/Mirror.Cloud.ListServerService.ListServerBaseApi.html": {
    "href": "api/Mirror.Cloud.ListServerService.ListServerBaseApi.html",
    "title": "Class ListServerBaseApi",
    "keywords": "Class ListServerBaseApi Inheritance Object BaseApi ListServerBaseApi ListServerClientApi ListServerServerApi Inherited Members BaseApi.runner BaseApi.requestCreator Namespace : Mirror.Cloud.ListServerService Assembly : Mirror.Cloud.dll Syntax public abstract class ListServerBaseApi : BaseApi Constructors | Improve this Doc View Source ListServerBaseApi(ICoroutineRunner, IRequestCreator) Declaration protected ListServerBaseApi(ICoroutineRunner runner, IRequestCreator requestCreator) Parameters Type Name Description ICoroutineRunner runner IRequestCreator requestCreator"
  },
  "api/Mirror.Examples.NetworkRoom.NetworkRoomPlayerExt.html": {
    "href": "api/Mirror.Examples.NetworkRoom.NetworkRoomPlayerExt.html",
    "title": "Class NetworkRoomPlayerExt",
    "keywords": "Class NetworkRoomPlayerExt Inheritance Object NetworkBehaviour NetworkRoomPlayer NetworkRoomPlayerExt Inherited Members NetworkRoomPlayer.showRoomGUI NetworkRoomPlayer.readyToBegin NetworkRoomPlayer.index NetworkRoomPlayer.Start() NetworkRoomPlayer.OnDisable() NetworkRoomPlayer.CmdChangeReadyState(Boolean) NetworkRoomPlayer.IndexChanged(Int32, Int32) NetworkRoomPlayer.OnGUI() NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.NetworkRoom Assembly : Mirror.Examples.dll Syntax public class NetworkRoomPlayerExt : NetworkRoomPlayer Methods | Improve this Doc View Source OnClientEnterRoom() Declaration public override void OnClientEnterRoom() Overrides NetworkRoomPlayer.OnClientEnterRoom() | Improve this Doc View Source OnClientExitRoom() Declaration public override void OnClientExitRoom() Overrides NetworkRoomPlayer.OnClientExitRoom() | Improve this Doc View Source OnStartClient() Declaration public override void OnStartClient() Overrides NetworkBehaviour.OnStartClient() | Improve this Doc View Source ReadyStateChanged(Boolean, Boolean) Declaration public override void ReadyStateChanged(bool _, bool newReadyState) Parameters Type Name Description Boolean _ Boolean newReadyState Overrides NetworkRoomPlayer.ReadyStateChanged(Boolean, Boolean)"
  },
  "api/Mirror.Tests.EnumReadWriteTests.MyCustomEnum.html": {
    "href": "api/Mirror.Tests.EnumReadWriteTests.MyCustomEnum.html",
    "title": "Enum EnumReadWriteTests.MyCustomEnum",
    "keywords": "Enum EnumReadWriteTests.MyCustomEnum Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public enum MyCustomEnum : int Fields Name Description M N O P"
  },
  "api/Mirror.Weaver.TargetRpcProcessor.html": {
    "href": "api/Mirror.Weaver.TargetRpcProcessor.html",
    "title": "Class TargetRpcProcessor",
    "keywords": "Class TargetRpcProcessor Processes [TargetRpc] methods in NetworkBehaviour Inheritance Object TargetRpcProcessor Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class TargetRpcProcessor : object Methods | Improve this Doc View Source HasNetworkConnectionParameter(MethodDefinition) Declaration public static bool HasNetworkConnectionParameter(MethodDefinition md) Parameters Type Name Description MethodDefinition md Returns Type Description Boolean | Improve this Doc View Source ProcessTargetRpcCall(TypeDefinition, MethodDefinition, CustomAttribute) Declaration public static MethodDefinition ProcessTargetRpcCall(TypeDefinition td, MethodDefinition md, CustomAttribute targetRpcAttr) Parameters Type Name Description TypeDefinition td MethodDefinition md CustomAttribute targetRpcAttr Returns Type Description MethodDefinition | Improve this Doc View Source ProcessTargetRpcInvoke(TypeDefinition, MethodDefinition, MethodDefinition) Declaration public static MethodDefinition ProcessTargetRpcInvoke(TypeDefinition td, MethodDefinition md, MethodDefinition rpcCallFunc) Parameters Type Name Description TypeDefinition td MethodDefinition md MethodDefinition rpcCallFunc Returns Type Description MethodDefinition"
  },
  "api/Mirror.UnityEventNetworkConnection.html": {
    "href": "api/Mirror.UnityEventNetworkConnection.html",
    "title": "Class UnityEventNetworkConnection",
    "keywords": "Class UnityEventNetworkConnection Unity Event for the NetworkConnection Inheritance Object UnityEventNetworkConnection Namespace : Mirror Assembly : Mirror.dll Syntax public class UnityEventNetworkConnection : UnityEvent<NetworkConnection>"
  },
  "api/Mirror.Weaver.Writers.html": {
    "href": "api/Mirror.Weaver.Writers.html",
    "title": "Class Writers",
    "keywords": "Class Writers Inheritance Object Writers Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class Writers : object Methods | Improve this Doc View Source GetWriteFunc(TypeReference) Finds existing writer for type, if non exists trys to create one This method is recursive Declaration public static MethodReference GetWriteFunc(TypeReference variable) Parameters Type Name Description TypeReference variable Returns Type Description MethodReference Returns or null | Improve this Doc View Source Init() Declaration public static void Init() | Improve this Doc View Source Register(TypeReference, MethodReference) Declaration public static void Register(TypeReference dataType, MethodReference methodReference) Parameters Type Name Description TypeReference dataType MethodReference methodReference"
  },
  "api/Mirror.Tests.Performance.Runtime.html": {
    "href": "api/Mirror.Tests.Performance.Runtime.html",
    "title": "Namespace Mirror.Tests.Performance.Runtime",
    "keywords": "Namespace Mirror.Tests.Performance.Runtime Classes ULocalConnectionPerformance"
  },
  "api/Mirror.Tests.OnNetworkDestroyComponent.html": {
    "href": "api/Mirror.Tests.OnNetworkDestroyComponent.html",
    "title": "Class OnNetworkDestroyComponent",
    "keywords": "Class OnNetworkDestroyComponent Inheritance Object NetworkBehaviour OnNetworkDestroyComponent Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class OnNetworkDestroyComponent : NetworkBehaviour Fields | Improve this Doc View Source called Declaration public int called Field Value Type Description Int32 Methods | Improve this Doc View Source OnStopClient() Declaration public override void OnStopClient() Overrides NetworkBehaviour.OnStopClient()"
  },
  "api/Mirror.Examples.Chat.ChatNetworkManager.html": {
    "href": "api/Mirror.Examples.Chat.ChatNetworkManager.html",
    "title": "Class ChatNetworkManager",
    "keywords": "Class ChatNetworkManager Inheritance Object NetworkManager ChatNetworkManager Inherited Members NetworkManager.dontDestroyOnLoad NetworkManager.runInBackground NetworkManager.autoStartServerBuild NetworkManager.showDebugMessages NetworkManager.serverTickRate NetworkManager.offlineScene NetworkManager.onlineScene NetworkManager.transport NetworkManager.networkAddress NetworkManager.maxConnections NetworkManager.disconnectInactiveConnections NetworkManager.disconnectInactiveTimeout NetworkManager.authenticator NetworkManager.playerPrefab NetworkManager.autoCreatePlayer NetworkManager.playerSpawnMethod NetworkManager.spawnPrefabs NetworkManager.singleton NetworkManager.numPlayers NetworkManager.isNetworkActive NetworkManager.clientLoadedScene NetworkManager.mode NetworkManager.OnValidate() NetworkManager.Awake() NetworkManager.Start() NetworkManager.LateUpdate() NetworkManager.IsSceneActive(String) NetworkManager.StartServer() NetworkManager.StartClient() NetworkManager.StartClient(Uri) NetworkManager.StartHost() NetworkManager.StopHost() NetworkManager.StopServer() NetworkManager.StopClient() NetworkManager.OnApplicationQuit() NetworkManager.ConfigureServerFrameRate() NetworkManager.Shutdown() NetworkManager.OnDestroy() NetworkManager.networkSceneName NetworkManager.loadingSceneAsync NetworkManager.ServerChangeScene(String) NetworkManager.startPositionIndex NetworkManager.startPositions NetworkManager.RegisterStartPosition(Transform) NetworkManager.UnRegisterStartPosition(Transform) NetworkManager.GetStartPosition() NetworkManager.OnServerConnect(NetworkConnection) NetworkManager.OnServerDisconnect(NetworkConnection) NetworkManager.OnServerReady(NetworkConnection) NetworkManager.OnServerAddPlayer(NetworkConnection) NetworkManager.OnServerError(NetworkConnection, Int32) NetworkManager.OnServerChangeScene(String) NetworkManager.OnServerSceneChanged(String) NetworkManager.OnClientDisconnect(NetworkConnection) NetworkManager.OnClientError(NetworkConnection, Int32) NetworkManager.OnClientNotReady(NetworkConnection) NetworkManager.OnClientChangeScene(String, SceneOperation, Boolean) NetworkManager.OnClientSceneChanged(NetworkConnection) NetworkManager.OnStartHost() NetworkManager.OnStartClient() NetworkManager.OnStopServer() NetworkManager.OnStopClient() NetworkManager.OnStopHost() Namespace : Mirror.Examples.Chat Assembly : Mirror.Examples.dll Syntax public class ChatNetworkManager : NetworkManager Fields | Improve this Doc View Source chatWindow Declaration public ChatWindow chatWindow Field Value Type Description ChatWindow Properties | Improve this Doc View Source PlayerName Declaration public string PlayerName { get; set; } Property Value Type Description String Methods | Improve this Doc View Source OnClientConnect(NetworkConnection) Declaration public override void OnClientConnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Overrides NetworkManager.OnClientConnect(NetworkConnection) | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkManager.OnStartServer() | Improve this Doc View Source SetHostname(String) Declaration public void SetHostname(string hostname) Parameters Type Name Description String hostname"
  },
  "api/Mirror.Weaver.Tests.WeaverSyncVarTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverSyncVarTests.html",
    "title": "Class WeaverSyncVarTests",
    "keywords": "Class WeaverSyncVarTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverSyncVarTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverSyncVarTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source SyncVarsCantBeArray() Declaration public void SyncVarsCantBeArray() | Improve this Doc View Source SyncVarsDerivedNetworkBehaviour() Declaration public void SyncVarsDerivedNetworkBehaviour() | Improve this Doc View Source SyncVarsGenericParam() Declaration public void SyncVarsGenericParam() | Improve this Doc View Source SyncVarsInterface() Declaration public void SyncVarsInterface() | Improve this Doc View Source SyncVarsMoreThan63() Declaration public void SyncVarsMoreThan63() | Improve this Doc View Source SyncVarsStatic() Declaration public void SyncVarsStatic() | Improve this Doc View Source SyncVarsSyncList() Declaration public void SyncVarsSyncList() | Improve this Doc View Source SyncVarsUnityComponent() Declaration public void SyncVarsUnityComponent() | Improve this Doc View Source SyncVarsValid() Declaration public void SyncVarsValid()"
  },
  "api/Mirror.Cloud.ListServerService.ServerCollectionJson.html": {
    "href": "api/Mirror.Cloud.ListServerService.ServerCollectionJson.html",
    "title": "Struct ServerCollectionJson",
    "keywords": "Struct ServerCollectionJson Implements ICanBeJson Namespace : Mirror.Cloud.ListServerService Assembly : Mirror.Cloud.dll Syntax public struct ServerCollectionJson : ICanBeJson Fields | Improve this Doc View Source servers Declaration public ServerJson[] servers Field Value Type Description ServerJson [] Implements ICanBeJson"
  },
  "api/Mirror.Weaver.PropertySiteProcessor.html": {
    "href": "api/Mirror.Weaver.PropertySiteProcessor.html",
    "title": "Class PropertySiteProcessor",
    "keywords": "Class PropertySiteProcessor Inheritance Object PropertySiteProcessor Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class PropertySiteProcessor : object Methods | Improve this Doc View Source Process(ModuleDefinition) Declaration public static void Process(ModuleDefinition moduleDef) Parameters Type Name Description ModuleDefinition moduleDef"
  },
  "api/Mirror.Version.html": {
    "href": "api/Mirror.Version.html",
    "title": "Enum Version",
    "keywords": "Enum Version Namespace : Mirror Assembly : Mirror.dll Syntax public enum Version : int Fields Name Description Current"
  },
  "api/Mirror.Tests.html": {
    "href": "api/Mirror.Tests.html",
    "title": "Namespace Mirror.Tests",
    "keywords": "Namespace Mirror.Tests Classes BasicAuthenticatorTest ClientSceneTests_RegisterPrefabBase Used by both runtime and edittime tests ClientSceneTestsBase Used by both runtime and edittime tests CommandTestNetworkBehaviour CompressionFloatTest CompressionQuaternionTest CustomAttrributeTest CustomRWTest EnumReadWriteTests ExponentialMovingAverageTest FakeNetworkConnection FallbackTransportTest LocalConnectionBufferTest LocalConnectionTest LogFactoryTests MemoryTransport MessagePackerTest MiddlewareTransportTest MockQuest MockQuestReaderWriter MultiplexTest MyCustomEnumReadWrite MyMiddleware MyScriptableObject NetworkBehaviourDelegateComponent NetworkBehaviourGetSyncVarGameObjectComponent NetworkBehaviourGetSyncVarNetworkIdentityComponent NetworkBehaviourHookGuardTester NetworkBehaviourInitSyncObjectExposed NetworkBehaviourInitSyncObjectTester NetworkBehaviourSendCommandInternalComponent NetworkBehaviourSendRPCInternalComponent NetworkBehaviourSendTargetRPCInternalComponent NetworkBehaviourSetSyncVarGameObjectComponent NetworkBehaviourSetSyncVarNetworkIdentityComponent NetworkBehaviourTests NetworkClientTests NetworkIdentityTests NetworkManagerStopHostOnServerDisconnectTest NetworkManagerTest NetworkMatchCheckerTest NetworkReaderPoolTest NetworkReaderTest NetworkReaderWriterTest NetworkServerTest NetworkTransformChildTest NetworkTransformTest NetworkWriterPoolTest NetworkWriterTest OnNetworkDestroyComponent OnNetworkDestroyTestNetworkBehaviour OnStartClientComponent OnStartClientTestNetworkBehaviour OnStartLocalPlayerComponent PoolTests RpcTestNetworkBehaviour ScriptableObjectWriterTest SyncDictionaryTest SyncDictionaryTest.SyncDictionaryIntString SyncListClassTest SyncListStructTest SyncListTest SyncObjectTestMethods SyncSetTest SyncSetTest.SyncSetString SyncVarHookTest SyncVarTest TestObject Structs BasicAuthenticatorTest.AuthRequestMessage BasicAuthenticatorTest.AuthResponseMessage CustomRWTest.QuestMessage EnumReadWriteTests.ByteMessage EnumReadWriteTests.CustomMessage EnumReadWriteTests.ShortMessage MemoryTransport.Message MessagePackerTest.EmptyMessage ScriptableObjectWriterTest.ScriptableObjectMessage TestItem TestPlayer Enums ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload Allows TestCases to call different overloads for RegisterPrefab. Without this we would need duplicate tests for each overload EnumReadWriteTests.MyByteEnum EnumReadWriteTests.MyCustomEnum EnumReadWriteTests.MyShortEnum MemoryTransport.EventType"
  },
  "api/Mirror.Examples.Additive.ZoneHandler.html": {
    "href": "api/Mirror.Examples.Additive.ZoneHandler.html",
    "title": "Class ZoneHandler",
    "keywords": "Class ZoneHandler Inheritance Object ZoneHandler Namespace : Mirror.Examples.Additive Assembly : Mirror.Examples.dll Syntax public class ZoneHandler : MonoBehaviour Fields | Improve this Doc View Source subScene Declaration public string subScene Field Value Type Description String"
  },
  "api/Mirror.RemoteCalls.CmdDelegate.html": {
    "href": "api/Mirror.RemoteCalls.CmdDelegate.html",
    "title": "Delegate CmdDelegate",
    "keywords": "Delegate CmdDelegate Delegate for Command functions. Namespace : Mirror.RemoteCalls Assembly : Mirror.dll Syntax public delegate void CmdDelegate(NetworkBehaviour obj, NetworkReader reader, NetworkConnectionToClient senderConnection); Parameters Type Name Description NetworkBehaviour obj NetworkReader reader NetworkConnectionToClient senderConnection"
  },
  "api/Mirror.EditorScripts.Logging.LogLevelWindow.html": {
    "href": "api/Mirror.EditorScripts.Logging.LogLevelWindow.html",
    "title": "Class LogLevelWindow",
    "keywords": "Class LogLevelWindow Inheritance Object LogLevelWindow Namespace : Mirror.EditorScripts.Logging Assembly : Mirror.Editor.dll Syntax public class LogLevelWindow : EditorWindow Methods | Improve this Doc View Source ShowWindow() Declaration public static void ShowWindow()"
  },
  "api/Mirror.Cloud.IApiConnector.html": {
    "href": "api/Mirror.Cloud.IApiConnector.html",
    "title": "Interface IApiConnector",
    "keywords": "Interface IApiConnector Used to requests and responses from the mirror api Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public interface IApiConnector Properties | Improve this Doc View Source ListServer Declaration ListServer ListServer { get; } Property Value Type Description ListServer"
  },
  "api/Mirror.Tests.Runtime.NetworkIdentityTests.html": {
    "href": "api/Mirror.Tests.Runtime.NetworkIdentityTests.html",
    "title": "Class NetworkIdentityTests",
    "keywords": "Class NetworkIdentityTests Inheritance Object NetworkIdentityTests Namespace : Mirror.Tests.Runtime Assembly : Mirror.Tests.Runtime.dll Syntax public class NetworkIdentityTests : object Methods | Improve this Doc View Source OnDestroyIsServerTrue() Declaration public IEnumerator OnDestroyIsServerTrue() Returns Type Description IEnumerator | Improve this Doc View Source OnDestroyIsServerTrueWhenNetworkServerDestroyIsCalled() Declaration public IEnumerator OnDestroyIsServerTrueWhenNetworkServerDestroyIsCalled() Returns Type Description IEnumerator | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.NetworkReader.html": {
    "href": "api/Mirror.NetworkReader.html",
    "title": "Class NetworkReader",
    "keywords": "Class NetworkReader Binary stream Reader. Supports simple types, buffers, arrays, structs, and nested types Use GetReader(Byte[]) to reduce memory allocation Note: This class is intended to be extremely pedantic, and throw exceptions whenever stuff is going slightly wrong. The exceptions will be handled in NetworkServer/NetworkClient. Inheritance Object NetworkReader PooledNetworkReader Namespace : Mirror Assembly : Mirror.dll Syntax public class NetworkReader : object Constructors | Improve this Doc View Source NetworkReader(ArraySegment<Byte>) Declaration public NetworkReader(ArraySegment<byte> segment) Parameters Type Name Description ArraySegment < Byte > segment | Improve this Doc View Source NetworkReader(Byte[]) Declaration public NetworkReader(byte[] bytes) Parameters Type Name Description Byte [] bytes Fields | Improve this Doc View Source Position Next position to read from the buffer Declaration public int Position Field Value Type Description Int32 Properties | Improve this Doc View Source Length Total number of bytes to read from buffer Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Read<T>() Reads any data type that mirror supports Declaration public T Read<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ReadBlittable<T>() Read blittable type from buffer this is extremely fast, but only works for blittable types. Note: ReadBlittable assumes same endianness for server and client. All Unity 2018+ platforms are little endian. Declaration public T ReadBlittable<T>() where T : struct Returns Type Description T Type Parameters Name Description T Needs to be unmanaged, see unmanaged types Remarks See Blittable and Non-Blittable Types for more info. | Improve this Doc View Source ReadBytes(Byte[], Int32) read bytes into bytes Declaration public byte[] ReadBytes(byte[] bytes, int count) Parameters Type Name Description Byte [] bytes Int32 count Returns Type Description Byte [] bytes | Improve this Doc View Source ReadBytesSegment(Int32) Create Segment from current position Useful to parse payloads etc. without allocating Declaration public ArraySegment<byte> ReadBytesSegment(int count) Parameters Type Name Description Int32 count Returns Type Description ArraySegment < Byte > | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Information about reader: pos, len, buffer contents Extension Methods ReadWrite.ReadSomeData(NetworkReader) MockQuestReaderWriter.WriteQuest(NetworkReader) MyCustomEnumReadWrite.ReadMyCustomEnum(NetworkReader) NetworkReaderExtensions.ReadByte(NetworkReader) NetworkReaderExtensions.ReadSByte(NetworkReader) NetworkReaderExtensions.ReadChar(NetworkReader) NetworkReaderExtensions.ReadBoolean(NetworkReader) NetworkReaderExtensions.ReadInt16(NetworkReader) NetworkReaderExtensions.ReadUInt16(NetworkReader) NetworkReaderExtensions.ReadInt32(NetworkReader) NetworkReaderExtensions.ReadUInt32(NetworkReader) NetworkReaderExtensions.ReadInt64(NetworkReader) NetworkReaderExtensions.ReadUInt64(NetworkReader) NetworkReaderExtensions.ReadSingle(NetworkReader) NetworkReaderExtensions.ReadDouble(NetworkReader) NetworkReaderExtensions.ReadDecimal(NetworkReader) NetworkReaderExtensions.ReadString(NetworkReader) NetworkReaderExtensions.ReadBytesAndSize(NetworkReader) NetworkReaderExtensions.ReadBytesAndSizeSegment(NetworkReader) NetworkReaderExtensions.ReadVector2(NetworkReader) NetworkReaderExtensions.ReadVector3(NetworkReader) NetworkReaderExtensions.ReadVector4(NetworkReader) NetworkReaderExtensions.ReadVector2Int(NetworkReader) NetworkReaderExtensions.ReadVector3Int(NetworkReader) NetworkReaderExtensions.ReadColor(NetworkReader) NetworkReaderExtensions.ReadColor32(NetworkReader) NetworkReaderExtensions.ReadQuaternion(NetworkReader) NetworkReaderExtensions.ReadRect(NetworkReader) NetworkReaderExtensions.ReadPlane(NetworkReader) NetworkReaderExtensions.ReadRay(NetworkReader) NetworkReaderExtensions.ReadMatrix4x4(NetworkReader) NetworkReaderExtensions.ReadBytes(NetworkReader, Int32) NetworkReaderExtensions.ReadGuid(NetworkReader) NetworkReaderExtensions.ReadTransform(NetworkReader) NetworkReaderExtensions.ReadGameObject(NetworkReader) NetworkReaderExtensions.ReadNetworkIdentity(NetworkReader) NetworkReaderExtensions.ReadList<T>(NetworkReader) NetworkReaderExtensions.ReadArray<T>(NetworkReader) NetworkReaderExtensions.ReadUri(NetworkReader)"
  },
  "api/Mirror.Weaver.Tests.html": {
    "href": "api/Mirror.Weaver.Tests.html",
    "title": "Namespace Mirror.Weaver.Tests",
    "keywords": "Namespace Mirror.Weaver.Tests Classes WeaverAssembler WeaverClientRpcTests WeaverClientServerAttributeTests WeaverCommandTests WeaverGeneralTests WeaverGeneratedReaderWriterAnotherAssemblyTests WeaverGeneratedReaderWriterTests WeaverMessageTests WeaverMonoBehaviourTests WeaverNetworkBehaviourTests WeaverSyncDictionaryTests WeaverSyncListTests WeaverSyncSetTests WeaverSyncVarHookTests WeaverSyncVarTests WeaverTargetRpcTests WeaverTests WeaverTestsBuildFromTestName"
  },
  "api/Mirror.Tests.NetworkReaderTest.html": {
    "href": "api/Mirror.Tests.NetworkReaderTest.html",
    "title": "Class NetworkReaderTest",
    "keywords": "Class NetworkReaderTest Inheritance Object NetworkReaderTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkReaderTest : object Methods | Improve this Doc View Source ReadBytesCountTooBigTest() Declaration public void ReadBytesCountTooBigTest()"
  },
  "api/Telepathy.Message.html": {
    "href": "api/Telepathy.Message.html",
    "title": "Struct Message",
    "keywords": "Struct Message Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Telepathy Assembly : Telepathy.dll Syntax public struct Message Constructors | Improve this Doc View Source Message(Int32, EventType, Byte[]) Declaration public Message(int connectionId, EventType eventType, byte[] data) Parameters Type Name Description Int32 connectionId EventType eventType Byte [] data Fields | Improve this Doc View Source connectionId Declaration public readonly int connectionId Field Value Type Description Int32 | Improve this Doc View Source data Declaration public readonly byte[] data Field Value Type Description Byte [] | Improve this Doc View Source eventType Declaration public readonly EventType eventType Field Value Type Description EventType"
  },
  "api/Mirror.NetworkBehaviourInspector.html": {
    "href": "api/Mirror.NetworkBehaviourInspector.html",
    "title": "Class NetworkBehaviourInspector",
    "keywords": "Class NetworkBehaviourInspector Inheritance Object NetworkBehaviourInspector Namespace : Mirror Assembly : Mirror.Editor.dll Syntax public class NetworkBehaviourInspector : Editor Fields | Improve this Doc View Source syncVarNames List of all visible syncVars in target class Declaration protected List<string> syncVarNames Field Value Type Description List < String > Methods | Improve this Doc View Source DrawDefaultSyncLists() Draws Sync Objects that are IEnumerable Declaration protected void DrawDefaultSyncLists() | Improve this Doc View Source DrawDefaultSyncSettings() Draws SyncSettings if the NetworkBehaviour has anything to sync Declaration protected void DrawDefaultSyncSettings() | Improve this Doc View Source OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Mirror.Examples.Additive.ShootingTankBehaviour.html": {
    "href": "api/Mirror.Examples.Additive.ShootingTankBehaviour.html",
    "title": "Class ShootingTankBehaviour",
    "keywords": "Class ShootingTankBehaviour Inheritance Object NetworkBehaviour ShootingTankBehaviour Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.Additive Assembly : Mirror.Examples.dll Syntax public class ShootingTankBehaviour : NetworkBehaviour Fields | Improve this Doc View Source rotation Declaration public Quaternion rotation Field Value Type Description Quaternion | Improve this Doc View Source turnSpeed Declaration public float turnSpeed Field Value Type Description Single"
  },
  "api/Mirror.NetworkRoomManager.PendingPlayer.html": {
    "href": "api/Mirror.NetworkRoomManager.PendingPlayer.html",
    "title": "Struct NetworkRoomManager.PendingPlayer",
    "keywords": "Struct NetworkRoomManager.PendingPlayer Namespace : Mirror Assembly : Mirror.Components.dll Syntax public struct PendingPlayer Fields | Improve this Doc View Source conn Declaration public NetworkConnection conn Field Value Type Description NetworkConnection | Improve this Doc View Source roomPlayer Declaration public GameObject roomPlayer Field Value Type Description GameObject"
  },
  "api/Mirror.Tests.RemoteAttrributeTest.html": {
    "href": "api/Mirror.Tests.RemoteAttrributeTest.html",
    "title": "Namespace Mirror.Tests.RemoteAttrributeTest",
    "keywords": "Namespace Mirror.Tests.RemoteAttrributeTest Classes ClientRpcOverrideTest ClientRpcTest CommandOverrideTest CommandTest RemoteTestBase TargetRpcOverrideTest TargetRpcTest"
  },
  "api/Mirror.Tests.Generated.Attributes.AttributeBehaviour_ClassWithNoConstructor.html": {
    "href": "api/Mirror.Tests.Generated.Attributes.AttributeBehaviour_ClassWithNoConstructor.html",
    "title": "Class AttributeBehaviour_ClassWithNoConstructor",
    "keywords": "Class AttributeBehaviour_ClassWithNoConstructor Inheritance Object ClassWithNoConstructor AttributeBehaviour_ClassWithNoConstructor Inherited Members ClassWithNoConstructor.a Namespace : Mirror.Tests.Generated.Attributes Assembly : Mirror.Tests.dll Syntax public class AttributeBehaviour_ClassWithNoConstructor : ClassWithNoConstructor Fields | Improve this Doc View Source Expected_bool Declaration public static readonly bool Expected_bool Field Value Type Description Boolean | Improve this Doc View Source Expected_byte Declaration public static readonly byte Expected_byte Field Value Type Description Byte | Improve this Doc View Source Expected_char Declaration public static readonly char Expected_char Field Value Type Description Char | Improve this Doc View Source Expected_ClassWithConstructor Declaration public static readonly ClassWithConstructor Expected_ClassWithConstructor Field Value Type Description ClassWithConstructor | Improve this Doc View Source Expected_ClassWithNoConstructor Declaration public static readonly ClassWithNoConstructor Expected_ClassWithNoConstructor Field Value Type Description ClassWithNoConstructor | Improve this Doc View Source Expected_double Declaration public static readonly double Expected_double Field Value Type Description Double | Improve this Doc View Source Expected_float Declaration public static readonly float Expected_float Field Value Type Description Single | Improve this Doc View Source Expected_int Declaration public static readonly int Expected_int Field Value Type Description Int32 | Improve this Doc View Source Expected_long Declaration public static readonly long Expected_long Field Value Type Description Int64 | Improve this Doc View Source Expected_ulong Declaration public static readonly ulong Expected_ulong Field Value Type Description UInt64 | Improve this Doc View Source Expected_Vector3 Declaration public static readonly Vector3 Expected_Vector3 Field Value Type Description Vector3 Methods | Improve this Doc View Source Client_bool_Function() Declaration public bool Client_bool_Function() Returns Type Description Boolean | Improve this Doc View Source Client_bool_out_Function(out Boolean) Declaration public void Client_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source Client_byte_Function() Declaration public byte Client_byte_Function() Returns Type Description Byte | Improve this Doc View Source Client_byte_out_Function(out Byte) Declaration public void Client_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source Client_char_Function() Declaration public char Client_char_Function() Returns Type Description Char | Improve this Doc View Source Client_char_out_Function(out Char) Declaration public void Client_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source Client_ClassWithConstructor_Function() Declaration public ClassWithConstructor Client_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source Client_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void Client_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source Client_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor Client_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source Client_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void Client_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source Client_double_Function() Declaration public double Client_double_Function() Returns Type Description Double | Improve this Doc View Source Client_double_out_Function(out Double) Declaration public void Client_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source Client_float_Function() Declaration public float Client_float_Function() Returns Type Description Single | Improve this Doc View Source Client_float_out_Function(out Single) Declaration public void Client_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source Client_int_Function() Declaration public int Client_int_Function() Returns Type Description Int32 | Improve this Doc View Source Client_int_out_Function(out Int32) Declaration public void Client_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source Client_long_Function() Declaration public long Client_long_Function() Returns Type Description Int64 | Improve this Doc View Source Client_long_out_Function(out Int64) Declaration public void Client_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source Client_ulong_Function() Declaration public ulong Client_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source Client_ulong_out_Function(out UInt64) Declaration public void Client_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source Client_Vector3_Function() Declaration public Vector3 Client_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source Client_Vector3_out_Function(out Vector3) Declaration public void Client_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value | Improve this Doc View Source ClientCallback_bool_Function() Declaration public bool ClientCallback_bool_Function() Returns Type Description Boolean | Improve this Doc View Source ClientCallback_bool_out_Function(out Boolean) Declaration public void ClientCallback_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source ClientCallback_byte_Function() Declaration public byte ClientCallback_byte_Function() Returns Type Description Byte | Improve this Doc View Source ClientCallback_byte_out_Function(out Byte) Declaration public void ClientCallback_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source ClientCallback_char_Function() Declaration public char ClientCallback_char_Function() Returns Type Description Char | Improve this Doc View Source ClientCallback_char_out_Function(out Char) Declaration public void ClientCallback_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source ClientCallback_ClassWithConstructor_Function() Declaration public ClassWithConstructor ClientCallback_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source ClientCallback_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void ClientCallback_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor ClientCallback_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void ClientCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source ClientCallback_double_Function() Declaration public double ClientCallback_double_Function() Returns Type Description Double | Improve this Doc View Source ClientCallback_double_out_Function(out Double) Declaration public void ClientCallback_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source ClientCallback_float_Function() Declaration public float ClientCallback_float_Function() Returns Type Description Single | Improve this Doc View Source ClientCallback_float_out_Function(out Single) Declaration public void ClientCallback_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source ClientCallback_int_Function() Declaration public int ClientCallback_int_Function() Returns Type Description Int32 | Improve this Doc View Source ClientCallback_int_out_Function(out Int32) Declaration public void ClientCallback_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source ClientCallback_long_Function() Declaration public long ClientCallback_long_Function() Returns Type Description Int64 | Improve this Doc View Source ClientCallback_long_out_Function(out Int64) Declaration public void ClientCallback_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source ClientCallback_ulong_Function() Declaration public ulong ClientCallback_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source ClientCallback_ulong_out_Function(out UInt64) Declaration public void ClientCallback_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source ClientCallback_Vector3_Function() Declaration public Vector3 ClientCallback_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source ClientCallback_Vector3_out_Function(out Vector3) Declaration public void ClientCallback_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value | Improve this Doc View Source Server_bool_Function() Declaration public bool Server_bool_Function() Returns Type Description Boolean | Improve this Doc View Source Server_bool_out_Function(out Boolean) Declaration public void Server_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source Server_byte_Function() Declaration public byte Server_byte_Function() Returns Type Description Byte | Improve this Doc View Source Server_byte_out_Function(out Byte) Declaration public void Server_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source Server_char_Function() Declaration public char Server_char_Function() Returns Type Description Char | Improve this Doc View Source Server_char_out_Function(out Char) Declaration public void Server_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source Server_ClassWithConstructor_Function() Declaration public ClassWithConstructor Server_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source Server_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void Server_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source Server_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor Server_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source Server_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void Server_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source Server_double_Function() Declaration public double Server_double_Function() Returns Type Description Double | Improve this Doc View Source Server_double_out_Function(out Double) Declaration public void Server_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source Server_float_Function() Declaration public float Server_float_Function() Returns Type Description Single | Improve this Doc View Source Server_float_out_Function(out Single) Declaration public void Server_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source Server_int_Function() Declaration public int Server_int_Function() Returns Type Description Int32 | Improve this Doc View Source Server_int_out_Function(out Int32) Declaration public void Server_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source Server_long_Function() Declaration public long Server_long_Function() Returns Type Description Int64 | Improve this Doc View Source Server_long_out_Function(out Int64) Declaration public void Server_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source Server_ulong_Function() Declaration public ulong Server_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source Server_ulong_out_Function(out UInt64) Declaration public void Server_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source Server_Vector3_Function() Declaration public Vector3 Server_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source Server_Vector3_out_Function(out Vector3) Declaration public void Server_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value | Improve this Doc View Source ServerCallback_bool_Function() Declaration public bool ServerCallback_bool_Function() Returns Type Description Boolean | Improve this Doc View Source ServerCallback_bool_out_Function(out Boolean) Declaration public void ServerCallback_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source ServerCallback_byte_Function() Declaration public byte ServerCallback_byte_Function() Returns Type Description Byte | Improve this Doc View Source ServerCallback_byte_out_Function(out Byte) Declaration public void ServerCallback_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source ServerCallback_char_Function() Declaration public char ServerCallback_char_Function() Returns Type Description Char | Improve this Doc View Source ServerCallback_char_out_Function(out Char) Declaration public void ServerCallback_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source ServerCallback_ClassWithConstructor_Function() Declaration public ClassWithConstructor ServerCallback_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source ServerCallback_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void ServerCallback_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor ServerCallback_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void ServerCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source ServerCallback_double_Function() Declaration public double ServerCallback_double_Function() Returns Type Description Double | Improve this Doc View Source ServerCallback_double_out_Function(out Double) Declaration public void ServerCallback_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source ServerCallback_float_Function() Declaration public float ServerCallback_float_Function() Returns Type Description Single | Improve this Doc View Source ServerCallback_float_out_Function(out Single) Declaration public void ServerCallback_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source ServerCallback_int_Function() Declaration public int ServerCallback_int_Function() Returns Type Description Int32 | Improve this Doc View Source ServerCallback_int_out_Function(out Int32) Declaration public void ServerCallback_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source ServerCallback_long_Function() Declaration public long ServerCallback_long_Function() Returns Type Description Int64 | Improve this Doc View Source ServerCallback_long_out_Function(out Int64) Declaration public void ServerCallback_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source ServerCallback_ulong_Function() Declaration public ulong ServerCallback_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source ServerCallback_ulong_out_Function(out UInt64) Declaration public void ServerCallback_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source ServerCallback_Vector3_Function() Declaration public Vector3 ServerCallback_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source ServerCallback_Vector3_out_Function(out Vector3) Declaration public void ServerCallback_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value"
  },
  "api/Mirror.SimpleWeb.ReadHelper.html": {
    "href": "api/Mirror.SimpleWeb.ReadHelper.html",
    "title": "Class ReadHelper",
    "keywords": "Class ReadHelper Inheritance Object ReadHelper Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public static class ReadHelper : object Methods | Improve this Doc View Source Read(Stream, Byte[], Int32, Int32) Reads exactly length from stream Declaration public static int Read(Stream stream, byte[] outBuffer, int outOffset, int length) Parameters Type Name Description Stream stream Byte [] outBuffer Int32 outOffset Int32 length Returns Type Description Int32 outOffset + length Exceptions Type Condition ReadHelperException | Improve this Doc View Source SafeReadTillMatch(Stream, Byte[], Int32, Int32, Byte[]) Declaration public static int? SafeReadTillMatch(Stream stream, byte[] outBuffer, int outOffset, int maxLength, byte[] endOfHeader) Parameters Type Name Description Stream stream Byte [] outBuffer Int32 outOffset Int32 maxLength Byte [] endOfHeader Returns Type Description Nullable < Int32 > | Improve this Doc View Source TryRead(Stream, Byte[], Int32, Int32) Reads and returns results. This should never throw an exception Declaration public static bool TryRead(Stream stream, byte[] outBuffer, int outOffset, int length) Parameters Type Name Description Stream stream Byte [] outBuffer Int32 outOffset Int32 length Returns Type Description Boolean"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.Array_FloatStringStruct_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.Array_FloatStringStruct_Test.html",
    "title": "Class Array_FloatStringStruct_Test",
    "keywords": "Class Array_FloatStringStruct_Test Inheritance Object Array_FloatStringStruct_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class Array_FloatStringStruct_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.NetworkStartPosition.html": {
    "href": "api/Mirror.NetworkStartPosition.html",
    "title": "Class NetworkStartPosition",
    "keywords": "Class NetworkStartPosition This component is used to make a gameObject a starting position for spawning player objects in multiplayer games. This object's transform will be automatically registered and unregistered with the NetworkManager as a starting position. Inheritance Object NetworkStartPosition Namespace : Mirror Assembly : Mirror.dll Syntax public class NetworkStartPosition : MonoBehaviour Methods | Improve this Doc View Source Awake() Declaration public void Awake() | Improve this Doc View Source OnDestroy() Declaration public void OnDestroy()"
  },
  "api/Mirror.Examples.NetworkRoom.Reward.html": {
    "href": "api/Mirror.Examples.NetworkRoom.Reward.html",
    "title": "Class Reward",
    "keywords": "Class Reward Inheritance Object NetworkBehaviour Reward Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.NetworkRoom Assembly : Mirror.Examples.dll Syntax public class Reward : NetworkBehaviour Fields | Improve this Doc View Source available Declaration public bool available Field Value Type Description Boolean | Improve this Doc View Source randomColor Declaration public RandomColor randomColor Field Value Type Description RandomColor Methods | Improve this Doc View Source ClaimPrize(GameObject) Declaration public void ClaimPrize(GameObject player) Parameters Type Name Description GameObject player"
  },
  "api/Mirror.Tests.MiddlewareTransportTest.html": {
    "href": "api/Mirror.Tests.MiddlewareTransportTest.html",
    "title": "Class MiddlewareTransportTest",
    "keywords": "Class MiddlewareTransportTest Inheritance Object MiddlewareTransportTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class MiddlewareTransportTest : object Methods | Improve this Doc View Source Setup() Declaration public void Setup() | Improve this Doc View Source TearDown() Declaration public void TearDown() | Improve this Doc View Source TestAvailable(Boolean) Declaration public void TestAvailable(bool available) Parameters Type Name Description Boolean available | Improve this Doc View Source TestClientConnect(String) Declaration public void TestClientConnect(string address) Parameters Type Name Description String address | Improve this Doc View Source TestClientConnected(Boolean) Declaration public void TestClientConnected(bool connected) Parameters Type Name Description Boolean connected | Improve this Doc View Source TestClientConnectedCallback() Declaration public void TestClientConnectedCallback() | Improve this Doc View Source TestClientDataReceivedCallback(Int32) Declaration public void TestClientDataReceivedCallback(int channel) Parameters Type Name Description Int32 channel | Improve this Doc View Source TestClientDisconnect() Declaration public void TestClientDisconnect() | Improve this Doc View Source TestClientDisconnectedCallback() Declaration public void TestClientDisconnectedCallback() | Improve this Doc View Source TestClientErrorCallback() Declaration public void TestClientErrorCallback() | Improve this Doc View Source TestClientSend(Int32) Declaration public void TestClientSend(int channel) Parameters Type Name Description Int32 channel | Improve this Doc View Source TestGetMaxPacketSize(Int32, Int32) Declaration public void TestGetMaxPacketSize(int channel, int packageSize) Parameters Type Name Description Int32 channel Int32 packageSize | Improve this Doc View Source TestServerActive(Boolean) Declaration public void TestServerActive(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source TestServerConnectedCallback(Int32) Declaration public void TestServerConnectedCallback(int id) Parameters Type Name Description Int32 id | Improve this Doc View Source TestServerDataReceivedCallback(Int32, Int32) Declaration public void TestServerDataReceivedCallback(int id, int channel) Parameters Type Name Description Int32 id Int32 channel | Improve this Doc View Source TestServerDisconnect(Int32, Boolean) Declaration public void TestServerDisconnect(int id, bool result) Parameters Type Name Description Int32 id Boolean result | Improve this Doc View Source TestServerDisconnectedCallback(Int32) Declaration public void TestServerDisconnectedCallback(int id) Parameters Type Name Description Int32 id | Improve this Doc View Source TestServerErrorCallback(Int32) Declaration public void TestServerErrorCallback(int id) Parameters Type Name Description Int32 id | Improve this Doc View Source TestServerGetClientAddress(Int32, String) Declaration public void TestServerGetClientAddress(int id, string result) Parameters Type Name Description Int32 id String result | Improve this Doc View Source TestServerSend(Int32, Int32) Declaration public void TestServerSend(int id, int channel) Parameters Type Name Description Int32 id Int32 channel | Improve this Doc View Source TestServerStart() Declaration public void TestServerStart() | Improve this Doc View Source TestServerStop() Declaration public void TestServerStop() | Improve this Doc View Source TestServerUri(String) Declaration public void TestServerUri(string address) Parameters Type Name Description String address | Improve this Doc View Source TestShutdown() Declaration public void TestShutdown()"
  },
  "api/Mirror.NetworkPongMessage.html": {
    "href": "api/Mirror.NetworkPongMessage.html",
    "title": "Struct NetworkPongMessage",
    "keywords": "Struct NetworkPongMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct NetworkPongMessage : NetworkMessage Fields | Improve this Doc View Source clientTime Declaration public double clientTime Field Value Type Description Double | Improve this Doc View Source serverTime Declaration public double serverTime Field Value Type Description Double Implements NetworkMessage"
  },
  "api/Telepathy.NetworkStreamExtensions.html": {
    "href": "api/Telepathy.NetworkStreamExtensions.html",
    "title": "Class NetworkStreamExtensions",
    "keywords": "Class NetworkStreamExtensions Inheritance Object NetworkStreamExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Telepathy Assembly : Telepathy.dll Syntax public static class NetworkStreamExtensions Methods | Improve this Doc View Source ReadExactly(NetworkStream, Byte[], Int32) Declaration public static bool ReadExactly(this NetworkStream stream, byte[] buffer, int amount) Parameters Type Name Description NetworkStream stream Byte [] buffer Int32 amount Returns Type Description Boolean | Improve this Doc View Source ReadSafely(NetworkStream, Byte[], Int32, Int32) Declaration public static int ReadSafely(this NetworkStream stream, byte[] buffer, int offset, int size) Parameters Type Name Description NetworkStream stream Byte [] buffer Int32 offset Int32 size Returns Type Description Int32"
  },
  "api/Mirror.Tests.ScriptableObjectWriterTest.html": {
    "href": "api/Mirror.Tests.ScriptableObjectWriterTest.html",
    "title": "Class ScriptableObjectWriterTest",
    "keywords": "Class ScriptableObjectWriterTest Inheritance Object ScriptableObjectWriterTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class ScriptableObjectWriterTest : object Methods | Improve this Doc View Source TestWriteScriptableObject() Declaration public void TestWriteScriptableObject()"
  },
  "api/Mirror.Tests.RemoteAttrributeTest.ClientRpcTest.html": {
    "href": "api/Mirror.Tests.RemoteAttrributeTest.ClientRpcTest.html",
    "title": "Class ClientRpcTest",
    "keywords": "Class ClientRpcTest Inheritance Object RemoteTestBase ClientRpcTest Inherited Members RemoteTestBase.spawned RemoteTestBase.Setup() RemoteTestBase.TearDown() RemoteTestBase.CreateHostObject<T>(Boolean) RemoteTestBase.ProcessMessages() Namespace : Mirror.Tests.RemoteAttrributeTest Assembly : Mirror.Tests.dll Syntax public class ClientRpcTest : RemoteTestBase Methods | Improve this Doc View Source RpcIsCalled() Declaration public void RpcIsCalled() | Improve this Doc View Source RpcIsCalledForNotOwnerd() Declaration public void RpcIsCalledForNotOwnerd() | Improve this Doc View Source RpcNotCalledForOwnerd() Declaration public void RpcNotCalledForOwnerd()"
  },
  "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_UnregisterPrefab.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_UnregisterPrefab.html",
    "title": "Class ClientSceneTests_UnregisterPrefab",
    "keywords": "Class ClientSceneTests_UnregisterPrefab Inheritance Object ClientSceneTestsBase ClientSceneTests_UnregisterPrefab Inherited Members ClientSceneTestsBase.ValidPrefabAssetGuid ClientSceneTestsBase.PrefabWithChildrenAssetGuid ClientSceneTestsBase.InvalidPrefabAssetGuid ClientSceneTestsBase.AnotherGuidString ClientSceneTestsBase.validPrefab ClientSceneTestsBase.validPrefabNetworkIdentity ClientSceneTestsBase.prefabWithChildren ClientSceneTestsBase.invalidPrefab ClientSceneTestsBase.validPrefabGuid ClientSceneTestsBase.anotherGuid ClientSceneTestsBase._createdObjects ClientSceneTestsBase.prefabs ClientSceneTestsBase.spawnHandlers ClientSceneTestsBase.unspawnHandlers ClientSceneTestsBase.spawnableObjects ClientSceneTestsBase.OneTimeSetUp() ClientSceneTestsBase.TearDown() ClientSceneTestsBase.OneTimeTearDown() Namespace : Mirror.Tests.ClientSceneTests Assembly : Mirror.Tests.dll Syntax public class ClientSceneTests_UnregisterPrefab : ClientSceneTestsBase Methods | Improve this Doc View Source ErrorWhenPrefabHasNoNetworkIdentity() Declaration public void ErrorWhenPrefabHasNoNetworkIdentity() | Improve this Doc View Source ErrorWhenPrefabIsNull() Declaration public void ErrorWhenPrefabIsNull() | Improve this Doc View Source RemovesPrefabFromDictionary() Declaration public void RemovesPrefabFromDictionary() | Improve this Doc View Source RemovesSpawnHandlerFromDictionary() Declaration public void RemovesSpawnHandlerFromDictionary() | Improve this Doc View Source RemovesUnSpawnHandlerFromDictionary() Declaration public void RemovesUnSpawnHandlerFromDictionary()"
  },
  "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_OnSpawn.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_OnSpawn.html",
    "title": "Class ClientSceneTests_OnSpawn",
    "keywords": "Class ClientSceneTests_OnSpawn Inheritance Object ClientSceneTestsBase ClientSceneTests_OnSpawn Inherited Members ClientSceneTestsBase.ValidPrefabAssetGuid ClientSceneTestsBase.PrefabWithChildrenAssetGuid ClientSceneTestsBase.InvalidPrefabAssetGuid ClientSceneTestsBase.AnotherGuidString ClientSceneTestsBase.validPrefab ClientSceneTestsBase.validPrefabNetworkIdentity ClientSceneTestsBase.prefabWithChildren ClientSceneTestsBase.invalidPrefab ClientSceneTestsBase.validPrefabGuid ClientSceneTestsBase.anotherGuid ClientSceneTestsBase._createdObjects ClientSceneTestsBase.prefabs ClientSceneTestsBase.spawnHandlers ClientSceneTestsBase.unspawnHandlers ClientSceneTestsBase.spawnableObjects ClientSceneTestsBase.OneTimeSetUp() ClientSceneTestsBase.OneTimeTearDown() Namespace : Mirror.Tests.ClientSceneTests Assembly : Mirror.Tests.dll Syntax public class ClientSceneTests_OnSpawn : ClientSceneTestsBase Methods | Improve this Doc View Source ApplyPayload_AppliesAuthority(Boolean) Declaration public void ApplyPayload_AppliesAuthority(bool isOwner) Parameters Type Name Description Boolean isOwner | Improve this Doc View Source ApplyPayload_AppliesLocalValuesToTransform() Declaration public void ApplyPayload_AppliesLocalValuesToTransform() | Improve this Doc View Source ApplyPayload_AppliesTransform() Declaration public void ApplyPayload_AppliesTransform() | Improve this Doc View Source ApplyPayload_DoesNotSetAssetIdToEmpty() Declaration public void ApplyPayload_DoesNotSetAssetIdToEmpty() | Improve this Doc View Source ApplyPayload_EnablesObject(Boolean) Declaration public void ApplyPayload_EnablesObject(bool startActive) Parameters Type Name Description Boolean startActive | Improve this Doc View Source ApplyPayload_isSpawnFinished(ClientSceneTests_OnSpawn.SpawnFinishedState) Declaration public void ApplyPayload_isSpawnFinished(ClientSceneTests_OnSpawn.SpawnFinishedState flag) Parameters Type Name Description ClientSceneTests_OnSpawn.SpawnFinishedState flag | Improve this Doc View Source ApplyPayload_LocalPlayerAddsIdentityToConnection() Declaration public void ApplyPayload_LocalPlayerAddsIdentityToConnection() | Improve this Doc View Source ApplyPayload_LocalPlayerWarningWhenNoReadyConnection() Declaration public void ApplyPayload_LocalPlayerWarningWhenNoReadyConnection() | Improve this Doc View Source ApplyPayload_SendsDataToNetworkBehaviourDeserialize() Declaration public void ApplyPayload_SendsDataToNetworkBehaviourDeserialize() | Improve this Doc View Source ApplyPayload_SetsAssetId() Declaration public void ApplyPayload_SetsAssetId() | Improve this Doc View Source FindOrSpawnObject_ErrorWhenNoExistingAndAssetIdAndSceneIdAreBothEmpty() Declaration public void FindOrSpawnObject_ErrorWhenNoExistingAndAssetIdAndSceneIdAreBothEmpty() | Improve this Doc View Source FindOrSpawnObject_ErrorWhenPrefabInNullInDictionary() Declaration public void FindOrSpawnObject_ErrorWhenPrefabInNullInDictionary() | Improve this Doc View Source FindOrSpawnObject_ErrorWhenSceneIdIsNotInSpawnableObjectsDictionary() Declaration public void FindOrSpawnObject_ErrorWhenSceneIdIsNotInSpawnableObjectsDictionary() | Improve this Doc View Source FindOrSpawnObject_ErrorWhenSpawnHanlderReturnsNull() Declaration public void FindOrSpawnObject_ErrorWhenSpawnHanlderReturnsNull() | Improve this Doc View Source FindOrSpawnObject_ErrorWhenSpawnHanlderReturnsWithoutNetworkIdentity() Declaration public void FindOrSpawnObject_ErrorWhenSpawnHanlderReturnsWithoutNetworkIdentity() | Improve this Doc View Source FindOrSpawnObject_FindExistingObject() Declaration public void FindOrSpawnObject_FindExistingObject() | Improve this Doc View Source FindOrSpawnObject_SpawnHandlerCalledFromDictionary() Declaration public void FindOrSpawnObject_SpawnHandlerCalledFromDictionary() | Improve this Doc View Source FindOrSpawnObject_SpawnsFromPrefabDictionary() Declaration public void FindOrSpawnObject_SpawnsFromPrefabDictionary() | Improve this Doc View Source FindOrSpawnObject_SpawnsFromPrefabIfBothPrefabAndHandlerExists() Declaration public void FindOrSpawnObject_SpawnsFromPrefabIfBothPrefabAndHandlerExists() | Improve this Doc View Source FindOrSpawnObject_SpawnsUsingSceneIdInsteadOfAssetId() Declaration public void FindOrSpawnObject_SpawnsUsingSceneIdInsteadOfAssetId() | Improve this Doc View Source FindOrSpawnObject_UsesSceneIdToSpawnFromSpawnableObjectsDictionary() Declaration public void FindOrSpawnObject_UsesSceneIdToSpawnFromSpawnableObjectsDictionary() | Improve this Doc View Source OnSpawn_GiveNoExtraErrorsWhenPrefabIsntSpawned() Declaration public void OnSpawn_GiveNoExtraErrorsWhenPrefabIsntSpawned() | Improve this Doc View Source OnSpawn_SpawnsAndAppliesPayload() Declaration public void OnSpawn_SpawnsAndAppliesPayload() | Improve this Doc View Source TearDown() Declaration public override void TearDown() Overrides ClientSceneTestsBase.TearDown()"
  },
  "api/Mirror.SyncList-1.Operation.html": {
    "href": "api/Mirror.SyncList-1.Operation.html",
    "title": "Enum SyncList<T>.Operation",
    "keywords": "Enum SyncList<T>.Operation Namespace : Mirror Assembly : Mirror.dll Syntax public enum Operation : byte Fields Name Description OP_ADD OP_CLEAR OP_INSERT OP_REMOVEAT OP_SET"
  },
  "api/Mirror.Weaver.Tests.WeaverMonoBehaviourTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverMonoBehaviourTests.html",
    "title": "Class WeaverMonoBehaviourTests",
    "keywords": "Class WeaverMonoBehaviourTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverMonoBehaviourTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverMonoBehaviourTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source MonoBehaviourClient() Declaration public void MonoBehaviourClient() | Improve this Doc View Source MonoBehaviourClientCallback() Declaration public void MonoBehaviourClientCallback() | Improve this Doc View Source MonoBehaviourClientRpc() Declaration public void MonoBehaviourClientRpc() | Improve this Doc View Source MonoBehaviourCommand() Declaration public void MonoBehaviourCommand() | Improve this Doc View Source MonoBehaviourServer() Declaration public void MonoBehaviourServer() | Improve this Doc View Source MonoBehaviourServerCallback() Declaration public void MonoBehaviourServerCallback() | Improve this Doc View Source MonoBehaviourSyncList() Declaration public void MonoBehaviourSyncList() | Improve this Doc View Source MonoBehaviourSyncVar() Declaration public void MonoBehaviourSyncVar() | Improve this Doc View Source MonoBehaviourTargetRpc() Declaration public void MonoBehaviourTargetRpc() | Improve this Doc View Source MonoBehaviourValid() Declaration public void MonoBehaviourValid()"
  },
  "api/Mirror.ErrorMessage.html": {
    "href": "api/Mirror.ErrorMessage.html",
    "title": "Struct ErrorMessage",
    "keywords": "Struct ErrorMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct ErrorMessage : NetworkMessage Constructors | Improve this Doc View Source ErrorMessage(Byte) Declaration public ErrorMessage(byte v) Parameters Type Name Description Byte v Fields | Improve this Doc View Source value Declaration public byte value Field Value Type Description Byte Implements NetworkMessage"
  },
  "api/Mirror.SyncList-1.html": {
    "href": "api/Mirror.SyncList-1.html",
    "title": "Class SyncList<T>",
    "keywords": "Class SyncList<T> Inheritance Object SyncList<T> SyncListBool SyncListFloat SyncListInt SyncListString SyncListUInt Implements IReadOnlyList <T> SyncObject Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncList<T> : IList<T>, IReadOnlyList<T>, SyncObject Type Parameters Name Description T Constructors | Improve this Doc View Source SyncList() Declaration public SyncList() | Improve this Doc View Source SyncList(IEqualityComparer<T>) Declaration public SyncList(IEqualityComparer<T> comparer) Parameters Type Name Description IEqualityComparer <T> comparer | Improve this Doc View Source SyncList(IList<T>, IEqualityComparer<T>) Declaration public SyncList(IList<T> objects, IEqualityComparer<T> comparer = null) Parameters Type Name Description IList <T> objects IEqualityComparer <T> comparer Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsDirty Declaration public bool IsDirty { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public T this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description T Methods | Improve this Doc View Source Add(T) Declaration public void Add(T item) Parameters Type Name Description T item | Improve this Doc View Source AddRange(IEnumerable<T>) Declaration public void AddRange(IEnumerable<T> range) Parameters Type Name Description IEnumerable <T> range | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int index) Parameters Type Name Description T[] array Int32 index | Improve this Doc View Source Find(Predicate<T>) Declaration public T Find(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description T | Improve this Doc View Source FindAll(Predicate<T>) Declaration public List<T> FindAll(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description List <T> | Improve this Doc View Source FindIndex(Predicate<T>) Declaration public int FindIndex(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Int32 | Improve this Doc View Source Flush() Declaration public void Flush() | Improve this Doc View Source GetEnumerator() Declaration public SyncList<T>.Enumerator GetEnumerator() Returns Type Description SyncList.Enumerator <> | Improve this Doc View Source IndexOf(T) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, T) Declaration public void Insert(int index, T item) Parameters Type Name Description Int32 index T item | Improve this Doc View Source InsertRange(Int32, IEnumerable<T>) Declaration public void InsertRange(int index, IEnumerable<T> range) Parameters Type Name Description Int32 index IEnumerable <T> range | Improve this Doc View Source OnDeserializeAll(NetworkReader) Declaration public void OnDeserializeAll(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnDeserializeDelta(NetworkReader) Declaration public void OnDeserializeDelta(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnSerializeAll(NetworkWriter) Declaration public void OnSerializeAll(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source OnSerializeDelta(NetworkWriter) Declaration public void OnSerializeDelta(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source RemoveAll(Predicate<T>) Declaration public int RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Int32 | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index | Improve this Doc View Source Reset() Declaration public void Reset() Events | Improve this Doc View Source Callback Declaration public event SyncList<T>.SyncListChanged Callback Event Type Type Description SyncList.SyncListChanged <> Implements IReadOnlyList<> SyncObject"
  },
  "api/Mirror.Tests.MessageTests.MessageBaseTests.html": {
    "href": "api/Mirror.Tests.MessageTests.MessageBaseTests.html",
    "title": "Class MessageBaseTests",
    "keywords": "Class MessageBaseTests Inheritance Object MessageBaseTests Namespace : Mirror.Tests.MessageTests Assembly : Mirror.Tests.dll Syntax public class MessageBaseTests : object Methods | Improve this Doc View Source StructWithEmptyMethods() Declaration public void StructWithEmptyMethods() | Improve this Doc View Source StructWithMethods() Declaration public void StructWithMethods()"
  },
  "api/Mirror.Weaver.Tests.WeaverNetworkBehaviourTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverNetworkBehaviourTests.html",
    "title": "Class WeaverNetworkBehaviourTests",
    "keywords": "Class WeaverNetworkBehaviourTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverNetworkBehaviourTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverNetworkBehaviourTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source NetworkBehaviourAbstractBaseValid() Declaration public void NetworkBehaviourAbstractBaseValid() | Improve this Doc View Source NetworkBehaviourClientRpcCoroutine() Declaration public void NetworkBehaviourClientRpcCoroutine() | Improve this Doc View Source NetworkBehaviourClientRpcDuplicateName() Declaration public void NetworkBehaviourClientRpcDuplicateName() | Improve this Doc View Source NetworkBehaviourClientRpcGenericParam() Declaration public void NetworkBehaviourClientRpcGenericParam() | Improve this Doc View Source NetworkBehaviourClientRpcParamAbstract() Declaration public void NetworkBehaviourClientRpcParamAbstract() | Improve this Doc View Source NetworkBehaviourClientRpcParamComponent() Declaration public void NetworkBehaviourClientRpcParamComponent() | Improve this Doc View Source NetworkBehaviourClientRpcParamNetworkConnection() Declaration public void NetworkBehaviourClientRpcParamNetworkConnection() | Improve this Doc View Source NetworkBehaviourClientRpcParamOptional() Declaration public void NetworkBehaviourClientRpcParamOptional() | Improve this Doc View Source NetworkBehaviourClientRpcParamOut() Declaration public void NetworkBehaviourClientRpcParamOut() | Improve this Doc View Source NetworkBehaviourClientRpcParamRef() Declaration public void NetworkBehaviourClientRpcParamRef() | Improve this Doc View Source NetworkBehaviourClientRpcVoidReturn() Declaration public void NetworkBehaviourClientRpcVoidReturn() | Improve this Doc View Source NetworkBehaviourCmdCoroutine() Declaration public void NetworkBehaviourCmdCoroutine() | Improve this Doc View Source NetworkBehaviourCmdDuplicateName() Declaration public void NetworkBehaviourCmdDuplicateName() | Improve this Doc View Source NetworkBehaviourCmdGenericParam() Declaration public void NetworkBehaviourCmdGenericParam() | Improve this Doc View Source NetworkBehaviourCmdParamAbstract() Declaration public void NetworkBehaviourCmdParamAbstract() | Improve this Doc View Source NetworkBehaviourCmdParamComponent() Declaration public void NetworkBehaviourCmdParamComponent() | Improve this Doc View Source NetworkBehaviourCmdParamNetworkConnection() Declaration public void NetworkBehaviourCmdParamNetworkConnection() | Improve this Doc View Source NetworkBehaviourCmdParamOptional() Declaration public void NetworkBehaviourCmdParamOptional() | Improve this Doc View Source NetworkBehaviourCmdParamOut() Declaration public void NetworkBehaviourCmdParamOut() | Improve this Doc View Source NetworkBehaviourCmdParamRef() Declaration public void NetworkBehaviourCmdParamRef() | Improve this Doc View Source NetworkBehaviourCmdVoidReturn() Declaration public void NetworkBehaviourCmdVoidReturn() | Improve this Doc View Source NetworkBehaviourGeneric() Declaration public void NetworkBehaviourGeneric() | Improve this Doc View Source NetworkBehaviourTargetRpcCoroutine() Declaration public void NetworkBehaviourTargetRpcCoroutine() | Improve this Doc View Source NetworkBehaviourTargetRpcDuplicateName() Declaration public void NetworkBehaviourTargetRpcDuplicateName() | Improve this Doc View Source NetworkBehaviourTargetRpcGenericParam() Declaration public void NetworkBehaviourTargetRpcGenericParam() | Improve this Doc View Source NetworkBehaviourTargetRpcParamAbstract() Declaration public void NetworkBehaviourTargetRpcParamAbstract() | Improve this Doc View Source NetworkBehaviourTargetRpcParamComponent() Declaration public void NetworkBehaviourTargetRpcParamComponent() | Improve this Doc View Source NetworkBehaviourTargetRpcParamNetworkConnection() Declaration public void NetworkBehaviourTargetRpcParamNetworkConnection() | Improve this Doc View Source NetworkBehaviourTargetRpcParamOptional() Declaration public void NetworkBehaviourTargetRpcParamOptional() | Improve this Doc View Source NetworkBehaviourTargetRpcParamOut() Declaration public void NetworkBehaviourTargetRpcParamOut() | Improve this Doc View Source NetworkBehaviourTargetRpcParamRef() Declaration public void NetworkBehaviourTargetRpcParamRef() | Improve this Doc View Source NetworkBehaviourTargetRpcVoidReturn() Declaration public void NetworkBehaviourTargetRpcVoidReturn() | Improve this Doc View Source NetworkBehaviourValid() Declaration public void NetworkBehaviourValid()"
  },
  "api/Mirror.Examples.Basic.html": {
    "href": "api/Mirror.Examples.Basic.html",
    "title": "Namespace Mirror.Examples.Basic",
    "keywords": "Namespace Mirror.Examples.Basic Classes BasicNetManager Player"
  },
  "api/Mirror.Cloud.IRequestCreator.html": {
    "href": "api/Mirror.Cloud.IRequestCreator.html",
    "title": "Interface IRequestCreator",
    "keywords": "Interface IRequestCreator Methods to create and send UnityWebRequest Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public interface IRequestCreator Methods | Improve this Doc View Source Delete(String) Declaration UnityWebRequest Delete(string page) Parameters Type Name Description String page Returns Type Description UnityWebRequest | Improve this Doc View Source Get(String) Declaration UnityWebRequest Get(string page) Parameters Type Name Description String page Returns Type Description UnityWebRequest | Improve this Doc View Source Patch<T>(String, T) Declaration UnityWebRequest Patch<T>(string page, T json) where T : struct, ICanBeJson Parameters Type Name Description String page T json Returns Type Description UnityWebRequest Type Parameters Name Description T | Improve this Doc View Source Post<T>(String, T) Declaration UnityWebRequest Post<T>(string page, T json) where T : struct, ICanBeJson Parameters Type Name Description String page T json Returns Type Description UnityWebRequest Type Parameters Name Description T | Improve this Doc View Source SendRequest(UnityWebRequest, RequestSuccess, RequestFail) Sends Request to api and invokes callback when finished Starts Coroutine of SendRequestEnumerator Declaration void SendRequest(UnityWebRequest request, RequestSuccess onSuccess = null, RequestFail onFail = null) Parameters Type Name Description UnityWebRequest request RequestSuccess onSuccess RequestFail onFail | Improve this Doc View Source SendRequestEnumerator(UnityWebRequest, RequestSuccess, RequestFail) Sends Request to api and invokes callback when finished Declaration IEnumerator SendRequestEnumerator(UnityWebRequest request, RequestSuccess onSuccess = null, RequestFail onFail = null) Parameters Type Name Description UnityWebRequest request RequestSuccess onSuccess RequestFail onFail Returns Type Description IEnumerator"
  },
  "api/Mirror.Cloud.Examples.html": {
    "href": "api/Mirror.Cloud.Examples.html",
    "title": "Namespace Mirror.Cloud.Examples",
    "keywords": "Namespace Mirror.Cloud.Examples Classes InstantiateNetworkManager Instantiate a new NetworkManager if one does not already exist"
  },
  "api/Mirror.NetworkServer.html": {
    "href": "api/Mirror.NetworkServer.html",
    "title": "Class NetworkServer",
    "keywords": "Class NetworkServer The NetworkServer. Inheritance Object NetworkServer Namespace : Mirror Assembly : Mirror.dll Syntax public static class NetworkServer : object Remarks NetworkServer handles remote connections from remote clients via a NetworkServerSimple instance, and also has a local connection for a local client. The NetworkServer is a singleton. It has static convenience functions such as NetworkServer.SendToAll() and NetworkServer.Spawn() which automatically use the singleton instance. The NetworkManager uses the NetworkServer, but it can be used without the NetworkManager. The set of networked objects that have been spawned is managed by NetworkServer. Objects are spawned with NetworkServer.Spawn() which adds them to this set, and makes them be created on clients. Spawned objects are removed automatically when they are destroyed, or than they can be removed from the spawned set by calling NetworkServer.UnSpawn() - this does not destroy the object. There are a number of internal messages used by NetworkServer, these are setup when NetworkServer.Listen() is called. Fields | Improve this Doc View Source connections A list of local connections on the server. Declaration public static Dictionary<int, NetworkConnectionToClient> connections Field Value Type Description Dictionary < Int32 , NetworkConnectionToClient > | Improve this Doc View Source disconnectInactiveConnections Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? This value is initially set from NetworkManager in SetupServer and can be changed at runtime Declaration public static bool disconnectInactiveConnections Field Value Type Description Boolean | Improve this Doc View Source disconnectInactiveTimeout Timeout in seconds since last message from a client after which server will auto-disconnect. This value is initially set from NetworkManager in SetupServer and can be changed at runtime By default, clients send at least a Ping message every 2 seconds. The Host client is immune from idle timeout disconnection. Default value is 60 seconds. Declaration public static float disconnectInactiveTimeout Field Value Type Description Single | Improve this Doc View Source dontListen If you enable this, the server will not listen for incoming connections on the regular network port. This can be used if the game is running in host mode and does not want external players to be able to connect - making it like a single-player game. Also this can be useful when using AddExternalConnection(). Declaration public static bool dontListen Field Value Type Description Boolean Properties | Improve this Doc View Source active Checks if the server has been started. This will be true after NetworkServer.Listen() has been called. Declaration public static bool active { get; } Property Value Type Description Boolean | Improve this Doc View Source localClientActive True is a local client is currently active on the server. This will be true for \"Hosts\" on hosted server games. Declaration public static bool localClientActive { get; } Property Value Type Description Boolean | Improve this Doc View Source localConnection The connection to the host mode client (if any). Declaration public static NetworkConnectionToClient localConnection { get; } Property Value Type Description NetworkConnectionToClient Methods | Improve this Doc View Source ActivateHostScene() Declaration public static void ActivateHostScene() | Improve this Doc View Source AddConnection(NetworkConnectionToClient) This accepts a network connection and adds it to the server. This connection will use the callbacks registered with the server. Declaration public static bool AddConnection(NetworkConnectionToClient conn) Parameters Type Name Description NetworkConnectionToClient conn Network connection to add. Returns Type Description Boolean True if added. | Improve this Doc View Source AddPlayerForConnection(NetworkConnection, GameObject) When an AddPlayer message handler has received a request from a player, the server calls this to associate the player object with the connection. When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for \"adding\" a player, not for \"replacing\" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail. Declaration public static bool AddPlayerForConnection(NetworkConnection conn, GameObject player) Parameters Type Name Description NetworkConnection conn Connection which is adding the player. GameObject player Player object spawned for the player. Returns Type Description Boolean True if connection was successfully added for a connection. | Improve this Doc View Source AddPlayerForConnection(NetworkConnection, GameObject, Guid) When an AddPlayer message handler has received a request from a player, the server calls this to associate the player object with the connection. When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for \"adding\" a player, not for \"replacing\" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail. Declaration public static bool AddPlayerForConnection(NetworkConnection conn, GameObject player, Guid assetId) Parameters Type Name Description NetworkConnection conn Connection which is adding the player. GameObject player Player object spawned for the player. Guid assetId Returns Type Description Boolean True if connection was sucessfully added for a connection. | Improve this Doc View Source ClearHandlers() Clear all registered callback handlers. Declaration public static void ClearHandlers() | Improve this Doc View Source Destroy(GameObject) Destroys this object and corresponding objects on all clients. In some cases it is useful to remove an object but not delete it on the server. For that, use NetworkServer.UnSpawn() instead of NetworkServer.Destroy(). Declaration public static void Destroy(GameObject obj) Parameters Type Name Description GameObject obj Game object to destroy. | Improve this Doc View Source DestroyPlayerForConnection(NetworkConnection) This destroys all the player objects associated with a NetworkConnections on a server. This is used when a client disconnects, to remove the players for that client. This also destroys non-player objects that have client authority set for this connection. Declaration public static void DestroyPlayerForConnection(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The connections object to clean up for. | Improve this Doc View Source DisconnectAll() Disconnect all currently connected clients, including the local connection. This can only be called on the server. Clients will receive the Disconnect message. Declaration public static void DisconnectAll() | Improve this Doc View Source DisconnectAllConnections() Disconnect all currently connected clients except the local connection. This can only be called on the server. Clients will receive the Disconnect message. Declaration public static void DisconnectAllConnections() | Improve this Doc View Source Listen(Int32) Start the server, setting the maximum number of connections. Declaration public static void Listen(int maxConns) Parameters Type Name Description Int32 maxConns Maximum number of allowed connections | Improve this Doc View Source NoConnections() If connections is empty or if only has host Declaration public static bool NoConnections() Returns Type Description Boolean | Improve this Doc View Source RegisterHandler<T>(Action<T>, Boolean) Register a handler for a particular message type. There are several system message types which you can add handlers for. You can also add your own message types. Declaration public static void RegisterHandler<T>(Action<T> handler, bool requireAuthentication = true) where T : struct, NetworkMessage Parameters Type Name Description Action <T> handler Function handler which will be invoked when this message type is received. Boolean requireAuthentication True if the message requires an authenticated connection Type Parameters Name Description T Message type | Improve this Doc View Source RegisterHandler<T>(Action<NetworkConnection, T>, Boolean) Register a handler for a particular message type. There are several system message types which you can add handlers for. You can also add your own message types. Declaration public static void RegisterHandler<T>(Action<NetworkConnection, T> handler, bool requireAuthentication = true) where T : struct, NetworkMessage Parameters Type Name Description Action < NetworkConnection , T> handler Function handler which will be invoked when this message type is received. Boolean requireAuthentication True if the message requires an authenticated connection Type Parameters Name Description T Message type | Improve this Doc View Source RemoveConnection(Int32) This removes an external connection added with AddExternalConnection(). Declaration public static bool RemoveConnection(int connectionId) Parameters Type Name Description Int32 connectionId The id of the connection to remove. Returns Type Description Boolean True if the removal succeeded | Improve this Doc View Source RemovePlayerForConnection(NetworkConnection, Boolean) Removes the player object from the connection Declaration public static void RemovePlayerForConnection(NetworkConnection conn, bool destroyServerObject) Parameters Type Name Description NetworkConnection conn The connection of the client to remove from Boolean destroyServerObject Indicates whether the server object should be destroyed | Improve this Doc View Source ReplaceHandler<T>(Action<T>, Boolean) Replaces a handler for a particular message type. See also RegisterHandler<T>(Action<NetworkConnection, T>, Boolean) Declaration public static void ReplaceHandler<T>(Action<T> handler, bool requireAuthentication = true) where T : struct, NetworkMessage Parameters Type Name Description Action <T> handler Function handler which will be invoked when this message type is received. Boolean requireAuthentication True if the message requires an authenticated connection Type Parameters Name Description T Message type | Improve this Doc View Source ReplaceHandler<T>(Action<NetworkConnection, T>, Boolean) Replaces a handler for a particular message type. See also RegisterHandler<T>(Action<NetworkConnection, T>, Boolean) Declaration public static void ReplaceHandler<T>(Action<NetworkConnection, T> handler, bool requireAuthentication = true) where T : struct, NetworkMessage Parameters Type Name Description Action < NetworkConnection , T> handler Function handler which will be invoked when this message type is received. Boolean requireAuthentication True if the message requires an authenticated connection Type Parameters Name Description T Message type | Improve this Doc View Source ReplacePlayerForConnection(NetworkConnection, GameObject, Guid, Boolean) This replaces the player object for a connection with a different player object. The old player object is not destroyed. If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes. Declaration public static bool ReplacePlayerForConnection(NetworkConnection conn, GameObject player, Guid assetId, bool keepAuthority = false) Parameters Type Name Description NetworkConnection conn Connection which is adding the player. GameObject player Player object spawned for the player. Guid assetId Boolean keepAuthority Does the previous player remain attached to this connection? Returns Type Description Boolean True if connection was successfully replaced for player. | Improve this Doc View Source ReplacePlayerForConnection(NetworkConnection, GameObject, Boolean) This replaces the player object for a connection with a different player object. The old player object is not destroyed. If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changing scenes. Declaration public static bool ReplacePlayerForConnection(NetworkConnection conn, GameObject player, bool keepAuthority = false) Parameters Type Name Description NetworkConnection conn Connection which is adding the player. GameObject player Player object spawned for the player. Boolean keepAuthority Does the previous player remain attached to this connection? Returns Type Description Boolean True if connection was successfully replaced for player. | Improve this Doc View Source SendToAll<T>(T, Int32, Boolean) Send a message to all connected clients, both ready and not-ready. See isReady Declaration public static void SendToAll<T>(T msg, int channelId = null, bool sendToReadyOnly = false) where T : struct, NetworkMessage Parameters Type Name Description T msg Message Int32 channelId Transport channel to use Boolean sendToReadyOnly Indicates if only ready clients should receive the message Type Parameters Name Description T Message type | Improve this Doc View Source SendToClientOfPlayer<T>(NetworkIdentity, T, Int32) send this message to the player only Declaration public static void SendToClientOfPlayer<T>(NetworkIdentity identity, T msg, int channelId = null) where T : struct, NetworkMessage Parameters Type Name Description NetworkIdentity identity T msg Int32 channelId Type Parameters Name Description T Message type | Improve this Doc View Source SendToReady<T>(T, Int32) Send a message to only clients which are ready. See isReady Declaration public static void SendToReady<T>(T msg, int channelId = null) where T : struct, NetworkMessage Parameters Type Name Description T msg Message Int32 channelId Transport channel to use Type Parameters Name Description T Message type. | Improve this Doc View Source SendToReady<T>(NetworkIdentity, T, Boolean, Int32) Send a message to only clients which are ready with option to include the owner of the object identity. See isReady Declaration public static void SendToReady<T>(NetworkIdentity identity, T msg, bool includeOwner = true, int channelId = null) where T : struct, NetworkMessage Parameters Type Name Description NetworkIdentity identity Identity of the owner T msg Message Boolean includeOwner Should the owner of the object be included Int32 channelId Transport channel to use Type Parameters Name Description T Message type. | Improve this Doc View Source SendToReady<T>(NetworkIdentity, T, Int32) Send a message to only clients which are ready including the owner of the object identity. See isReady Declaration public static void SendToReady<T>(NetworkIdentity identity, T msg, int channelId) where T : struct, NetworkMessage Parameters Type Name Description NetworkIdentity identity identity of the object T msg Message Int32 channelId Transport channel to use Type Parameters Name Description T Message type | Improve this Doc View Source SetAllClientsNotReady() Marks all connected clients as no longer ready. All clients will no longer be sent state synchronization updates. The player's clients can call ClientManager.Ready() again to re-enter the ready state. This is useful when switching scenes. Declaration public static void SetAllClientsNotReady() | Improve this Doc View Source SetClientNotReady(NetworkConnection) Sets the client of the connection to be not-ready. Clients that are not ready do not receive spawned objects or state synchronization updates. They client can be made ready again by calling SetClientReady(). Declaration public static void SetClientNotReady(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The connection of the client to make not ready. | Improve this Doc View Source SetClientReady(NetworkConnection) Sets the client to be ready. When a client has signaled that it is ready, this method tells the server that the client is ready to receive spawned objects and state synchronization updates. This is usually called in a handler for the SYSTEM_READY message. If there is not specific action a game needs to take for this message, relying on the default ready handler function is probably fine, so this call wont be needed. Declaration public static void SetClientReady(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The connection of the client to make ready. | Improve this Doc View Source Shutdown() This shuts down the server and disconnects all clients. Declaration public static void Shutdown() | Improve this Doc View Source Spawn(GameObject, GameObject) This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client. This is the same as calling NetworkIdentity.AssignClientAuthority on the spawned object. Declaration public static void Spawn(GameObject obj, GameObject ownerPlayer) Parameters Type Name Description GameObject obj The object to spawn. GameObject ownerPlayer The player object to set Client Authority to. | Improve this Doc View Source Spawn(GameObject, Guid, NetworkConnection) This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client. This is the same as calling NetworkIdentity.AssignClientAuthority on the spawned object. Declaration public static void Spawn(GameObject obj, Guid assetId, NetworkConnection ownerConnection = null) Parameters Type Name Description GameObject obj The object to spawn. Guid assetId The assetId of the object to spawn. Used for custom spawn handlers. NetworkConnection ownerConnection The connection that has authority over the object | Improve this Doc View Source Spawn(GameObject, NetworkConnection) Spawn the given game object on all clients which are ready. This will cause a new object to be instantiated from the registered prefab, or from a custom spawn function. Declaration public static void Spawn(GameObject obj, NetworkConnection ownerConnection = null) Parameters Type Name Description GameObject obj Game object with NetworkIdentity to spawn. NetworkConnection ownerConnection The connection that has authority over the object | Improve this Doc View Source SpawnObjects() This causes NetworkIdentity objects in a scene to be spawned on a server. NetworkIdentity objects in a scene are disabled by default. Calling SpawnObjects() causes these scene objects to be enabled and spawned. It is like calling NetworkServer.Spawn() for each of them. Declaration public static bool SpawnObjects() Returns Type Description Boolean Success if objects where spawned. | Improve this Doc View Source UnregisterHandler<T>() Unregisters a handler for a particular message type. Declaration public static void UnregisterHandler<T>() where T : struct, NetworkMessage Type Parameters Name Description T Message type | Improve this Doc View Source UnSpawn(GameObject) This takes an object that has been spawned and un-spawns it. The object will be removed from clients that it was spawned on, or the custom spawn handler function on the client will be called for the object. Unlike when calling NetworkServer.Destroy(), on the server the object will NOT be destroyed. This allows the server to re-use the object, even spawn it again later. Declaration public static void UnSpawn(GameObject obj) Parameters Type Name Description GameObject obj The spawned object to be unspawned. | Improve this Doc View Source Update() Called from NetworkManager in LateUpdate The user should never need to pump the update loop manually Declaration public static void Update()"
  },
  "api/Mirror.ServerCallbackAttribute.html": {
    "href": "api/Mirror.ServerCallbackAttribute.html",
    "title": "Class ServerCallbackAttribute",
    "keywords": "Class ServerCallbackAttribute Prevents clients from running this method. No warning is thrown. Inheritance Object ServerCallbackAttribute Namespace : Mirror Assembly : Mirror.dll Syntax public class ServerCallbackAttribute : Attribute"
  },
  "api/Mirror.Cloud.Example.ServerListUI.html": {
    "href": "api/Mirror.Cloud.Example.ServerListUI.html",
    "title": "Class ServerListUI",
    "keywords": "Class ServerListUI Displays the list of servers Inheritance Object ServerListUI Namespace : Mirror.Cloud.Example Assembly : Mirror.Examples.Cloud.GUI.dll Syntax public class ServerListUI : MonoBehaviour Methods | Improve this Doc View Source UpdateList(ServerCollectionJson) Declaration public void UpdateList(ServerCollectionJson serverCollection) Parameters Type Name Description ServerCollectionJson serverCollection"
  },
  "api/Mirror.NetworkIdentity.html": {
    "href": "api/Mirror.NetworkIdentity.html",
    "title": "Class NetworkIdentity",
    "keywords": "Class NetworkIdentity The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. Inheritance Object NetworkIdentity Namespace : Mirror Assembly : Mirror.dll Syntax public sealed class NetworkIdentity : MonoBehaviour Remarks The NetworkIdentity is used to synchronize information in the object with the network. Only the server should create instances of objects which have NetworkIdentity as otherwise they will not be properly connected to the system. For complex objects with a hierarchy of subcomponents, the NetworkIdentity must be on the root of the hierarchy. It is not supported to have multiple NetworkIdentity components on subcomponents of a hierarchy. NetworkBehaviour scripts require a NetworkIdentity on the game object to be able to function. The NetworkIdentity manages the dirty state of the NetworkBehaviours of the object. When it discovers that NetworkBehaviours are dirty, it causes an update packet to be created and sent to clients. The flow for serialization updates managed by the NetworkIdentity is: Each NetworkBehaviour has a dirty mask. This mask is available inside OnSerialize as syncVarDirtyBits Each SyncVar in a NetworkBehaviour script is assigned a bit in the dirty mask. Changing the value of SyncVars causes the bit for that SyncVar to be set in the dirty mask Alternatively, calling SetDirtyBit() writes directly to the dirty mask NetworkIdentity objects are checked on the server as part of it's update loop If any NetworkBehaviours on a NetworkIdentity are dirty, then an UpdateVars packet is created for that object The UpdateVars packet is populated by calling OnSerialize on each NetworkBehaviour on the object NetworkBehaviours that are NOT dirty write a zero to the packet for their dirty bits NetworkBehaviours that are dirty write their dirty mask, then the values for the SyncVars that have changed If OnSerialize returns true for a NetworkBehaviour, the dirty mask is reset for that NetworkBehaviour, so it will not send again until its value changes. The UpdateVars packet is sent to ready clients that are observing the object On the client: an UpdateVars packet is received for an object The OnDeserialize function is called for each NetworkBehaviour script on the object Each NetworkBehaviour script on the object reads a dirty mask. If the dirty mask for a NetworkBehaviour is zero, the OnDeserialize functions returns without reading any more If the dirty mask is non-zero value, then the OnDeserialize function reads the values for the SyncVars that correspond to the dirty bits that are set If there are SyncVar hook functions, those are invoked with the value read from the stream. Fields | Improve this Doc View Source observers The set of network connections (players) that can see this object. null until OnStartServer was called. this is necessary for SendTo* to work properly in server-only mode. Declaration public Dictionary<int, NetworkConnection> observers Field Value Type Description Dictionary < Int32 , NetworkConnection > | Improve this Doc View Source sceneId A unique identifier for NetworkIdentity objects within a scene. This is used for spawning scene objects on clients. Declaration public ulong sceneId Field Value Type Description UInt64 | Improve this Doc View Source serverOnly Flag to make this object only exist when the game is running as a server (or host). Declaration public bool serverOnly Field Value Type Description Boolean | Improve this Doc View Source spawned All spawned NetworkIdentities by netId. Available on server and client. Declaration public static readonly Dictionary<uint, NetworkIdentity> spawned Field Value Type Description Dictionary < UInt32 , NetworkIdentity > Properties | Improve this Doc View Source assetId Unique identifier used to find the source assets when server spawns the on clients. Declaration public Guid assetId { get; } Property Value Type Description Guid Remarks The AssetId trick: Ideally we would have a serialized 'Guid m_AssetId' but Unity can't serialize it because Guid's internal bytes are private UNET used 'NetworkHash128' originally, with byte0, ..., byte16 which works, but it just unnecessary extra code Using just the Guid string would work, but it's 32 chars long and would then be sent over the network as 64 instead of 16 bytes The solution is to serialize the string internally here and then use the real 'Guid' type for everything else via .assetId | Improve this Doc View Source connectionToClient The NetworkConnection associated with this NetworkIdentity This is valid for player and other owned objects in the server. Use it to return details such as the connection's identity, IP address and ready status. Declaration public NetworkConnectionToClient connectionToClient { get; } Property Value Type Description NetworkConnectionToClient | Improve this Doc View Source connectionToServer The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on a local client. Declaration public NetworkConnection connectionToServer { get; } Property Value Type Description NetworkConnection | Improve this Doc View Source hasAuthority This returns true if this object is the authoritative player object on the client. This value is determined at runtime. For most objects, authority is held by the server. For objects that had their authority set by AssignClientAuthority on the server, this will be true on the client that owns the object. NOT on other clients. Declaration public bool hasAuthority { get; } Property Value Type Description Boolean | Improve this Doc View Source isClient Returns true if running as a client and this object was spawned by a server. Declaration public bool isClient { get; } Property Value Type Description Boolean Remarks IMPORTANT: checking NetworkClient.active means that isClient is false in OnDestroy: public bool isClient => NetworkClient.active && netId != 0 && !serverOnly; but we need it in OnDestroy, e.g. when saving skillbars on quit. this works fine if we keep the UNET way of setting isClient manually. => fixes https://github.com/vis2k/Mirror/issues/1475 | Improve this Doc View Source isLocalPlayer This returns true if this object is the one that represents the player on the local machine. This is set when the server has spawned an object for this particular client. Declaration public bool isLocalPlayer { get; } Property Value Type Description Boolean | Improve this Doc View Source isServer Returns true if NetworkServer.active and server is not stopped. Declaration public bool isServer { get; } Property Value Type Description Boolean Remarks IMPORTANT: checking NetworkServer.active means that isServer is false in OnDestroy: public bool isServer => NetworkServer.active && netId != 0; but we need it in OnDestroy, e.g. when saving players on quit. this works fine if we keep the UNET way of setting isServer manually. => fixes https://github.com/vis2k/Mirror/issues/1484 | Improve this Doc View Source netId Unique identifier for this particular object instance, used for tracking objects between networked clients and the server. This is a unique identifier for this particular GameObject instance. Use it to track GameObjects between networked clients and the server. Declaration public uint netId { get; } Property Value Type Description UInt32 | Improve this Doc View Source NetworkBehaviours Declaration public NetworkBehaviour[] NetworkBehaviours { get; } Property Value Type Description NetworkBehaviour [] | Improve this Doc View Source SpawnedFromInstantiate Declaration public bool SpawnedFromInstantiate { get; } Property Value Type Description Boolean | Improve this Doc View Source visibility Declaration public NetworkVisibility visibility { get; } Property Value Type Description NetworkVisibility Methods | Improve this Doc View Source AssignClientAuthority(NetworkConnection) Assign control of an object to a client via the client's NetworkConnection This causes hasAuthority to be set on the client that owns the object, and NetworkBehaviour.OnStartAuthority will be called on that client. This object then will be in the NetworkConnection.clientOwnedObjects list for the connection. Authority can be removed with RemoveClientAuthority. Only one client can own an object at any time. This does not need to be called for player objects, as their authority is setup automatically. Declaration public bool AssignClientAuthority(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The connection of the client to assign authority to. Returns Type Description Boolean True if authority was assigned. | Improve this Doc View Source GetSceneIdentity(UInt64) Gets the NetworkIdentity from the sceneIds dictionary with the corresponding id Declaration public static NetworkIdentity GetSceneIdentity(ulong id) Parameters Type Name Description UInt64 id Returns Type Description NetworkIdentity NetworkIdentity from the sceneIds dictionary | Improve this Doc View Source RebuildObservers(Boolean) This causes the set of players that can see this object to be rebuild. The OnRebuildObservers callback function will be invoked on each NetworkBehaviour. Declaration public void RebuildObservers(bool initialize) Parameters Type Name Description Boolean initialize True if this is the first time. | Improve this Doc View Source RemoveClientAuthority() Removes ownership for an object. This applies to objects that had authority set by AssignClientAuthority, or Spawn(GameObject, NetworkConnection) with a NetworkConnection parameter included. Authority cannot be removed for player objects. Declaration public void RemoveClientAuthority() | Improve this Doc View Source ResetNextNetworkId() Resets nextNetworkId = 1 Declaration public static void ResetNextNetworkId() Events | Improve this Doc View Source clientAuthorityCallback A callback that can be populated to be notified when the client-authority state of objects changes. Whenever an object is spawned with client authority, or the client authority status of an object is changed with AssignClientAuthority or RemoveClientAuthority, then this callback will be invoked. This callback is only invoked on the server. Declaration public static event NetworkIdentity.ClientAuthorityCallback clientAuthorityCallback Event Type Type Description NetworkIdentity.ClientAuthorityCallback"
  },
  "api/Mirror.Tests.Performance.NetworkIdentityPerformanceWithMultipleBehaviour.html": {
    "href": "api/Mirror.Tests.Performance.NetworkIdentityPerformanceWithMultipleBehaviour.html",
    "title": "Class NetworkIdentityPerformanceWithMultipleBehaviour",
    "keywords": "Class NetworkIdentityPerformanceWithMultipleBehaviour Inheritance Object NetworkIdentityPerformanceWithMultipleBehaviour Namespace : Mirror.Tests.Performance Assembly : Mirror.Tests.Performance.Editor.dll Syntax public class NetworkIdentityPerformanceWithMultipleBehaviour : object Methods | Improve this Doc View Source ServerUpdateIsDirty() Declaration public void ServerUpdateIsDirty() | Improve this Doc View Source ServerUpdateNotDirty() Declaration public void ServerUpdateNotDirty() | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.Tests.NetworkWriterTest.html": {
    "href": "api/Mirror.Tests.NetworkWriterTest.html",
    "title": "Class NetworkWriterTest",
    "keywords": "Class NetworkWriterTest Inheritance Object NetworkWriterTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkWriterTest : object Methods | Improve this Doc View Source BlittableOnThisPlatform() Declaration public void BlittableOnThisPlatform() | Improve this Doc View Source TestByteEndianness() Declaration public void TestByteEndianness() | Improve this Doc View Source TestChar() Declaration public void TestChar() | Improve this Doc View Source TestColor() Declaration public void TestColor() | Improve this Doc View Source TestColor32() Declaration public void TestColor32() | Improve this Doc View Source TestDecimalBinaryCompatibility() Declaration public void TestDecimalBinaryCompatibility() | Improve this Doc View Source TestDecimals() Declaration public void TestDecimals() | Improve this Doc View Source TestDoubleBinaryCompatibility() Declaration public void TestDoubleBinaryCompatibility() | Improve this Doc View Source TestDoubles() Declaration public void TestDoubles() | Improve this Doc View Source TestFloatBinaryCompatibility() Declaration public void TestFloatBinaryCompatibility() | Improve this Doc View Source TestFloats() Declaration public void TestFloats() | Improve this Doc View Source TestGuid() Declaration public void TestGuid() | Improve this Doc View Source TestIntEndianness() Declaration public void TestIntEndianness() | Improve this Doc View Source TestList() Declaration public void TestList() | Improve this Doc View Source TestLongEndianness() Declaration public void TestLongEndianness() | Improve this Doc View Source TestMatrix4x4() Declaration public void TestMatrix4x4() | Improve this Doc View Source TestNullList() Declaration public void TestNullList() | Improve this Doc View Source TestPlane() Declaration public void TestPlane() | Improve this Doc View Source TestQuaternion() Declaration public void TestQuaternion() | Improve this Doc View Source TestRay() Declaration public void TestRay() | Improve this Doc View Source TestReading0LengthBytes() Declaration public void TestReading0LengthBytes() | Improve this Doc View Source TestReading0LengthBytesAndSize() Declaration public void TestReading0LengthBytesAndSize() | Improve this Doc View Source TestReadingInvalidString() Declaration public void TestReadingInvalidString() | Improve this Doc View Source TestReadingTooMuch() Declaration public void TestReadingTooMuch() | Improve this Doc View Source TestReadingTruncatedString() Declaration public void TestReadingTruncatedString() | Improve this Doc View Source TestRect() Declaration public void TestRect() | Improve this Doc View Source TestResetSetsPotionAndLength() Declaration public void TestResetSetsPotionAndLength() | Improve this Doc View Source TestSbyteEndianness() Declaration public void TestSbyteEndianness() | Improve this Doc View Source TestSetLengthInitialization() Declaration public void TestSetLengthInitialization() | Improve this Doc View Source TestSetLengthZeroes() Declaration public void TestSetLengthZeroes() | Improve this Doc View Source TestShortEndianness() Declaration public void TestShortEndianness() | Improve this Doc View Source TestToArray() Declaration public void TestToArray() | Improve this Doc View Source TestToArraySegment() Declaration public void TestToArraySegment() | Improve this Doc View Source TestUIntEndianness() Declaration public void TestUIntEndianness() | Improve this Doc View Source TestULongEndianness() Declaration public void TestULongEndianness() | Improve this Doc View Source TestUnicodeString() Declaration public void TestUnicodeString() | Improve this Doc View Source TestUShortEndianness() Declaration public void TestUShortEndianness() | Improve this Doc View Source TestVector2() Declaration public void TestVector2() | Improve this Doc View Source TestVector2Int() Declaration public void TestVector2Int() | Improve this Doc View Source TestVector3() Declaration public void TestVector3() | Improve this Doc View Source TestVector3Int() Declaration public void TestVector3Int() | Improve this Doc View Source TestVector4() Declaration public void TestVector4() | Improve this Doc View Source TestWritingAndReading() Declaration public void TestWritingAndReading() | Improve this Doc View Source TestWritingBytesAndReadingSegment() Declaration public void TestWritingBytesAndReadingSegment() | Improve this Doc View Source TestWritingBytesSegment() Declaration public void TestWritingBytesSegment() | Improve this Doc View Source TestWritingHugeArray() Declaration public void TestWritingHugeArray() | Improve this Doc View Source TestWritingLargeMessage() Declaration public void TestWritingLargeMessage() | Improve this Doc View Source TestWritingNegativeBytesAndSizeFailure() Declaration public void TestWritingNegativeBytesAndSizeFailure() | Improve this Doc View Source TestWritingSegmentAndReadingSegment() Declaration public void TestWritingSegmentAndReadingSegment() | Improve this Doc View Source TestWritingSmallMessage() Declaration public void TestWritingSmallMessage() | Improve this Doc View Source TestWritingUri() Declaration public void TestWritingUri()"
  },
  "api/Mirror.Examples.RigidbodyPhysics.AddForce.html": {
    "href": "api/Mirror.Examples.RigidbodyPhysics.AddForce.html",
    "title": "Class AddForce",
    "keywords": "Class AddForce Inheritance Object NetworkBehaviour AddForce Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.RigidbodyPhysics Assembly : Mirror.example.RigidbodyPhysics.dll Syntax public class AddForce : NetworkBehaviour"
  },
  "api/Mirror.Tests.Generators.html": {
    "href": "api/Mirror.Tests.Generators.html",
    "title": "Namespace Mirror.Tests.Generators",
    "keywords": "Namespace Mirror.Tests.Generators Classes AttributeTestGenerator ClassWithConstructor ClassWithNoConstructor CollectionWriterGenerator GeneratorBase Structs FloatStringStruct"
  },
  "api/Mirror.Tests.SyncObjectTestMethods.html": {
    "href": "api/Mirror.Tests.SyncObjectTestMethods.html",
    "title": "Class SyncObjectTestMethods",
    "keywords": "Class SyncObjectTestMethods Inheritance Object SyncObjectTestMethods Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public static class SyncObjectTestMethods : object Methods | Improve this Doc View Source GetChangeCount(SyncObject) Declaration public static uint GetChangeCount(this SyncObject syncObject) Parameters Type Name Description SyncObject syncObject Returns Type Description UInt32"
  },
  "api/Mirror.NetworkWriterExtensions.html": {
    "href": "api/Mirror.NetworkWriterExtensions.html",
    "title": "Class NetworkWriterExtensions",
    "keywords": "Class NetworkWriterExtensions Built in Writer functions for Mirror Weaver automatically decects all extension methods for NetworkWriter Inheritance Object NetworkWriterExtensions Namespace : Mirror Assembly : Mirror.dll Syntax public static class NetworkWriterExtensions : object Methods | Improve this Doc View Source WriteArray<T>(NetworkWriter, T[]) Declaration public static void WriteArray<T>(this NetworkWriter writer, T[] array) Parameters Type Name Description NetworkWriter writer T[] array Type Parameters Name Description T | Improve this Doc View Source WriteArraySegment<T>(NetworkWriter, ArraySegment<T>) Declaration public static void WriteArraySegment<T>(this NetworkWriter writer, ArraySegment<T> segment) Parameters Type Name Description NetworkWriter writer ArraySegment <T> segment Type Parameters Name Description T | Improve this Doc View Source WriteBoolean(NetworkWriter, Boolean) Declaration public static void WriteBoolean(this NetworkWriter writer, bool value) Parameters Type Name Description NetworkWriter writer Boolean value | Improve this Doc View Source WriteByte(NetworkWriter, Byte) Declaration public static void WriteByte(this NetworkWriter writer, byte value) Parameters Type Name Description NetworkWriter writer Byte value | Improve this Doc View Source WriteBytesAndSize(NetworkWriter, Byte[]) Declaration public static void WriteBytesAndSize(this NetworkWriter writer, byte[] buffer) Parameters Type Name Description NetworkWriter writer Byte [] buffer | Improve this Doc View Source WriteBytesAndSize(NetworkWriter, Byte[], Int32, Int32) Declaration public static void WriteBytesAndSize(this NetworkWriter writer, byte[] buffer, int offset, int count) Parameters Type Name Description NetworkWriter writer Byte [] buffer Int32 offset Int32 count | Improve this Doc View Source WriteBytesAndSizeSegment(NetworkWriter, ArraySegment<Byte>) Declaration public static void WriteBytesAndSizeSegment(this NetworkWriter writer, ArraySegment<byte> buffer) Parameters Type Name Description NetworkWriter writer ArraySegment < Byte > buffer | Improve this Doc View Source WriteChar(NetworkWriter, Char) Declaration public static void WriteChar(this NetworkWriter writer, char value) Parameters Type Name Description NetworkWriter writer Char value | Improve this Doc View Source WriteColor(NetworkWriter, Color) Declaration public static void WriteColor(this NetworkWriter writer, Color value) Parameters Type Name Description NetworkWriter writer Color value | Improve this Doc View Source WriteColor32(NetworkWriter, Color32) Declaration public static void WriteColor32(this NetworkWriter writer, Color32 value) Parameters Type Name Description NetworkWriter writer Color32 value | Improve this Doc View Source WriteDecimal(NetworkWriter, Decimal) Declaration public static void WriteDecimal(this NetworkWriter writer, decimal value) Parameters Type Name Description NetworkWriter writer Decimal value | Improve this Doc View Source WriteDouble(NetworkWriter, Double) Declaration public static void WriteDouble(this NetworkWriter writer, double value) Parameters Type Name Description NetworkWriter writer Double value | Improve this Doc View Source WriteGameObject(NetworkWriter, GameObject) Declaration public static void WriteGameObject(this NetworkWriter writer, GameObject value) Parameters Type Name Description NetworkWriter writer GameObject value | Improve this Doc View Source WriteGuid(NetworkWriter, Guid) Declaration public static void WriteGuid(this NetworkWriter writer, Guid value) Parameters Type Name Description NetworkWriter writer Guid value | Improve this Doc View Source WriteInt16(NetworkWriter, Int16) Declaration public static void WriteInt16(this NetworkWriter writer, short value) Parameters Type Name Description NetworkWriter writer Int16 value | Improve this Doc View Source WriteInt32(NetworkWriter, Int32) Declaration public static void WriteInt32(this NetworkWriter writer, int value) Parameters Type Name Description NetworkWriter writer Int32 value | Improve this Doc View Source WriteInt64(NetworkWriter, Int64) Declaration public static void WriteInt64(this NetworkWriter writer, long value) Parameters Type Name Description NetworkWriter writer Int64 value | Improve this Doc View Source WriteList<T>(NetworkWriter, List<T>) Declaration public static void WriteList<T>(this NetworkWriter writer, List<T> list) Parameters Type Name Description NetworkWriter writer List <T> list Type Parameters Name Description T | Improve this Doc View Source WriteMatrix4x4(NetworkWriter, Matrix4x4) Declaration public static void WriteMatrix4x4(this NetworkWriter writer, Matrix4x4 value) Parameters Type Name Description NetworkWriter writer Matrix4x4 value | Improve this Doc View Source WriteNetworkIdentity(NetworkWriter, NetworkIdentity) Declaration public static void WriteNetworkIdentity(this NetworkWriter writer, NetworkIdentity value) Parameters Type Name Description NetworkWriter writer NetworkIdentity value | Improve this Doc View Source WritePlane(NetworkWriter, Plane) Declaration public static void WritePlane(this NetworkWriter writer, Plane value) Parameters Type Name Description NetworkWriter writer Plane value | Improve this Doc View Source WriteQuaternion(NetworkWriter, Quaternion) Declaration public static void WriteQuaternion(this NetworkWriter writer, Quaternion value) Parameters Type Name Description NetworkWriter writer Quaternion value | Improve this Doc View Source WriteRay(NetworkWriter, Ray) Declaration public static void WriteRay(this NetworkWriter writer, Ray value) Parameters Type Name Description NetworkWriter writer Ray value | Improve this Doc View Source WriteRect(NetworkWriter, Rect) Declaration public static void WriteRect(this NetworkWriter writer, Rect value) Parameters Type Name Description NetworkWriter writer Rect value | Improve this Doc View Source WriteSByte(NetworkWriter, SByte) Declaration public static void WriteSByte(this NetworkWriter writer, sbyte value) Parameters Type Name Description NetworkWriter writer SByte value | Improve this Doc View Source WriteSingle(NetworkWriter, Single) Declaration public static void WriteSingle(this NetworkWriter writer, float value) Parameters Type Name Description NetworkWriter writer Single value | Improve this Doc View Source WriteString(NetworkWriter, String) Declaration public static void WriteString(this NetworkWriter writer, string value) Parameters Type Name Description NetworkWriter writer String value | Improve this Doc View Source WriteTransform(NetworkWriter, Transform) Declaration public static void WriteTransform(this NetworkWriter writer, Transform value) Parameters Type Name Description NetworkWriter writer Transform value | Improve this Doc View Source WriteUInt16(NetworkWriter, UInt16) Declaration public static void WriteUInt16(this NetworkWriter writer, ushort value) Parameters Type Name Description NetworkWriter writer UInt16 value | Improve this Doc View Source WriteUInt32(NetworkWriter, UInt32) Declaration public static void WriteUInt32(this NetworkWriter writer, uint value) Parameters Type Name Description NetworkWriter writer UInt32 value | Improve this Doc View Source WriteUInt64(NetworkWriter, UInt64) Declaration public static void WriteUInt64(this NetworkWriter writer, ulong value) Parameters Type Name Description NetworkWriter writer UInt64 value | Improve this Doc View Source WriteUri(NetworkWriter, Uri) Declaration public static void WriteUri(this NetworkWriter writer, Uri uri) Parameters Type Name Description NetworkWriter writer Uri uri | Improve this Doc View Source WriteVector2(NetworkWriter, Vector2) Declaration public static void WriteVector2(this NetworkWriter writer, Vector2 value) Parameters Type Name Description NetworkWriter writer Vector2 value | Improve this Doc View Source WriteVector2Int(NetworkWriter, Vector2Int) Declaration public static void WriteVector2Int(this NetworkWriter writer, Vector2Int value) Parameters Type Name Description NetworkWriter writer Vector2Int value | Improve this Doc View Source WriteVector3(NetworkWriter, Vector3) Declaration public static void WriteVector3(this NetworkWriter writer, Vector3 value) Parameters Type Name Description NetworkWriter writer Vector3 value | Improve this Doc View Source WriteVector3Int(NetworkWriter, Vector3Int) Declaration public static void WriteVector3Int(this NetworkWriter writer, Vector3Int value) Parameters Type Name Description NetworkWriter writer Vector3Int value | Improve this Doc View Source WriteVector4(NetworkWriter, Vector4) Declaration public static void WriteVector4(this NetworkWriter writer, Vector4 value) Parameters Type Name Description NetworkWriter writer Vector4 value"
  },
  "api/Mirror.Tests.Runtime.ClientSceneTests.ClientSceneTests_DestroyAllClientObjects.html": {
    "href": "api/Mirror.Tests.Runtime.ClientSceneTests.ClientSceneTests_DestroyAllClientObjects.html",
    "title": "Class ClientSceneTests_DestroyAllClientObjects",
    "keywords": "Class ClientSceneTests_DestroyAllClientObjects Inheritance Object ClientSceneTests_DestroyAllClientObjects Namespace : Mirror.Tests.Runtime.ClientSceneTests Assembly : Mirror.Tests.Runtime.dll Syntax public class ClientSceneTests_DestroyAllClientObjects : object Fields | Improve this Doc View Source _createdObjects Declaration public static readonly List<GameObject> _createdObjects Field Value Type Description List < GameObject > Methods | Improve this Doc View Source CallsUnspawnHandlerInsteadOfDestroy() Declaration public void CallsUnspawnHandlerInsteadOfDestroy() | Improve this Doc View Source CatchesAndLogsExeptionWhenSpawnedListIsChanged() Declaration public void CatchesAndLogsExeptionWhenSpawnedListIsChanged() | Improve this Doc View Source ClearsSpawnedList() Declaration public void ClearsSpawnedList() | Improve this Doc View Source DestroysAllNetworkPrefabsInScene() Declaration public IEnumerator DestroysAllNetworkPrefabsInScene() Returns Type Description IEnumerator | Improve this Doc View Source DisablesAllNetworkSceneObjectsInScene() Declaration public IEnumerator DisablesAllNetworkSceneObjectsInScene() Returns Type Description IEnumerator | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.Weaver.Log.html": {
    "href": "api/Mirror.Weaver.Log.html",
    "title": "Class Log",
    "keywords": "Class Log Inheritance Object Log Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class Log : object Fields | Improve this Doc View Source ErrorMethod Declaration public static Action<string> ErrorMethod Field Value Type Description Action < String > | Improve this Doc View Source WarningMethod Declaration public static Action<string> WarningMethod Field Value Type Description Action < String > Methods | Improve this Doc View Source Error(String) Declaration public static void Error(string msg) Parameters Type Name Description String msg | Improve this Doc View Source Warning(String) Declaration public static void Warning(string msg) Parameters Type Name Description String msg"
  },
  "api/Mirror.Tests.GeneratedWriterTests.html": {
    "href": "api/Mirror.Tests.GeneratedWriterTests.html",
    "title": "Namespace Mirror.Tests.GeneratedWriterTests",
    "keywords": "Namespace Mirror.Tests.GeneratedWriterTests Classes BaseData DataSenderBehaviour FieldsInBaseClasses SomeOtherData"
  },
  "api/Mirror.Tests.Generated.Attributes.AttributeBehaviour_MonoBehaviour.html": {
    "href": "api/Mirror.Tests.Generated.Attributes.AttributeBehaviour_MonoBehaviour.html",
    "title": "Class AttributeBehaviour_MonoBehaviour",
    "keywords": "Class AttributeBehaviour_MonoBehaviour Inheritance Object AttributeBehaviour_MonoBehaviour Namespace : Mirror.Tests.Generated.Attributes Assembly : Mirror.Tests.dll Syntax public class AttributeBehaviour_MonoBehaviour : MonoBehaviour Fields | Improve this Doc View Source Expected_bool Declaration public static readonly bool Expected_bool Field Value Type Description Boolean | Improve this Doc View Source Expected_byte Declaration public static readonly byte Expected_byte Field Value Type Description Byte | Improve this Doc View Source Expected_char Declaration public static readonly char Expected_char Field Value Type Description Char | Improve this Doc View Source Expected_ClassWithConstructor Declaration public static readonly ClassWithConstructor Expected_ClassWithConstructor Field Value Type Description ClassWithConstructor | Improve this Doc View Source Expected_ClassWithNoConstructor Declaration public static readonly ClassWithNoConstructor Expected_ClassWithNoConstructor Field Value Type Description ClassWithNoConstructor | Improve this Doc View Source Expected_double Declaration public static readonly double Expected_double Field Value Type Description Double | Improve this Doc View Source Expected_float Declaration public static readonly float Expected_float Field Value Type Description Single | Improve this Doc View Source Expected_int Declaration public static readonly int Expected_int Field Value Type Description Int32 | Improve this Doc View Source Expected_long Declaration public static readonly long Expected_long Field Value Type Description Int64 | Improve this Doc View Source Expected_ulong Declaration public static readonly ulong Expected_ulong Field Value Type Description UInt64 | Improve this Doc View Source Expected_Vector3 Declaration public static readonly Vector3 Expected_Vector3 Field Value Type Description Vector3 Methods | Improve this Doc View Source Client_bool_Function() Declaration public bool Client_bool_Function() Returns Type Description Boolean | Improve this Doc View Source Client_bool_out_Function(out Boolean) Declaration public void Client_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source Client_byte_Function() Declaration public byte Client_byte_Function() Returns Type Description Byte | Improve this Doc View Source Client_byte_out_Function(out Byte) Declaration public void Client_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source Client_char_Function() Declaration public char Client_char_Function() Returns Type Description Char | Improve this Doc View Source Client_char_out_Function(out Char) Declaration public void Client_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source Client_ClassWithConstructor_Function() Declaration public ClassWithConstructor Client_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source Client_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void Client_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source Client_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor Client_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source Client_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void Client_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source Client_double_Function() Declaration public double Client_double_Function() Returns Type Description Double | Improve this Doc View Source Client_double_out_Function(out Double) Declaration public void Client_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source Client_float_Function() Declaration public float Client_float_Function() Returns Type Description Single | Improve this Doc View Source Client_float_out_Function(out Single) Declaration public void Client_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source Client_int_Function() Declaration public int Client_int_Function() Returns Type Description Int32 | Improve this Doc View Source Client_int_out_Function(out Int32) Declaration public void Client_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source Client_long_Function() Declaration public long Client_long_Function() Returns Type Description Int64 | Improve this Doc View Source Client_long_out_Function(out Int64) Declaration public void Client_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source Client_ulong_Function() Declaration public ulong Client_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source Client_ulong_out_Function(out UInt64) Declaration public void Client_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source Client_Vector3_Function() Declaration public Vector3 Client_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source Client_Vector3_out_Function(out Vector3) Declaration public void Client_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value | Improve this Doc View Source ClientCallback_bool_Function() Declaration public bool ClientCallback_bool_Function() Returns Type Description Boolean | Improve this Doc View Source ClientCallback_bool_out_Function(out Boolean) Declaration public void ClientCallback_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source ClientCallback_byte_Function() Declaration public byte ClientCallback_byte_Function() Returns Type Description Byte | Improve this Doc View Source ClientCallback_byte_out_Function(out Byte) Declaration public void ClientCallback_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source ClientCallback_char_Function() Declaration public char ClientCallback_char_Function() Returns Type Description Char | Improve this Doc View Source ClientCallback_char_out_Function(out Char) Declaration public void ClientCallback_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source ClientCallback_ClassWithConstructor_Function() Declaration public ClassWithConstructor ClientCallback_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source ClientCallback_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void ClientCallback_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor ClientCallback_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void ClientCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source ClientCallback_double_Function() Declaration public double ClientCallback_double_Function() Returns Type Description Double | Improve this Doc View Source ClientCallback_double_out_Function(out Double) Declaration public void ClientCallback_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source ClientCallback_float_Function() Declaration public float ClientCallback_float_Function() Returns Type Description Single | Improve this Doc View Source ClientCallback_float_out_Function(out Single) Declaration public void ClientCallback_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source ClientCallback_int_Function() Declaration public int ClientCallback_int_Function() Returns Type Description Int32 | Improve this Doc View Source ClientCallback_int_out_Function(out Int32) Declaration public void ClientCallback_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source ClientCallback_long_Function() Declaration public long ClientCallback_long_Function() Returns Type Description Int64 | Improve this Doc View Source ClientCallback_long_out_Function(out Int64) Declaration public void ClientCallback_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source ClientCallback_ulong_Function() Declaration public ulong ClientCallback_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source ClientCallback_ulong_out_Function(out UInt64) Declaration public void ClientCallback_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source ClientCallback_Vector3_Function() Declaration public Vector3 ClientCallback_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source ClientCallback_Vector3_out_Function(out Vector3) Declaration public void ClientCallback_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value | Improve this Doc View Source Server_bool_Function() Declaration public bool Server_bool_Function() Returns Type Description Boolean | Improve this Doc View Source Server_bool_out_Function(out Boolean) Declaration public void Server_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source Server_byte_Function() Declaration public byte Server_byte_Function() Returns Type Description Byte | Improve this Doc View Source Server_byte_out_Function(out Byte) Declaration public void Server_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source Server_char_Function() Declaration public char Server_char_Function() Returns Type Description Char | Improve this Doc View Source Server_char_out_Function(out Char) Declaration public void Server_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source Server_ClassWithConstructor_Function() Declaration public ClassWithConstructor Server_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source Server_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void Server_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source Server_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor Server_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source Server_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void Server_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source Server_double_Function() Declaration public double Server_double_Function() Returns Type Description Double | Improve this Doc View Source Server_double_out_Function(out Double) Declaration public void Server_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source Server_float_Function() Declaration public float Server_float_Function() Returns Type Description Single | Improve this Doc View Source Server_float_out_Function(out Single) Declaration public void Server_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source Server_int_Function() Declaration public int Server_int_Function() Returns Type Description Int32 | Improve this Doc View Source Server_int_out_Function(out Int32) Declaration public void Server_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source Server_long_Function() Declaration public long Server_long_Function() Returns Type Description Int64 | Improve this Doc View Source Server_long_out_Function(out Int64) Declaration public void Server_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source Server_ulong_Function() Declaration public ulong Server_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source Server_ulong_out_Function(out UInt64) Declaration public void Server_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source Server_Vector3_Function() Declaration public Vector3 Server_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source Server_Vector3_out_Function(out Vector3) Declaration public void Server_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value | Improve this Doc View Source ServerCallback_bool_Function() Declaration public bool ServerCallback_bool_Function() Returns Type Description Boolean | Improve this Doc View Source ServerCallback_bool_out_Function(out Boolean) Declaration public void ServerCallback_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source ServerCallback_byte_Function() Declaration public byte ServerCallback_byte_Function() Returns Type Description Byte | Improve this Doc View Source ServerCallback_byte_out_Function(out Byte) Declaration public void ServerCallback_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source ServerCallback_char_Function() Declaration public char ServerCallback_char_Function() Returns Type Description Char | Improve this Doc View Source ServerCallback_char_out_Function(out Char) Declaration public void ServerCallback_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source ServerCallback_ClassWithConstructor_Function() Declaration public ClassWithConstructor ServerCallback_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source ServerCallback_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void ServerCallback_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor ServerCallback_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void ServerCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source ServerCallback_double_Function() Declaration public double ServerCallback_double_Function() Returns Type Description Double | Improve this Doc View Source ServerCallback_double_out_Function(out Double) Declaration public void ServerCallback_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source ServerCallback_float_Function() Declaration public float ServerCallback_float_Function() Returns Type Description Single | Improve this Doc View Source ServerCallback_float_out_Function(out Single) Declaration public void ServerCallback_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source ServerCallback_int_Function() Declaration public int ServerCallback_int_Function() Returns Type Description Int32 | Improve this Doc View Source ServerCallback_int_out_Function(out Int32) Declaration public void ServerCallback_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source ServerCallback_long_Function() Declaration public long ServerCallback_long_Function() Returns Type Description Int64 | Improve this Doc View Source ServerCallback_long_out_Function(out Int64) Declaration public void ServerCallback_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source ServerCallback_ulong_Function() Declaration public ulong ServerCallback_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source ServerCallback_ulong_out_Function(out UInt64) Declaration public void ServerCallback_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source ServerCallback_Vector3_Function() Declaration public Vector3 ServerCallback_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source ServerCallback_Vector3_out_Function(out Vector3) Declaration public void ServerCallback_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value"
  },
  "api/Mirror.Tests.NetworkTransformChildTest.html": {
    "href": "api/Mirror.Tests.NetworkTransformChildTest.html",
    "title": "Class NetworkTransformChildTest",
    "keywords": "Class NetworkTransformChildTest Inheritance Object NetworkTransformChildTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkTransformChildTest : object Methods | Improve this Doc View Source TargetComponentTest() Declaration public void TargetComponentTest()"
  },
  "api/Mirror.SyncListFloat.html": {
    "href": "api/Mirror.SyncListFloat.html",
    "title": "Class SyncListFloat",
    "keywords": "Class SyncListFloat Inheritance Object SyncList < Single > SyncListFloat Implements IReadOnlyList < Single > SyncObject Inherited Members SyncList<Single>.Count SyncList<Single>.IsReadOnly SyncList<Single>.Callback SyncList<Single>.IsDirty SyncList<Single>.Flush() SyncList<Single>.Reset() SyncList<Single>.OnSerializeAll(NetworkWriter) SyncList<Single>.OnSerializeDelta(NetworkWriter) SyncList<Single>.OnDeserializeAll(NetworkReader) SyncList<Single>.OnDeserializeDelta(NetworkReader) SyncList<Single>.Add(Single) SyncList<Single>.AddRange(IEnumerable<Single>) SyncList<Single>.Clear() SyncList<Single>.Contains(Single) SyncList<Single>.CopyTo(Single[], Int32) SyncList<Single>.IndexOf(Single) SyncList<Single>.FindIndex(Predicate<Single>) SyncList<Single>.Find(Predicate<Single>) SyncList<Single>.FindAll(Predicate<Single>) SyncList<Single>.Insert(Int32, Single) SyncList<Single>.InsertRange(Int32, IEnumerable<Single>) SyncList<Single>.Remove(Single) SyncList<Single>.RemoveAt(Int32) SyncList<Single>.RemoveAll(Predicate<Single>) SyncList<Single>.Item[Int32] SyncList<Single>.GetEnumerator() Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncListFloat : SyncList<float>, IReadOnlyList<float>, SyncObject Implements IReadOnlyList<> SyncObject"
  },
  "api/Mirror.Examples.Tanks.Tank.html": {
    "href": "api/Mirror.Examples.Tanks.Tank.html",
    "title": "Class Tank",
    "keywords": "Class Tank Inheritance Object NetworkBehaviour Tank Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.Tanks Assembly : Mirror.Examples.dll Syntax public class Tank : NetworkBehaviour Fields | Improve this Doc View Source agent Declaration public NavMeshAgent agent Field Value Type Description NavMeshAgent | Improve this Doc View Source animator Declaration public Animator animator Field Value Type Description Animator | Improve this Doc View Source projectileMount Declaration public Transform projectileMount Field Value Type Description Transform | Improve this Doc View Source projectilePrefab Declaration public GameObject projectilePrefab Field Value Type Description GameObject | Improve this Doc View Source rotationSpeed Declaration public float rotationSpeed Field Value Type Description Single | Improve this Doc View Source shootKey Declaration public KeyCode shootKey Field Value Type Description KeyCode"
  },
  "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_PrepareToSpawnSceneObjects.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_PrepareToSpawnSceneObjects.html",
    "title": "Class ClientSceneTests_PrepareToSpawnSceneObjects",
    "keywords": "Class ClientSceneTests_PrepareToSpawnSceneObjects Inheritance Object ClientSceneTestsBase ClientSceneTests_PrepareToSpawnSceneObjects Inherited Members ClientSceneTestsBase.ValidPrefabAssetGuid ClientSceneTestsBase.PrefabWithChildrenAssetGuid ClientSceneTestsBase.InvalidPrefabAssetGuid ClientSceneTestsBase.AnotherGuidString ClientSceneTestsBase.validPrefab ClientSceneTestsBase.validPrefabNetworkIdentity ClientSceneTestsBase.prefabWithChildren ClientSceneTestsBase.invalidPrefab ClientSceneTestsBase.validPrefabGuid ClientSceneTestsBase.anotherGuid ClientSceneTestsBase._createdObjects ClientSceneTestsBase.prefabs ClientSceneTestsBase.spawnHandlers ClientSceneTestsBase.unspawnHandlers ClientSceneTestsBase.spawnableObjects ClientSceneTestsBase.OneTimeSetUp() ClientSceneTestsBase.TearDown() ClientSceneTestsBase.OneTimeTearDown() Namespace : Mirror.Tests.ClientSceneTests Assembly : Mirror.Tests.dll Syntax public class ClientSceneTests_PrepareToSpawnSceneObjects : ClientSceneTestsBase Methods | Improve this Doc View Source AddsAllInactiveIdentitiesInSceneWithSceneIdToDictionary() Declaration public void AddsAllInactiveIdentitiesInSceneWithSceneIdToDictionary() | Improve this Doc View Source AddsIdentitiesToDictionaryUsingSceneId() Declaration public void AddsIdentitiesToDictionaryUsingSceneId() | Improve this Doc View Source ClearsExistingItemsFromDictionary() Declaration public void ClearsExistingItemsFromDictionary() | Improve this Doc View Source DoesNotAddActiveObjectsToDictionary() Declaration public void DoesNotAddActiveObjectsToDictionary() | Improve this Doc View Source DoesNotAddObjectsWithNoSceneId() Declaration public void DoesNotAddObjectsWithNoSceneId()"
  },
  "api/Mirror.Tests.NetworkBehaviourSetSyncVarNetworkIdentityComponent.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourSetSyncVarNetworkIdentityComponent.html",
    "title": "Class NetworkBehaviourSetSyncVarNetworkIdentityComponent",
    "keywords": "Class NetworkBehaviourSetSyncVarNetworkIdentityComponent Inheritance Object NetworkBehaviour NetworkBehaviourSetSyncVarNetworkIdentityComponent Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourSetSyncVarNetworkIdentityComponent : NetworkBehaviour Fields | Improve this Doc View Source test Declaration public NetworkIdentity test Field Value Type Description NetworkIdentity | Improve this Doc View Source testNetId Declaration public uint testNetId Field Value Type Description UInt32 Methods | Improve this Doc View Source SetSyncVarNetworkIdentityExposed(NetworkIdentity, UInt64) Declaration public void SetSyncVarNetworkIdentityExposed(NetworkIdentity newNetworkIdentity, ulong dirtyBit) Parameters Type Name Description NetworkIdentity newNetworkIdentity UInt64 dirtyBit"
  },
  "api/Mirror.NetworkSceneChecker.html": {
    "href": "api/Mirror.NetworkSceneChecker.html",
    "title": "Class NetworkSceneChecker",
    "keywords": "Class NetworkSceneChecker Component that controls visibility of networked objects between scenes. Any object with this component on it will only be visible to other objects in the same scene This would be used when the server has multiple additive subscenes loaded to isolate players to their respective subscenes Inheritance Object NetworkBehaviour NetworkVisibility NetworkSceneChecker Inherited Members Mirror.NetworkVisibility.OnRebuildObservers(HashSet<>, System.Boolean) NetworkVisibility.OnSetHostVisibility(Boolean) NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class NetworkSceneChecker : NetworkVisibility Fields | Improve this Doc View Source forceHidden Flag to force this object to be hidden from all observers. If this object is a player object, it will not be hidden for that client. Declaration public bool forceHidden Field Value Type Description Boolean Methods | Improve this Doc View Source OnCheckObserver(NetworkConnection) Callback used by the visibility system to determine if an observer (player) can see this object. If this function returns true, the network connection will be added as an observer. Declaration public override bool OnCheckObserver(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Network connection of a player. Returns Type Description Boolean True if the player can see this object. Overrides NetworkVisibility.OnCheckObserver(NetworkConnection) | Improve this Doc View Source OnRebuildObservers(HashSet<NetworkConnection>, Boolean) Callback used by the visibility system to (re)construct the set of observers that can see this object. Implementations of this callback should add network connections of players that can see this object to the observers set. Declaration public override void OnRebuildObservers(HashSet<NetworkConnection> observers, bool initialize) Parameters Type Name Description HashSet < NetworkConnection > observers The new set of observers for this object. Boolean initialize True if the set of observers is being built for the first time. | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer()"
  },
  "api/Mirror.InspectorHelper.html": {
    "href": "api/Mirror.InspectorHelper.html",
    "title": "Class InspectorHelper",
    "keywords": "Class InspectorHelper Inheritance Object InspectorHelper Namespace : Mirror Assembly : Mirror.Editor.dll Syntax public static class InspectorHelper : object Methods | Improve this Doc View Source GetAllFields(Type, Type) Gets all public and private fields for a type Declaration public static IEnumerable<FieldInfo> GetAllFields(Type type, Type deepestBaseType) Parameters Type Name Description Type type Type deepestBaseType Stops at this base type (exclusive) Returns Type Description IEnumerable < FieldInfo > | Improve this Doc View Source HasShowInInspector(FieldInfo) Declaration public static bool HasShowInInspector(this FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description Boolean | Improve this Doc View Source IsSerializeField(FieldInfo) Declaration public static bool IsSerializeField(this FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description Boolean | Improve this Doc View Source IsSyncObject(FieldInfo) Declaration public static bool IsSyncObject(this FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description Boolean | Improve this Doc View Source IsSyncVar(FieldInfo) Declaration public static bool IsSyncVar(this FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description Boolean | Improve this Doc View Source IsVisibleField(FieldInfo) Declaration public static bool IsVisibleField(this FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description Boolean | Improve this Doc View Source IsVisibleSyncObject(FieldInfo) Declaration public static bool IsVisibleSyncObject(this FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description Boolean"
  },
  "api/Mirror.Discovery.NetworkDiscovery.html": {
    "href": "api/Mirror.Discovery.NetworkDiscovery.html",
    "title": "Class NetworkDiscovery",
    "keywords": "Class NetworkDiscovery Inheritance Object NetworkDiscoveryBase < ServerRequest , ServerResponse > NetworkDiscovery Inherited Members NetworkDiscoveryBase<ServerRequest, ServerResponse>.SupportedOnThisPlatform NetworkDiscoveryBase<ServerRequest, ServerResponse>.secretHandshake NetworkDiscoveryBase<ServerRequest, ServerResponse>.serverBroadcastListenPort NetworkDiscoveryBase<ServerRequest, ServerResponse>.serverUdpClient NetworkDiscoveryBase<ServerRequest, ServerResponse>.clientUdpClient NetworkDiscoveryBase<ServerRequest, ServerResponse>.RandomLong() NetworkDiscoveryBase<ServerRequest, ServerResponse>.Start() NetworkDiscoveryBase<ServerRequest, ServerResponse>.AdvertiseServer() NetworkDiscoveryBase<ServerRequest, ServerResponse>.ServerListenAsync() NetworkDiscoveryBase<ServerRequest, ServerResponse>.ProcessClientRequest(ServerRequest, IPEndPoint) NetworkDiscoveryBase<ServerRequest, ServerResponse>.ProcessRequest(ServerRequest, IPEndPoint) NetworkDiscoveryBase<ServerRequest, ServerResponse>.StartDiscovery() NetworkDiscoveryBase<ServerRequest, ServerResponse>.StopDiscovery() NetworkDiscoveryBase<ServerRequest, ServerResponse>.ClientListenAsync() NetworkDiscoveryBase<ServerRequest, ServerResponse>.BroadcastDiscoveryRequest() NetworkDiscoveryBase<ServerRequest, ServerResponse>.GetRequest() NetworkDiscoveryBase<ServerRequest, ServerResponse>.ProcessResponse(ServerResponse, IPEndPoint) Namespace : Mirror.Discovery Assembly : Mirror.Components.dll Syntax public class NetworkDiscovery : NetworkDiscoveryBase<ServerRequest, ServerResponse> Fields | Improve this Doc View Source OnServerFound Declaration public ServerFoundUnityEvent OnServerFound Field Value Type Description ServerFoundUnityEvent | Improve this Doc View Source transport Declaration public Transport transport Field Value Type Description Transport Properties | Improve this Doc View Source ServerId Declaration public long ServerId { get; } Property Value Type Description Int64 Methods | Improve this Doc View Source GetRequest() Create a message that will be broadcasted on the network to discover servers Declaration protected override ServerRequest GetRequest() Returns Type Description ServerRequest An instance of ServerRequest with data to be broadcasted Overrides Mirror.Discovery.NetworkDiscoveryBase<Mirror.Discovery.ServerRequest, Mirror.Discovery.ServerResponse>.GetRequest() Remarks Override if you wish to include additional data in the discovery message such as desired game mode, language, difficulty, etc... | Improve this Doc View Source ProcessRequest(ServerRequest, IPEndPoint) Process the request from a client Declaration protected override ServerResponse ProcessRequest(ServerRequest request, IPEndPoint endpoint) Parameters Type Name Description ServerRequest request Request comming from client IPEndPoint endpoint Address of the client that sent the request Returns Type Description ServerResponse The message to be sent back to the client or null Overrides Mirror.Discovery.NetworkDiscoveryBase<Mirror.Discovery.ServerRequest, Mirror.Discovery.ServerResponse>.ProcessRequest(Mirror.Discovery.ServerRequest, IPEndPoint) Remarks Override if you wish to provide more information to the clients such as the name of the host player | Improve this Doc View Source ProcessResponse(ServerResponse, IPEndPoint) Process the answer from a server Declaration protected override void ProcessResponse(ServerResponse response, IPEndPoint endpoint) Parameters Type Name Description ServerResponse response Response that came from the server IPEndPoint endpoint Address of the server that replied Overrides Mirror.Discovery.NetworkDiscoveryBase<Mirror.Discovery.ServerRequest, Mirror.Discovery.ServerResponse>.ProcessResponse(Mirror.Discovery.ServerResponse, IPEndPoint) Remarks A client receives a reply from a server, this method processes the reply and raises an event | Improve this Doc View Source Start() Declaration public override void Start() Overrides Mirror.Discovery.NetworkDiscoveryBase<Mirror.Discovery.ServerRequest, Mirror.Discovery.ServerResponse>.Start()"
  },
  "api/Mirror.SyncListBool.html": {
    "href": "api/Mirror.SyncListBool.html",
    "title": "Class SyncListBool",
    "keywords": "Class SyncListBool Inheritance Object SyncList < Boolean > SyncListBool Implements IReadOnlyList < Boolean > SyncObject Inherited Members SyncList<Boolean>.Count SyncList<Boolean>.IsReadOnly SyncList<Boolean>.Callback SyncList<Boolean>.IsDirty SyncList<Boolean>.Flush() SyncList<Boolean>.Reset() SyncList<Boolean>.OnSerializeAll(NetworkWriter) SyncList<Boolean>.OnSerializeDelta(NetworkWriter) SyncList<Boolean>.OnDeserializeAll(NetworkReader) SyncList<Boolean>.OnDeserializeDelta(NetworkReader) SyncList<Boolean>.Add(Boolean) SyncList<Boolean>.AddRange(IEnumerable<Boolean>) SyncList<Boolean>.Clear() SyncList<Boolean>.Contains(Boolean) SyncList<Boolean>.CopyTo(Boolean[], Int32) SyncList<Boolean>.IndexOf(Boolean) SyncList<Boolean>.FindIndex(Predicate<Boolean>) SyncList<Boolean>.Find(Predicate<Boolean>) SyncList<Boolean>.FindAll(Predicate<Boolean>) SyncList<Boolean>.Insert(Int32, Boolean) SyncList<Boolean>.InsertRange(Int32, IEnumerable<Boolean>) SyncList<Boolean>.Remove(Boolean) SyncList<Boolean>.RemoveAt(Int32) SyncList<Boolean>.RemoveAll(Predicate<Boolean>) SyncList<Boolean>.Item[Int32] SyncList<Boolean>.GetEnumerator() Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncListBool : SyncList<bool>, IReadOnlyList<bool>, SyncObject Implements IReadOnlyList<> SyncObject"
  },
  "api/Mirror.Tests.ClientSceneTests_RegisterPrefabBase.html": {
    "href": "api/Mirror.Tests.ClientSceneTests_RegisterPrefabBase.html",
    "title": "Class ClientSceneTests_RegisterPrefabBase",
    "keywords": "Class ClientSceneTests_RegisterPrefabBase Used by both runtime and edittime tests Inheritance Object ClientSceneTestsBase ClientSceneTests_RegisterPrefabBase ClientSceneTests_RegisterPrefab ClientSceneTests_Runtime_RegisterPrefab Inherited Members ClientSceneTestsBase.ValidPrefabAssetGuid ClientSceneTestsBase.PrefabWithChildrenAssetGuid ClientSceneTestsBase.InvalidPrefabAssetGuid ClientSceneTestsBase.AnotherGuidString ClientSceneTestsBase.validPrefab ClientSceneTestsBase.validPrefabNetworkIdentity ClientSceneTestsBase.prefabWithChildren ClientSceneTestsBase.invalidPrefab ClientSceneTestsBase.validPrefabGuid ClientSceneTestsBase.anotherGuid ClientSceneTestsBase._createdObjects ClientSceneTestsBase.prefabs ClientSceneTestsBase.spawnHandlers ClientSceneTestsBase.unspawnHandlers ClientSceneTestsBase.spawnableObjects ClientSceneTestsBase.OneTimeSetUp() ClientSceneTestsBase.TearDown() ClientSceneTestsBase.OneTimeTearDown() Namespace : Mirror.Tests Assembly : Mirror.Tests.Common.dll Syntax public abstract class ClientSceneTests_RegisterPrefabBase : ClientSceneTestsBase Methods | Improve this Doc View Source CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration protected void CallRegisterPrefab(GameObject prefab, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description GameObject prefab ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, Guid) Declaration protected void CallRegisterPrefab(GameObject prefab, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload, Guid guid) Parameters Type Name Description GameObject prefab ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload Guid guid | Improve this Doc View Source CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, SpawnDelegate) Declaration protected void CallRegisterPrefab(GameObject prefab, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload, SpawnDelegate spawnHandler) Parameters Type Name Description GameObject prefab ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload SpawnDelegate spawnHandler | Improve this Doc View Source CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, SpawnHandlerDelegate) Declaration protected void CallRegisterPrefab(GameObject prefab, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload, SpawnHandlerDelegate spawnHandlerDelegate) Parameters Type Name Description GameObject prefab ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload SpawnHandlerDelegate spawnHandlerDelegate | Improve this Doc View Source CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, UnSpawnDelegate) Declaration protected void CallRegisterPrefab(GameObject prefab, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload, UnSpawnDelegate unspawnHandler) Parameters Type Name Description GameObject prefab ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload UnSpawnDelegate unspawnHandler | Improve this Doc View Source CheckOverloadWithAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, Boolean) Declaration public void CheckOverloadWithAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload, bool expected) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload Boolean expected | Improve this Doc View Source CheckOverloadWithHandler(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, Boolean) Declaration public void CheckOverloadWithHandler(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload, bool expected) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload Boolean expected | Improve this Doc View Source GuidForOverload(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration protected Guid GuidForOverload(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload Returns Type Description Guid | Improve this Doc View Source OverloadWithAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration protected static bool OverloadWithAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload Returns Type Description Boolean | Improve this Doc View Source OverloadWithHandler(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration protected static bool OverloadWithHandler(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload Returns Type Description Boolean"
  },
  "api/kcp2k.Log.html": {
    "href": "api/kcp2k.Log.html",
    "title": "Class Log",
    "keywords": "Class Log Inheritance Object Log Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : kcp2k Assembly : kcp2k.dll Syntax public static class Log Fields | Improve this Doc View Source Error Declaration public static Action<string> Error Field Value Type Description Action < String > | Improve this Doc View Source Info Declaration public static Action<string> Info Field Value Type Description Action < String > | Improve this Doc View Source Warning Declaration public static Action<string> Warning Field Value Type Description Action < String >"
  },
  "api/Mirror.SimpleWeb.SimpleWebTransport.html": {
    "href": "api/Mirror.SimpleWeb.SimpleWebTransport.html",
    "title": "Class SimpleWebTransport",
    "keywords": "Class SimpleWebTransport Inheritance Object Transport SimpleWebTransport Inherited Members Transport.activeTransport Transport.OnClientConnected Transport.OnClientDataReceived Transport.OnClientError Transport.OnClientDisconnected Transport.ClientConnect(Uri) Mirror.Transport.ClientSend(System.Int32, ArraySegment<>) Transport.OnServerConnected Transport.OnServerDataReceived Transport.OnServerError Transport.OnServerDisconnected Mirror.Transport.ServerSend(System.Int32, System.Int32, ArraySegment<>) Transport.Update() Transport.OnApplicationQuit() Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public class SimpleWebTransport : Transport Fields | Improve this Doc View Source batchSend Declaration public bool batchSend Field Value Type Description Boolean | Improve this Doc View Source clientMaxMessagesPerTick Declaration public int clientMaxMessagesPerTick Field Value Type Description Int32 | Improve this Doc View Source handshakeMaxSize Declaration public int handshakeMaxSize Field Value Type Description Int32 | Improve this Doc View Source maxMessageSize Declaration public int maxMessageSize Field Value Type Description Int32 | Improve this Doc View Source noDelay Declaration public bool noDelay Field Value Type Description Boolean | Improve this Doc View Source NormalScheme Declaration public const string NormalScheme = null Field Value Type Description String | Improve this Doc View Source port Declaration public ushort port Field Value Type Description UInt16 | Improve this Doc View Source receiveTimeout Declaration public int receiveTimeout Field Value Type Description Int32 | Improve this Doc View Source SecureScheme Declaration public const string SecureScheme = null Field Value Type Description String | Improve this Doc View Source sendTimeout Declaration public int sendTimeout Field Value Type Description Int32 | Improve this Doc View Source serverMaxMessagesPerTick Declaration public int serverMaxMessagesPerTick Field Value Type Description Int32 | Improve this Doc View Source sslCertJson Declaration public string sslCertJson Field Value Type Description String | Improve this Doc View Source sslEnabled Declaration public bool sslEnabled Field Value Type Description Boolean | Improve this Doc View Source sslProtocols Declaration public SslProtocols sslProtocols Field Value Type Description SslProtocols | Improve this Doc View Source waitBeforeSend Declaration public bool waitBeforeSend Field Value Type Description Boolean Properties | Improve this Doc View Source LogLevels Gets _logLevels field Sets _logLevels and Log.level fields Declaration public Log.Levels LogLevels { get; set; } Property Value Type Description Log.Levels Methods | Improve this Doc View Source Available() Declaration public override bool Available() Returns Type Description Boolean Overrides Transport.Available() | Improve this Doc View Source ClientConnect(String) Declaration public override void ClientConnect(string hostname) Parameters Type Name Description String hostname Overrides Transport.ClientConnect(String) | Improve this Doc View Source ClientConnected() Declaration public override bool ClientConnected() Returns Type Description Boolean Overrides Transport.ClientConnected() | Improve this Doc View Source ClientDisconnect() Declaration public override void ClientDisconnect() Overrides Transport.ClientDisconnect() | Improve this Doc View Source ClientSend(Int32, ArraySegment<Byte>) Declaration public override void ClientSend(int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 channelId ArraySegment < Byte > segment | Improve this Doc View Source GetMaxPacketSize(Int32) Declaration public override int GetMaxPacketSize(int channelId = 0) Parameters Type Name Description Int32 channelId Returns Type Description Int32 Overrides Transport.GetMaxPacketSize(Int32) | Improve this Doc View Source ProcessMessages() Processes message in server and client queues Invokes OnData events allowing mirror to handle messages (Cmd/SyncVar/etc) Called within LateUpdate, Can be called by user to process message before important logic Declaration public void ProcessMessages() | Improve this Doc View Source ServerActive() Declaration public override bool ServerActive() Returns Type Description Boolean Overrides Transport.ServerActive() | Improve this Doc View Source ServerDisconnect(Int32) Declaration public override bool ServerDisconnect(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description Boolean Overrides Transport.ServerDisconnect(Int32) | Improve this Doc View Source ServerGetClientAddress(Int32) Declaration public override string ServerGetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description String Overrides Transport.ServerGetClientAddress(Int32) | Improve this Doc View Source ServerSend(Int32, Int32, ArraySegment<Byte>) Declaration public override void ServerSend(int connectionId, int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 connectionId Int32 channelId ArraySegment < Byte > segment | Improve this Doc View Source ServerStart() Declaration public override void ServerStart() Overrides Transport.ServerStart() | Improve this Doc View Source ServerStop() Declaration public override void ServerStop() Overrides Transport.ServerStop() | Improve this Doc View Source ServerUri() Declaration public override Uri ServerUri() Returns Type Description Uri Overrides Transport.ServerUri() | Improve this Doc View Source Shutdown() Declaration public override void Shutdown() Overrides Transport.Shutdown()"
  },
  "api/Mirror.NotReadyMessage.html": {
    "href": "api/Mirror.NotReadyMessage.html",
    "title": "Struct NotReadyMessage",
    "keywords": "Struct NotReadyMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct NotReadyMessage : NetworkMessage Implements NetworkMessage"
  },
  "api/Mirror.MirrorInvokeType.html": {
    "href": "api/Mirror.MirrorInvokeType.html",
    "title": "Enum MirrorInvokeType",
    "keywords": "Enum MirrorInvokeType Namespace : Mirror Assembly : Mirror.dll Syntax public enum MirrorInvokeType : int Fields Name Description ClientRpc Command"
  },
  "api/Mirror.Tests.Generators.AttributeTestGenerator.html": {
    "href": "api/Mirror.Tests.Generators.AttributeTestGenerator.html",
    "title": "Class AttributeTestGenerator",
    "keywords": "Class AttributeTestGenerator Inheritance Object GeneratorBase AttributeTestGenerator Inherited Members GeneratorBase.BaseNameSpace GeneratorBase.Save(String, String, Boolean) GeneratorBase.Merge(IEnumerable<String>, String) Namespace : Mirror.Tests.Generators Assembly : Mirror.Tests.dll Syntax public class AttributeTestGenerator : GeneratorBase Methods | Improve this Doc View Source GenerateTestFiles() Declaration public static void GenerateTestFiles()"
  },
  "api/Mirror.Cloud.ListServerService.PartialServerJson.html": {
    "href": "api/Mirror.Cloud.ListServerService.PartialServerJson.html",
    "title": "Struct PartialServerJson",
    "keywords": "Struct PartialServerJson Implements ICanBeJson Namespace : Mirror.Cloud.ListServerService Assembly : Mirror.Cloud.dll Syntax public struct PartialServerJson : ICanBeJson Fields | Improve this Doc View Source customData Array of custom data, use SetCustomData to set values optional Declaration public KeyValue[] customData Field Value Type Description KeyValue [] | Improve this Doc View Source displayName optional Declaration public string displayName Field Value Type Description String | Improve this Doc View Source maxPlayerCount optional Declaration public int maxPlayerCount Field Value Type Description Int32 | Improve this Doc View Source playerCount optional Declaration public int playerCount Field Value Type Description Int32 Methods | Improve this Doc View Source SetCustomData(Dictionary<String, String>) Declaration public void SetCustomData(Dictionary<string, string> data) Parameters Type Name Description Dictionary < String , String > data | Improve this Doc View Source Validate() Declaration public void Validate() Implements ICanBeJson"
  },
  "api/Mirror.Weaver.Tests.WeaverTestsBuildFromTestName.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverTestsBuildFromTestName.html",
    "title": "Class WeaverTestsBuildFromTestName",
    "keywords": "Class WeaverTestsBuildFromTestName Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverClientRpcTests WeaverClientServerAttributeTests WeaverCommandTests WeaverGeneralTests WeaverGeneratedReaderWriterAnotherAssemblyTests WeaverGeneratedReaderWriterTests WeaverMessageTests WeaverMonoBehaviourTests WeaverNetworkBehaviourTests WeaverSyncDictionaryTests WeaverSyncListTests WeaverSyncSetTests WeaverSyncVarHookTests WeaverSyncVarTests WeaverTargetRpcTests Inherited Members WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public abstract class WeaverTestsBuildFromTestName : WeaverTests Methods | Improve this Doc View Source HasError(String, String) Declaration protected void HasError(string messsage, string atType) Parameters Type Name Description String messsage String atType | Improve this Doc View Source HasNoErrors() Declaration protected void HasNoErrors() | Improve this Doc View Source HasWarning(String, String) Declaration protected void HasWarning(string messsage, string atType) Parameters Type Name Description String messsage String atType | Improve this Doc View Source IsSuccess() Declaration protected void IsSuccess() | Improve this Doc View Source TestSetup() Declaration public virtual void TestSetup()"
  },
  "api/Mirror.Cloud.UnityEqualCheckExtension.html": {
    "href": "api/Mirror.Cloud.UnityEqualCheckExtension.html",
    "title": "Class UnityEqualCheckExtension",
    "keywords": "Class UnityEqualCheckExtension Inheritance Object UnityEqualCheckExtension Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public static class UnityEqualCheckExtension : object Methods | Improve this Doc View Source IsNotNull(IUnityEqualCheck) Declaration public static bool IsNotNull(this IUnityEqualCheck obj) Parameters Type Name Description IUnityEqualCheck obj Returns Type Description Boolean | Improve this Doc View Source IsNull(IUnityEqualCheck) Declaration public static bool IsNull(this IUnityEqualCheck obj) Parameters Type Name Description IUnityEqualCheck obj Returns Type Description Boolean"
  },
  "api/Mirror.Tests.MockQuestReaderWriter.html": {
    "href": "api/Mirror.Tests.MockQuestReaderWriter.html",
    "title": "Class MockQuestReaderWriter",
    "keywords": "Class MockQuestReaderWriter Inheritance Object MockQuestReaderWriter Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public static class MockQuestReaderWriter : object Methods | Improve this Doc View Source WriteQuest(NetworkReader) Declaration public static MockQuest WriteQuest(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description MockQuest | Improve this Doc View Source WriteQuest(NetworkWriter, MockQuest) Declaration public static void WriteQuest(this NetworkWriter writer, MockQuest quest) Parameters Type Name Description NetworkWriter writer MockQuest quest"
  },
  "api/Mirror.Examples.NetworkRoom.NetworkRoomManagerExt.html": {
    "href": "api/Mirror.Examples.NetworkRoom.NetworkRoomManagerExt.html",
    "title": "Class NetworkRoomManagerExt",
    "keywords": "Class NetworkRoomManagerExt Inheritance Object NetworkManager NetworkRoomManager NetworkRoomManagerExt Inherited Members NetworkRoomManager.minPlayers NetworkRoomManager.roomPlayerPrefab NetworkRoomManager.RoomScene NetworkRoomManager.GameplayScene NetworkRoomManager.pendingPlayers NetworkRoomManager.roomSlots NetworkRoomManager.allPlayersReady NetworkRoomManager.OnValidate() NetworkRoomManager.OnServerReady(NetworkConnection) NetworkRoomManager.CheckReadyToBegin() NetworkRoomManager.OnServerConnect(NetworkConnection) NetworkRoomManager.OnServerDisconnect(NetworkConnection) NetworkRoomManager.clientIndex NetworkRoomManager.OnServerAddPlayer(NetworkConnection) NetworkRoomManager.RecalculateRoomPlayerIndices() NetworkRoomManager.ServerChangeScene(String) NetworkRoomManager.OnServerSceneChanged(String) NetworkRoomManager.OnStartServer() NetworkRoomManager.OnStartHost() NetworkRoomManager.OnStopServer() NetworkRoomManager.OnStopHost() NetworkRoomManager.OnStartClient() NetworkRoomManager.OnClientConnect(NetworkConnection) NetworkRoomManager.OnClientDisconnect(NetworkConnection) NetworkRoomManager.OnStopClient() NetworkRoomManager.OnClientSceneChanged(NetworkConnection) NetworkRoomManager.OnRoomStartHost() NetworkRoomManager.OnRoomStopHost() NetworkRoomManager.OnRoomStartServer() NetworkRoomManager.OnRoomServerConnect(NetworkConnection) NetworkRoomManager.OnRoomServerDisconnect(NetworkConnection) NetworkRoomManager.OnRoomServerCreateRoomPlayer(NetworkConnection) NetworkRoomManager.OnRoomServerCreateGamePlayer(NetworkConnection, GameObject) NetworkRoomManager.OnRoomServerAddPlayer(NetworkConnection) NetworkRoomManager.OnRoomServerPlayersNotReady() NetworkRoomManager.OnRoomClientEnter() NetworkRoomManager.OnRoomClientExit() NetworkRoomManager.OnRoomClientConnect(NetworkConnection) NetworkRoomManager.OnRoomClientDisconnect(NetworkConnection) NetworkRoomManager.OnRoomStartClient() NetworkRoomManager.OnRoomClientSceneChanged(NetworkConnection) NetworkRoomManager.OnRoomClientAddPlayerFailed() NetworkManager.dontDestroyOnLoad NetworkManager.runInBackground NetworkManager.autoStartServerBuild NetworkManager.showDebugMessages NetworkManager.serverTickRate NetworkManager.offlineScene NetworkManager.onlineScene NetworkManager.transport NetworkManager.networkAddress NetworkManager.maxConnections NetworkManager.disconnectInactiveConnections NetworkManager.disconnectInactiveTimeout NetworkManager.authenticator NetworkManager.playerPrefab NetworkManager.autoCreatePlayer NetworkManager.playerSpawnMethod NetworkManager.spawnPrefabs NetworkManager.singleton NetworkManager.numPlayers NetworkManager.isNetworkActive NetworkManager.clientLoadedScene NetworkManager.mode NetworkManager.Awake() NetworkManager.Start() NetworkManager.LateUpdate() NetworkManager.IsSceneActive(String) NetworkManager.StartServer() NetworkManager.StartClient() NetworkManager.StartClient(Uri) NetworkManager.StartHost() NetworkManager.StopHost() NetworkManager.StopServer() NetworkManager.StopClient() NetworkManager.OnApplicationQuit() NetworkManager.ConfigureServerFrameRate() NetworkManager.Shutdown() NetworkManager.OnDestroy() NetworkManager.networkSceneName NetworkManager.loadingSceneAsync NetworkManager.startPositionIndex NetworkManager.startPositions NetworkManager.RegisterStartPosition(Transform) NetworkManager.UnRegisterStartPosition(Transform) NetworkManager.GetStartPosition() NetworkManager.OnServerError(NetworkConnection, Int32) NetworkManager.OnServerChangeScene(String) NetworkManager.OnClientError(NetworkConnection, Int32) NetworkManager.OnClientNotReady(NetworkConnection) NetworkManager.OnClientChangeScene(String, SceneOperation, Boolean) Namespace : Mirror.Examples.NetworkRoom Assembly : Mirror.Examples.dll Syntax public class NetworkRoomManagerExt : NetworkRoomManager Fields | Improve this Doc View Source rewardPrefab Declaration public GameObject rewardPrefab Field Value Type Description GameObject Methods | Improve this Doc View Source OnGUI() Declaration public override void OnGUI() Overrides NetworkRoomManager.OnGUI() | Improve this Doc View Source OnRoomServerPlayersReady() Declaration public override void OnRoomServerPlayersReady() Overrides NetworkRoomManager.OnRoomServerPlayersReady() | Improve this Doc View Source OnRoomServerSceneChanged(String) This is called on the server when a networked scene finishes loading. Declaration public override void OnRoomServerSceneChanged(string sceneName) Parameters Type Name Description String sceneName Name of the new scene. Overrides NetworkRoomManager.OnRoomServerSceneChanged(String) | Improve this Doc View Source OnRoomServerSceneLoadedForPlayer(NetworkConnection, GameObject, GameObject) Called just after GamePlayer object is instantiated and just before it replaces RoomPlayer object. This is the ideal point to pass any data like player name, credentials, tokens, colors, etc. into the GamePlayer object as it is about to enter the Online scene. Declaration public override bool OnRoomServerSceneLoadedForPlayer(NetworkConnection conn, GameObject roomPlayer, GameObject gamePlayer) Parameters Type Name Description NetworkConnection conn GameObject roomPlayer GameObject gamePlayer Returns Type Description Boolean true unless some code in here decides it needs to abort the replacement | Improve this Doc View Source OnRoomStopClient() Declaration public override void OnRoomStopClient() Overrides NetworkRoomManager.OnRoomStopClient() | Improve this Doc View Source OnRoomStopServer() Declaration public override void OnRoomStopServer() Overrides NetworkRoomManager.OnRoomStopServer()"
  },
  "api/Mirror.Weaver.Tests.WeaverClientServerAttributeTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverClientServerAttributeTests.html",
    "title": "Class WeaverClientServerAttributeTests",
    "keywords": "Class WeaverClientServerAttributeTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverClientServerAttributeTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverClientServerAttributeTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source ClientAttributeOnAbstractMethod() Declaration public void ClientAttributeOnAbstractMethod() | Improve this Doc View Source ClientAttributeOnOverrideMethod() Declaration public void ClientAttributeOnOverrideMethod() | Improve this Doc View Source ClientAttributeOnVirutalMethod() Declaration public void ClientAttributeOnVirutalMethod() | Improve this Doc View Source MonoBehaviourClient() Declaration public void MonoBehaviourClient() | Improve this Doc View Source MonoBehaviourServer() Declaration public void MonoBehaviourServer() | Improve this Doc View Source NetworkBehaviourClient() Declaration public void NetworkBehaviourClient() | Improve this Doc View Source NetworkBehaviourServer() Declaration public void NetworkBehaviourServer() | Improve this Doc View Source RegularClassClient() Declaration public void RegularClassClient() | Improve this Doc View Source RegularClassServer() Declaration public void RegularClassServer() | Improve this Doc View Source ServerAttributeOnAbstractMethod() Declaration public void ServerAttributeOnAbstractMethod() | Improve this Doc View Source ServerAttributeOnOverrideMethod() Declaration public void ServerAttributeOnOverrideMethod() | Improve this Doc View Source ServerAttributeOnVirutalMethod() Declaration public void ServerAttributeOnVirutalMethod() | Improve this Doc View Source StaticClassClient() Declaration public void StaticClassClient() | Improve this Doc View Source StaticClassServer() Declaration public void StaticClassServer()"
  },
  "api/Mirror.Tests.NetworkMatchCheckerTest.html": {
    "href": "api/Mirror.Tests.NetworkMatchCheckerTest.html",
    "title": "Class NetworkMatchCheckerTest",
    "keywords": "Class NetworkMatchCheckerTest Inheritance Object NetworkMatchCheckerTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkMatchCheckerTest : object Methods | Improve this Doc View Source ChangingMatchIdShouldRebuildObservers() Declaration public void ChangingMatchIdShouldRebuildObservers() | Improve this Doc View Source ClearingMatchIdShouldRebuildObservers() Declaration public void ClearingMatchIdShouldRebuildObservers() | Improve this Doc View Source OnCheckObserverShouldBeFalseForDifferentMatchId() Declaration public void OnCheckObserverShouldBeFalseForDifferentMatchId() | Improve this Doc View Source OnCheckObserverShouldBeFalseForEmptyGuid() Declaration public void OnCheckObserverShouldBeFalseForEmptyGuid() | Improve this Doc View Source OnCheckObserverShouldBeFalseIfObjectDoesNotHaveNetworkMatchChecker() Declaration public void OnCheckObserverShouldBeFalseIfObjectDoesNotHaveNetworkMatchChecker() | Improve this Doc View Source OnCheckObserverShouldBeTrueForSameMatchId() Declaration public void OnCheckObserverShouldBeTrueForSameMatchId() | Improve this Doc View Source SettingMatchIdShouldRebuildObservers() Declaration public void SettingMatchIdShouldRebuildObservers() | Improve this Doc View Source Setup() Declaration public void Setup() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.Cloud.ListServerService.ListServer.html": {
    "href": "api/Mirror.Cloud.ListServerService.ListServer.html",
    "title": "Class ListServer",
    "keywords": "Class ListServer Inheritance Object ListServer Namespace : Mirror.Cloud.ListServerService Assembly : Mirror.Cloud.dll Syntax public sealed class ListServer : object Constructors | Improve this Doc View Source ListServer(IListServerServerApi, IListServerClientApi) Declaration public ListServer(IListServerServerApi serverApi, IListServerClientApi clientApi) Parameters Type Name Description IListServerServerApi serverApi IListServerClientApi clientApi Fields | Improve this Doc View Source ClientApi Declaration public readonly IListServerClientApi ClientApi Field Value Type Description IListServerClientApi | Improve this Doc View Source ServerApi Declaration public readonly IListServerServerApi ServerApi Field Value Type Description IListServerServerApi"
  },
  "api/Mirror.Tests.NetworkBehaviourDelegateComponent.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourDelegateComponent.html",
    "title": "Class NetworkBehaviourDelegateComponent",
    "keywords": "Class NetworkBehaviourDelegateComponent Inheritance Object NetworkBehaviour NetworkBehaviourDelegateComponent Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourDelegateComponent : NetworkBehaviour Methods | Improve this Doc View Source Delegate(NetworkBehaviour, NetworkReader, NetworkConnection) Declaration public static void Delegate(NetworkBehaviour comp, NetworkReader reader, NetworkConnection senderConnection) Parameters Type Name Description NetworkBehaviour comp NetworkReader reader NetworkConnection senderConnection | Improve this Doc View Source Delegate2(NetworkBehaviour, NetworkReader, NetworkConnection) Declaration public static void Delegate2(NetworkBehaviour comp, NetworkReader reader, NetworkConnection senderConnection) Parameters Type Name Description NetworkBehaviour comp NetworkReader reader NetworkConnection senderConnection"
  },
  "api/Mirror.Weaver.WeaverException.html": {
    "href": "api/Mirror.Weaver.WeaverException.html",
    "title": "Class WeaverException",
    "keywords": "Class WeaverException Inheritance Object WeaverException GenerateWriterException Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public abstract class WeaverException : Exception Constructors | Improve this Doc View Source WeaverException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Declaration protected WeaverException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo serializationInfo System.Runtime.Serialization.StreamingContext streamingContext | Improve this Doc View Source WeaverException(String, MemberReference) Declaration protected WeaverException(string message, MemberReference member) Parameters Type Name Description String message MemberReference member Properties | Improve this Doc View Source MemberReference Declaration public MemberReference MemberReference { get; } Property Value Type Description MemberReference"
  },
  "api/Mirror.Logging.LogSettingsExt.html": {
    "href": "api/Mirror.Logging.LogSettingsExt.html",
    "title": "Class LogSettingsExt",
    "keywords": "Class LogSettingsExt Inheritance Object LogSettingsExt Namespace : Mirror.Logging Assembly : Mirror.dll Syntax public static class LogSettingsExt : object Methods | Improve this Doc View Source LoadIntoDictionary(LogSettings, SortedDictionary<String, ILogger>) Declaration public static void LoadIntoDictionary(this LogSettings settings, SortedDictionary<string, ILogger> dictionary) Parameters Type Name Description LogSettings settings SortedDictionary < String , ILogger > dictionary | Improve this Doc View Source SaveFromDictionary(LogSettings, SortedDictionary<String, ILogger>) Declaration public static void SaveFromDictionary(this LogSettings settings, SortedDictionary<string, ILogger> dictionary) Parameters Type Name Description LogSettings settings SortedDictionary < String , ILogger > dictionary"
  },
  "api/Mirror.TargetRpcAttribute.html": {
    "href": "api/Mirror.TargetRpcAttribute.html",
    "title": "Class TargetRpcAttribute",
    "keywords": "Class TargetRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on a specific client. Inheritance Object TargetRpcAttribute Namespace : Mirror Assembly : Mirror.dll Syntax public class TargetRpcAttribute : Attribute Fields | Improve this Doc View Source channel Declaration public int channel Field Value Type Description Int32"
  },
  "api/kcp2k.KcpClient.html": {
    "href": "api/kcp2k.KcpClient.html",
    "title": "Class KcpClient",
    "keywords": "Class KcpClient Inheritance Object KcpClient Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : kcp2k Assembly : kcp2k.dll Syntax public class KcpClient Constructors | Improve this Doc View Source KcpClient(Action, Action<ArraySegment<Byte>>, Action) Declaration public KcpClient(Action OnConnected, Action<ArraySegment<byte>> OnData, Action OnDisconnected) Parameters Type Name Description Action OnConnected Action < ArraySegment < Byte >> OnData Action OnDisconnected Fields | Improve this Doc View Source connected Declaration public bool connected Field Value Type Description Boolean | Improve this Doc View Source connection Declaration public KcpClientConnection connection Field Value Type Description KcpClientConnection | Improve this Doc View Source OnConnected Declaration public Action OnConnected Field Value Type Description Action | Improve this Doc View Source OnData Declaration public Action<ArraySegment<byte>> OnData Field Value Type Description Action < ArraySegment < Byte >> | Improve this Doc View Source OnDisconnected Declaration public Action OnDisconnected Field Value Type Description Action Methods | Improve this Doc View Source Connect(String, UInt16, Boolean, UInt32, Int32, Boolean, UInt32, UInt32) Declaration public void Connect(string address, ushort port, bool noDelay, uint interval, int fastResend = 0, bool congestionWindow = true, uint sendWindowSize = 32U, uint receiveWindowSize = 128U) Parameters Type Name Description String address UInt16 port Boolean noDelay UInt32 interval Int32 fastResend Boolean congestionWindow UInt32 sendWindowSize UInt32 receiveWindowSize | Improve this Doc View Source Disconnect() Declaration public void Disconnect() | Improve this Doc View Source Send(ArraySegment<Byte>) Declaration public void Send(ArraySegment<byte> segment) Parameters Type Name Description ArraySegment < Byte > segment | Improve this Doc View Source Tick() Declaration public void Tick()"
  },
  "api/Mirror.NetworkManagerHUD.html": {
    "href": "api/Mirror.NetworkManagerHUD.html",
    "title": "Class NetworkManagerHUD",
    "keywords": "Class NetworkManagerHUD An extension for the NetworkManager that displays a default HUD for controlling the network state of the game. This component also shows useful internal state for the networking system in the inspector window of the editor. It allows users to view connections, networked objects, message handlers, and packet statistics. This information can be helpful when debugging networked games. Inheritance Object NetworkManagerHUD Namespace : Mirror Assembly : Mirror.dll Syntax public class NetworkManagerHUD : MonoBehaviour Fields | Improve this Doc View Source offsetX The horizontal offset in pixels to draw the HUD runtime GUI at. Declaration public int offsetX Field Value Type Description Int32 | Improve this Doc View Source offsetY The vertical offset in pixels to draw the HUD runtime GUI at. Declaration public int offsetY Field Value Type Description Int32 | Improve this Doc View Source showGUI Whether to show the default control HUD at runtime. Declaration public bool showGUI Field Value Type Description Boolean"
  },
  "api/Telepathy.EventType.html": {
    "href": "api/Telepathy.EventType.html",
    "title": "Enum EventType",
    "keywords": "Enum EventType Namespace : Telepathy Assembly : Telepathy.dll Syntax public enum EventType Fields Name Description Connected Data Disconnected"
  },
  "api/Mirror.SimpleWeb.SimpleWebClient.html": {
    "href": "api/Mirror.SimpleWeb.SimpleWebClient.html",
    "title": "Class SimpleWebClient",
    "keywords": "Class SimpleWebClient Client used to control websockets Base class used by WebSocketClientWebGl and WebSocketClientStandAlone Inheritance Object SimpleWebClient WebSocketClientStandAlone WebSocketClientWebGl Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public abstract class SimpleWebClient : object Constructors | Improve this Doc View Source SimpleWebClient(Int32, Int32) Declaration protected SimpleWebClient(int maxMessageSize, int maxMessagesPerTick) Parameters Type Name Description Int32 maxMessageSize Int32 maxMessagesPerTick Fields | Improve this Doc View Source bufferPool Declaration protected readonly BufferPool bufferPool Field Value Type Description BufferPool | Improve this Doc View Source maxMessageSize Declaration protected readonly int maxMessageSize Field Value Type Description Int32 | Improve this Doc View Source receiveQueue Declaration protected readonly ConcurrentQueue<Message> receiveQueue Field Value Type Description ConcurrentQueue < Message > | Improve this Doc View Source state Declaration protected ClientState state Field Value Type Description ClientState Properties | Improve this Doc View Source ConnectionState Declaration public ClientState ConnectionState { get; } Property Value Type Description ClientState Methods | Improve this Doc View Source Connect(Uri) Declaration public abstract void Connect(Uri serverAddress) Parameters Type Name Description Uri serverAddress | Improve this Doc View Source Create(Int32, Int32, TcpConfig) Declaration public static SimpleWebClient Create(int maxMessageSize, int maxMessagesPerTick, TcpConfig tcpConfig) Parameters Type Name Description Int32 maxMessageSize Int32 maxMessagesPerTick TcpConfig tcpConfig Returns Type Description SimpleWebClient | Improve this Doc View Source Disconnect() Declaration public abstract void Disconnect() | Improve this Doc View Source ProcessMessageQueue(MonoBehaviour) Declaration public void ProcessMessageQueue(MonoBehaviour behaviour) Parameters Type Name Description MonoBehaviour behaviour | Improve this Doc View Source Send(ArraySegment<Byte>) Declaration public abstract void Send(ArraySegment<byte> segment) Parameters Type Name Description ArraySegment < Byte > segment Events | Improve this Doc View Source onConnect Declaration public event Action onConnect Event Type Type Description Action | Improve this Doc View Source onData Declaration public event Action<ArraySegment<byte>> onData Event Type Type Description Action < ArraySegment < Byte >> | Improve this Doc View Source onDisconnect Declaration public event Action onDisconnect Event Type Type Description Action | Improve this Doc View Source onError Declaration public event Action<Exception> onError Event Type Type Description Action < Exception >"
  },
  "api/Mirror.Weaver.Extensions.html": {
    "href": "api/Mirror.Weaver.Extensions.html",
    "title": "Class Extensions",
    "keywords": "Class Extensions Inheritance Object Extensions Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class Extensions : object Methods | Improve this Doc View Source CanBeResolved(TypeReference) Declaration public static bool CanBeResolved(this TypeReference parent) Parameters Type Name Description TypeReference parent Returns Type Description Boolean | Improve this Doc View Source FindAllPublicFields(TypeDefinition) Finds public fields in type and base type Declaration public static IEnumerable<FieldDefinition> FindAllPublicFields(this TypeDefinition typeDefinition) Parameters Type Name Description TypeDefinition typeDefinition Returns Type Description IEnumerable < FieldDefinition > | Improve this Doc View Source FindAllPublicFields(TypeReference) Finds public fields in type and base type Declaration public static IEnumerable<FieldDefinition> FindAllPublicFields(this TypeReference variable) Parameters Type Name Description TypeReference variable Returns Type Description IEnumerable < FieldDefinition > | Improve this Doc View Source GetCustomAttribute<TAttribute>(ICustomAttributeProvider) Declaration public static CustomAttribute GetCustomAttribute<TAttribute>(this ICustomAttributeProvider method) Parameters Type Name Description ICustomAttributeProvider method Returns Type Description CustomAttribute Type Parameters Name Description TAttribute | Improve this Doc View Source GetEnumUnderlyingType(TypeDefinition) Declaration public static TypeReference GetEnumUnderlyingType(this TypeDefinition td) Parameters Type Name Description TypeDefinition td Returns Type Description TypeReference | Improve this Doc View Source GetField<T>(CustomAttribute, String, T) Declaration public static T GetField<T>(this CustomAttribute ca, string field, T defaultValue) Parameters Type Name Description CustomAttribute ca String field T defaultValue Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetMethod(TypeDefinition, String) Declaration public static MethodDefinition GetMethod(this TypeDefinition td, string methodName) Parameters Type Name Description TypeDefinition td String methodName Returns Type Description MethodDefinition | Improve this Doc View Source GetMethodInBaseType(TypeDefinition, String) Declaration public static MethodDefinition GetMethodInBaseType(this TypeDefinition td, string methodName) Parameters Type Name Description TypeDefinition td String methodName Returns Type Description MethodDefinition | Improve this Doc View Source GetMethods(TypeDefinition, String) Declaration public static List<MethodDefinition> GetMethods(this TypeDefinition td, string methodName) Parameters Type Name Description TypeDefinition td String methodName Returns Type Description List < MethodDefinition > | Improve this Doc View Source HasCustomAttribute<TAttribute>(ICustomAttributeProvider) Declaration public static bool HasCustomAttribute<TAttribute>(this ICustomAttributeProvider attributeProvider) Parameters Type Name Description ICustomAttributeProvider attributeProvider Returns Type Description Boolean Type Parameters Name Description TAttribute | Improve this Doc View Source ImplementsInterface<TInterface>(TypeDefinition) Declaration public static bool ImplementsInterface<TInterface>(this TypeDefinition td) Parameters Type Name Description TypeDefinition td Returns Type Description Boolean Type Parameters Name Description TInterface | Improve this Doc View Source Is(TypeReference, Type) Declaration public static bool Is(this TypeReference td, Type t) Parameters Type Name Description TypeReference td Type t Returns Type Description Boolean | Improve this Doc View Source Is<T>(TypeReference) Declaration public static bool Is<T>(this TypeReference td) Parameters Type Name Description TypeReference td Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source IsDerivedFrom(TypeDefinition, Type) Declaration public static bool IsDerivedFrom(this TypeDefinition td, Type baseClass) Parameters Type Name Description TypeDefinition td Type baseClass Returns Type Description Boolean | Improve this Doc View Source IsDerivedFrom<T>(TypeDefinition) Declaration public static bool IsDerivedFrom<T>(this TypeDefinition td) Parameters Type Name Description TypeDefinition td Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source IsMultidimensionalArray(TypeReference) Declaration public static bool IsMultidimensionalArray(this TypeReference tr) Parameters Type Name Description TypeReference tr Returns Type Description Boolean | Improve this Doc View Source MakeHostInstanceGeneric(MethodReference, GenericInstanceType) Given a method of a generic class such as ArraySegment T.get_Count, and a generic instance such as ArraySegment int Creates a reference to the specialized method ArraySegment int .get_Count Note that calling ArraySegment`T.get_Count directly gives an invalid IL error Declaration public static MethodReference MakeHostInstanceGeneric(this MethodReference self, GenericInstanceType instanceType) Parameters Type Name Description MethodReference self GenericInstanceType instanceType Returns Type Description MethodReference | Improve this Doc View Source SpecializeField(FieldReference, GenericInstanceType) Declaration public static FieldReference SpecializeField(this FieldReference self, GenericInstanceType instanceType) Parameters Type Name Description FieldReference self GenericInstanceType instanceType Returns Type Description FieldReference"
  },
  "api/Mirror.AddPlayerMessage.html": {
    "href": "api/Mirror.AddPlayerMessage.html",
    "title": "Struct AddPlayerMessage",
    "keywords": "Struct AddPlayerMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct AddPlayerMessage : NetworkMessage Implements NetworkMessage"
  },
  "api/Mirror.Examples.MultipleAdditiveScenes.Reward.html": {
    "href": "api/Mirror.Examples.MultipleAdditiveScenes.Reward.html",
    "title": "Class Reward",
    "keywords": "Class Reward Inheritance Object NetworkBehaviour Reward Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.MultipleAdditiveScenes Assembly : Mirror.Examples.dll Syntax public class Reward : NetworkBehaviour Fields | Improve this Doc View Source available Declaration public bool available Field Value Type Description Boolean | Improve this Doc View Source randomColor Declaration public RandomColor randomColor Field Value Type Description RandomColor Methods | Improve this Doc View Source ClaimPrize(GameObject) Declaration public void ClaimPrize(GameObject player) Parameters Type Name Description GameObject player"
  },
  "api/Mirror.NetworkTransformBase.html": {
    "href": "api/Mirror.NetworkTransformBase.html",
    "title": "Class NetworkTransformBase",
    "keywords": "Class NetworkTransformBase Inheritance Object NetworkBehaviour NetworkTransformBase NetworkTransform NetworkTransformChild Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror Assembly : Mirror.Components.dll Syntax public abstract class NetworkTransformBase : NetworkBehaviour Fields | Improve this Doc View Source clientAuthority Declaration public bool clientAuthority Field Value Type Description Boolean | Improve this Doc View Source localPositionSensitivity Declaration public float localPositionSensitivity Field Value Type Description Single | Improve this Doc View Source localRotationSensitivity Declaration public float localRotationSensitivity Field Value Type Description Single | Improve this Doc View Source localScaleSensitivity Declaration public float localScaleSensitivity Field Value Type Description Single Properties | Improve this Doc View Source targetComponent Declaration protected abstract Transform targetComponent { get; } Property Value Type Description Transform Methods | Improve this Doc View Source OnDeserialize(NetworkReader, Boolean) Declaration public override void OnDeserialize(NetworkReader reader, bool initialState) Parameters Type Name Description NetworkReader reader Boolean initialState Overrides NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) | Improve this Doc View Source OnSerialize(NetworkWriter, Boolean) Declaration public override bool OnSerialize(NetworkWriter writer, bool initialState) Parameters Type Name Description NetworkWriter writer Boolean initialState Returns Type Description Boolean Overrides NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) | Improve this Doc View Source SerializeIntoWriter(NetworkWriter, Vector3, Quaternion, Vector3) Declaration public static void SerializeIntoWriter(NetworkWriter writer, Vector3 position, Quaternion rotation, Vector3 scale) Parameters Type Name Description NetworkWriter writer Vector3 position Quaternion rotation Vector3 scale | Improve this Doc View Source ServerTeleport(Vector3) Server side teleportation. This method will override this GameObject's current Transform.Position to the Vector3 you have provided and send it to all other Clients to override it at their side too. Declaration public void ServerTeleport(Vector3 position) Parameters Type Name Description Vector3 position Where to teleport this GameObject | Improve this Doc View Source ServerTeleport(Vector3, Quaternion) Server side teleportation. This method will override this GameObject's current Transform.Position and Transform.Rotation to the Vector3 you have provided and send it to all other Clients to override it at their side too. Declaration public void ServerTeleport(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Where to teleport this GameObject Quaternion rotation Which rotation to set this GameObject"
  },
  "api/Mirror.Weaver.Tests.WeaverTargetRpcTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverTargetRpcTests.html",
    "title": "Class WeaverTargetRpcTests",
    "keywords": "Class WeaverTargetRpcTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverTargetRpcTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverTargetRpcTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source AbstractTargetRpc() Declaration public void AbstractTargetRpc() | Improve this Doc View Source ErrorWhenNetworkConnectionIsNotTheFirstParameter() Declaration public void ErrorWhenNetworkConnectionIsNotTheFirstParameter() | Improve this Doc View Source ErrorWhenTargetRpcIsStatic() Declaration public void ErrorWhenTargetRpcIsStatic() | Improve this Doc View Source OverrideAbstractTargetRpc() Declaration public void OverrideAbstractTargetRpc() | Improve this Doc View Source OverrideVirtualTargetRpc() Declaration public void OverrideVirtualTargetRpc() | Improve this Doc View Source TargetRpcCanHaveOtherParametersWhileSkipingNetworkConnection() Declaration public void TargetRpcCanHaveOtherParametersWhileSkipingNetworkConnection() | Improve this Doc View Source TargetRpcCanSkipNetworkConnection() Declaration public void TargetRpcCanSkipNetworkConnection() | Improve this Doc View Source TargetRpcValid() Declaration public void TargetRpcValid() | Improve this Doc View Source VirtualTargetRpc() Declaration public void VirtualTargetRpc()"
  },
  "api/Mirror.Cloud.Examples.Pong.Ball.html": {
    "href": "api/Mirror.Cloud.Examples.Pong.Ball.html",
    "title": "Class Ball",
    "keywords": "Class Ball Inheritance Object NetworkBehaviour Ball Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Cloud.Examples.Pong Assembly : Mirror.Examples.Cloud.Pong.dll Syntax public class Ball : NetworkBehaviour Fields | Improve this Doc View Source rigidbody2d Declaration public Rigidbody2D rigidbody2d Field Value Type Description Rigidbody2D | Improve this Doc View Source speed Declaration public float speed Field Value Type Description Single Methods | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer()"
  },
  "api/Mirror.Tests.LocalConnectionBufferTest.html": {
    "href": "api/Mirror.Tests.LocalConnectionBufferTest.html",
    "title": "Class LocalConnectionBufferTest",
    "keywords": "Class LocalConnectionBufferTest Inheritance Object LocalConnectionBufferTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class LocalConnectionBufferTest : object Methods | Improve this Doc View Source BufferCanWriteAndReadPackages() Declaration public void BufferCanWriteAndReadPackages() | Improve this Doc View Source BufferCanWriteReadMorePackageAfterCallingReset() Declaration public void BufferCanWriteReadMorePackageAfterCallingReset() | Improve this Doc View Source BufferHasNoPacketsAfterWriteAndReading() Declaration public void BufferHasNoPacketsAfterWriteAndReading() | Improve this Doc View Source BufferHasPacketsAfterWriter() Declaration public void BufferHasPacketsAfterWriter() | Improve this Doc View Source BufferReturnsMutliplePacketsInTheOrderTheyWereWriten() Declaration public void BufferReturnsMutliplePacketsInTheOrderTheyWereWriten() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.NetworkManagerMode.html": {
    "href": "api/Mirror.NetworkManagerMode.html",
    "title": "Enum NetworkManagerMode",
    "keywords": "Enum NetworkManagerMode Enumeration of methods of current Network Manager state at runtime. Namespace : Mirror Assembly : Mirror.dll Syntax public enum NetworkManagerMode : int Fields Name Description ClientOnly Host Offline ServerOnly"
  },
  "api/Mirror.ExponentialMovingAverage.html": {
    "href": "api/Mirror.ExponentialMovingAverage.html",
    "title": "Class ExponentialMovingAverage",
    "keywords": "Class ExponentialMovingAverage Inheritance Object ExponentialMovingAverage Namespace : Mirror Assembly : Mirror.dll Syntax public class ExponentialMovingAverage : object Constructors | Improve this Doc View Source ExponentialMovingAverage(Int32) Declaration public ExponentialMovingAverage(int n) Parameters Type Name Description Int32 n Properties | Improve this Doc View Source Value Declaration public double Value { get; } Property Value Type Description Double | Improve this Doc View Source Var Declaration public double Var { get; } Property Value Type Description Double Methods | Improve this Doc View Source Add(Double) Declaration public void Add(double newValue) Parameters Type Name Description Double newValue"
  },
  "api/Mirror.Cloud.ListServerService.html": {
    "href": "api/Mirror.Cloud.ListServerService.html",
    "title": "Namespace Mirror.Cloud.ListServerService",
    "keywords": "Namespace Mirror.Cloud.ListServerService Classes CustomDataHelper ListServer ListServerBaseApi ListServerClientApi ListServerServerApi Structs KeyValue PartialServerJson ServerCollectionJson ServerJson Interfaces IListServerClientApi IListServerServerApi"
  },
  "api/Mirror.Experimental.NetworkRigidbody2D.html": {
    "href": "api/Mirror.Experimental.NetworkRigidbody2D.html",
    "title": "Class NetworkRigidbody2D",
    "keywords": "Class NetworkRigidbody2D Inheritance Object NetworkBehaviour NetworkRigidbody2D Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Experimental Assembly : Mirror.Components.dll Syntax public class NetworkRigidbody2D : NetworkBehaviour"
  },
  "api/Mirror.NetworkProximityChecker.html": {
    "href": "api/Mirror.NetworkProximityChecker.html",
    "title": "Class NetworkProximityChecker",
    "keywords": "Class NetworkProximityChecker Component that controls visibility of networked objects for players. Any object with this component on it will not be visible to players more than a (configurable) distance away. Inheritance Object NetworkBehaviour NetworkVisibility NetworkProximityChecker Inherited Members Mirror.NetworkVisibility.OnRebuildObservers(HashSet<>, System.Boolean) NetworkVisibility.OnSetHostVisibility(Boolean) NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class NetworkProximityChecker : NetworkVisibility Fields | Improve this Doc View Source forceHidden Flag to force this object to be hidden for players. If this object is a player object, it will not be hidden for that player. Declaration public bool forceHidden Field Value Type Description Boolean | Improve this Doc View Source visRange The maximim range that objects will be visible at. Declaration public int visRange Field Value Type Description Int32 | Improve this Doc View Source visUpdateInterval How often (in seconds) that this object should update the list of observers that can see it. Declaration public float visUpdateInterval Field Value Type Description Single Methods | Improve this Doc View Source OnCheckObserver(NetworkConnection) Callback used by the visibility system to determine if an observer (player) can see this object. If this function returns true, the network connection will be added as an observer. Declaration public override bool OnCheckObserver(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Network connection of a player. Returns Type Description Boolean True if the player can see this object. Overrides NetworkVisibility.OnCheckObserver(NetworkConnection) | Improve this Doc View Source OnRebuildObservers(HashSet<NetworkConnection>, Boolean) Callback used by the visibility system to (re)construct the set of observers that can see this object. Implementations of this callback should add network connections of players that can see this object to the observers set. Declaration public override void OnRebuildObservers(HashSet<NetworkConnection> observers, bool initialize) Parameters Type Name Description HashSet < NetworkConnection > observers The new set of observers for this object. Boolean initialize True if the set of observers is being built for the first time. | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer() | Improve this Doc View Source OnStopServer() Declaration public override void OnStopServer() Overrides NetworkBehaviour.OnStopServer()"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.Array_FloatStringStruct_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.Array_FloatStringStruct_Test.Message.html",
    "title": "Struct Array_FloatStringStruct_Test.Message",
    "keywords": "Struct Array_FloatStringStruct_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public FloatStringStruct[] collection Field Value Type Description FloatStringStruct [] Implements NetworkMessage"
  },
  "api/Mirror.Examples.Pong.Player.html": {
    "href": "api/Mirror.Examples.Pong.Player.html",
    "title": "Class Player",
    "keywords": "Class Player Inheritance Object NetworkBehaviour Player Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.Pong Assembly : Mirror.Examples.dll Syntax public class Player : NetworkBehaviour Fields | Improve this Doc View Source rigidbody2d Declaration public Rigidbody2D rigidbody2d Field Value Type Description Rigidbody2D | Improve this Doc View Source speed Declaration public float speed Field Value Type Description Single"
  },
  "api/Mirror.Examples.MultipleAdditiveScenes.PhysicsCollision.html": {
    "href": "api/Mirror.Examples.MultipleAdditiveScenes.PhysicsCollision.html",
    "title": "Class PhysicsCollision",
    "keywords": "Class PhysicsCollision Inheritance Object NetworkBehaviour PhysicsCollision Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.MultipleAdditiveScenes Assembly : Mirror.Examples.dll Syntax public class PhysicsCollision : NetworkBehaviour Fields | Improve this Doc View Source force Declaration public float force Field Value Type Description Single | Improve this Doc View Source rigidbody3D Declaration public Rigidbody rigidbody3D Field Value Type Description Rigidbody"
  },
  "api/Mirror.NetworkConnectionToServer.html": {
    "href": "api/Mirror.NetworkConnectionToServer.html",
    "title": "Class NetworkConnectionToServer",
    "keywords": "Class NetworkConnectionToServer Inheritance Object NetworkConnection NetworkConnectionToServer Inherited Members NetworkConnection.LocalConnectionId NetworkConnection.connectionId NetworkConnection.isAuthenticated NetworkConnection.authenticationData NetworkConnection.isReady NetworkConnection.lastMessageTime NetworkConnection.identity NetworkConnection.clientOwnedObjects NetworkConnection.Send<T>(T, Int32) NetworkConnection.ValidatePacketSize(ArraySegment<Byte>, Int32) NetworkConnection.ToString() NetworkConnection.InvokeHandler<T>(T, Int32) Namespace : Mirror Assembly : Mirror.dll Syntax public class NetworkConnectionToServer : NetworkConnection Properties | Improve this Doc View Source address Declaration public override string address { get; } Property Value Type Description String Overrides NetworkConnection.address Methods | Improve this Doc View Source Disconnect() Disconnects this connection. Declaration public override void Disconnect() Overrides NetworkConnection.Disconnect()"
  },
  "api/Mirror.Tests.Runtime.TransportEnableTest.MultiplexTransportEnableTest.html": {
    "href": "api/Mirror.Tests.Runtime.TransportEnableTest.MultiplexTransportEnableTest.html",
    "title": "Class MultiplexTransportEnableTest",
    "keywords": "Class MultiplexTransportEnableTest Inheritance Object MultiplexTransportEnableTest Namespace : Mirror.Tests.Runtime.TransportEnableTest Assembly : Mirror.Tests.Runtime.dll Syntax public class MultiplexTransportEnableTest : object Methods | Improve this Doc View Source DisableShouldDisableAllTransports() Declaration public void DisableShouldDisableAllTransports() | Improve this Doc View Source Setup() Declaration public void Setup() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.Tests.MessageTests.MessageInheritanceTest.html": {
    "href": "api/Mirror.Tests.MessageTests.MessageInheritanceTest.html",
    "title": "Class MessageInheritanceTest",
    "keywords": "Class MessageInheritanceTest Inheritance Object MessageInheritanceTest Namespace : Mirror.Tests.MessageTests Assembly : Mirror.Tests.dll Syntax public class MessageInheritanceTest : object Methods | Improve this Doc View Source SendsVauesInParentAndChildClass() Declaration public void SendsVauesInParentAndChildClass() | Improve this Doc View Source SendsVauesWhenUsingAbstractClass() Declaration public void SendsVauesWhenUsingAbstractClass() | Improve this Doc View Source SendsVauesWhenUsingAbstractClassReverseDefineOrder() Declaration public void SendsVauesWhenUsingAbstractClassReverseDefineOrder()"
  },
  "api/Mirror.Tests.RpcTestNetworkBehaviour.html": {
    "href": "api/Mirror.Tests.RpcTestNetworkBehaviour.html",
    "title": "Class RpcTestNetworkBehaviour",
    "keywords": "Class RpcTestNetworkBehaviour Inheritance Object NetworkBehaviour RpcTestNetworkBehaviour Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class RpcTestNetworkBehaviour : NetworkBehaviour Fields | Improve this Doc View Source called Declaration public int called Field Value Type Description Int32 Methods | Improve this Doc View Source RpcGenerated(NetworkBehaviour, NetworkReader, NetworkConnection) Declaration public static void RpcGenerated(NetworkBehaviour comp, NetworkReader reader, NetworkConnection senderConnection) Parameters Type Name Description NetworkBehaviour comp NetworkReader reader NetworkConnection senderConnection"
  },
  "api/Mirror.SimpleWeb.SendLoopConfig.html": {
    "href": "api/Mirror.SimpleWeb.SendLoopConfig.html",
    "title": "Class SendLoopConfig",
    "keywords": "Class SendLoopConfig Inheritance Object SendLoopConfig Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public static class SendLoopConfig : object Fields | Improve this Doc View Source batchSend Declaration public static volatile bool batchSend Field Value Type Description Boolean | Improve this Doc View Source sleepBeforeSend Declaration public static volatile bool sleepBeforeSend Field Value Type Description Boolean"
  },
  "api/Mirror.EditorScripts.html": {
    "href": "api/Mirror.EditorScripts.html",
    "title": "Namespace Mirror.EditorScripts",
    "keywords": "Namespace Mirror.EditorScripts Classes ScriptableObjectUtility"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.List_int_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.List_int_Test.html",
    "title": "Class List_int_Test",
    "keywords": "Class List_int_Test Inheritance Object List_int_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class List_int_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.NetworkAuthenticator.html": {
    "href": "api/Mirror.NetworkAuthenticator.html",
    "title": "Class NetworkAuthenticator",
    "keywords": "Class NetworkAuthenticator Base class for implementing component-based authentication during the Connect phase Inheritance Object NetworkAuthenticator BasicAuthenticator TimeoutAuthenticator Namespace : Mirror Assembly : Mirror.dll Syntax public abstract class NetworkAuthenticator : MonoBehaviour Fields | Improve this Doc View Source OnClientAuthenticated Notify subscribers on the client when the client is authenticated Declaration public UnityEventNetworkConnection OnClientAuthenticated Field Value Type Description UnityEventNetworkConnection | Improve this Doc View Source OnServerAuthenticated Declaration public UnityEventNetworkConnection OnServerAuthenticated Field Value Type Description UnityEventNetworkConnection Methods | Improve this Doc View Source ClientAccept(NetworkConnection) Declaration protected void ClientAccept(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn | Improve this Doc View Source ClientReject(NetworkConnection) Declaration protected void ClientReject(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn | Improve this Doc View Source OnClientAuthenticate(NetworkConnection) Called on client from OnClientAuthenticateInternal when a client needs to authenticate Declaration public abstract void OnClientAuthenticate(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection of the client. | Improve this Doc View Source OnServerAuthenticate(NetworkConnection) Called on server from OnServerAuthenticateInternal when a client needs to authenticate Declaration public abstract void OnServerAuthenticate(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection to client. | Improve this Doc View Source OnStartClient() Called on client from StartClient to initialize the Authenticator Client message handlers should be registered in this method. Declaration public virtual void OnStartClient() | Improve this Doc View Source OnStartServer() Called on server from StartServer to initialize the Authenticator Server message handlers should be registered in this method. Declaration public virtual void OnStartServer() | Improve this Doc View Source OnStopClient() Called on client from StopClient to reset the Authenticator Client message handlers should be unregistered in this method. Declaration public virtual void OnStopClient() | Improve this Doc View Source OnStopServer() Called on server from StopServer to reset the Authenticator Server message handlers should be unregistered in this method. Declaration public virtual void OnStopServer() | Improve this Doc View Source ServerAccept(NetworkConnection) Declaration protected void ServerAccept(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn | Improve this Doc View Source ServerReject(NetworkConnection) Declaration protected void ServerReject(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn"
  },
  "api/Mirror.ClientAttribute.html": {
    "href": "api/Mirror.ClientAttribute.html",
    "title": "Class ClientAttribute",
    "keywords": "Class ClientAttribute Prevents the server from running this method. Prints a warning if the server tries to execute this method. Inheritance Object ClientAttribute Namespace : Mirror Assembly : Mirror.dll Syntax public class ClientAttribute : Attribute"
  },
  "api/Mirror.Tests.MessageTests.BuiltInMessages.html": {
    "href": "api/Mirror.Tests.MessageTests.BuiltInMessages.html",
    "title": "Class BuiltInMessages",
    "keywords": "Class BuiltInMessages Inheritance Object BuiltInMessages Namespace : Mirror.Tests.MessageTests Assembly : Mirror.Tests.dll Syntax public class BuiltInMessages : object Methods | Improve this Doc View Source CommandMessage() Declaration public void CommandMessage() | Improve this Doc View Source ConnectMessage() Declaration public void ConnectMessage() | Improve this Doc View Source DisconnectMessage() Declaration public void DisconnectMessage() | Improve this Doc View Source ErrorMessage() Declaration public void ErrorMessage() | Improve this Doc View Source NetworkPingMessage() Declaration public void NetworkPingMessage() | Improve this Doc View Source NetworkPongMessage() Declaration public void NetworkPongMessage() | Improve this Doc View Source NotReadyMessage() Declaration public void NotReadyMessage() | Improve this Doc View Source ObjectDestroyMessage() Declaration public void ObjectDestroyMessage() | Improve this Doc View Source ObjectHideMessage() Declaration public void ObjectHideMessage() | Improve this Doc View Source ObjectSpawnFinishedMessage() Declaration public void ObjectSpawnFinishedMessage() | Improve this Doc View Source ObjectSpawnStartedMessage() Declaration public void ObjectSpawnStartedMessage() | Improve this Doc View Source ReadyMessage() Declaration public void ReadyMessage() | Improve this Doc View Source RpcMessage() Declaration public void RpcMessage() | Improve this Doc View Source SpawnMessage() Declaration public void SpawnMessage() | Improve this Doc View Source UpdateVarsMessage() Declaration public void UpdateVarsMessage()"
  },
  "api/Mirror.SyncList-1.SyncListChanged.html": {
    "href": "api/Mirror.SyncList-1.SyncListChanged.html",
    "title": "Delegate SyncList<T>.SyncListChanged",
    "keywords": "Delegate SyncList<T>.SyncListChanged Namespace : Mirror Assembly : Mirror.dll Syntax public delegate void SyncListChanged(SyncList<T>.Operation op, int itemIndex, T oldItem, T newItem); Parameters Type Name Description SyncList.Operation <> op Int32 itemIndex T oldItem T newItem"
  },
  "api/Mirror.Writer-1.html": {
    "href": "api/Mirror.Writer-1.html",
    "title": "Class Writer<T>",
    "keywords": "Class Writer<T> A class that holds writers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver Inheritance Object Writer<T> Namespace : Mirror Assembly : Mirror.dll Syntax public static class Writer<T> : object Type Parameters Name Description T Fields | Improve this Doc View Source write Declaration public static Action<NetworkWriter, T> write Field Value Type Description Action < NetworkWriter , T>"
  },
  "api/Telepathy.Client.html": {
    "href": "api/Telepathy.Client.html",
    "title": "Class Client",
    "keywords": "Class Client Inheritance Object Common Client Inherited Members Common.receiveQueue Common.ReceiveQueueCount Common.messageQueueSizeWarning Common.GetNextMessage(Message) Common.NoDelay Common.MaxMessageSize Common.SendTimeout Common.SendMessagesBlocking(NetworkStream, Byte[][]) Common.ReadMessageBlocking(NetworkStream, Int32, Byte[]) Common.ReceiveLoop(Int32, TcpClient, ConcurrentQueue<Message>, Int32) Common.SendLoop(Int32, TcpClient, SafeQueue<Byte[]>, ManualResetEvent) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Telepathy Assembly : Telepathy.dll Syntax public class Client : Common Fields | Improve this Doc View Source client Declaration public TcpClient client Field Value Type Description TcpClient Properties | Improve this Doc View Source Connected Declaration public bool Connected { get; } Property Value Type Description Boolean | Improve this Doc View Source Connecting Declaration public bool Connecting { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Connect(String, Int32) Declaration public void Connect(string ip, int port) Parameters Type Name Description String ip Int32 port | Improve this Doc View Source Disconnect() Declaration public void Disconnect() | Improve this Doc View Source Send(Byte[]) Declaration public bool Send(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description Boolean"
  },
  "api/Mirror.Authenticators.TimeoutAuthenticator.html": {
    "href": "api/Mirror.Authenticators.TimeoutAuthenticator.html",
    "title": "Class TimeoutAuthenticator",
    "keywords": "Class TimeoutAuthenticator An authenticator that disconnects connections if they don't authenticate within a specified time limit. Inheritance Object NetworkAuthenticator TimeoutAuthenticator Inherited Members NetworkAuthenticator.OnServerAuthenticated NetworkAuthenticator.OnClientAuthenticated NetworkAuthenticator.ServerAccept(NetworkConnection) NetworkAuthenticator.ServerReject(NetworkConnection) NetworkAuthenticator.ClientAccept(NetworkConnection) NetworkAuthenticator.ClientReject(NetworkConnection) Namespace : Mirror.Authenticators Assembly : Mirror.Authenticators.dll Syntax public class TimeoutAuthenticator : NetworkAuthenticator Fields | Improve this Doc View Source authenticator Declaration public NetworkAuthenticator authenticator Field Value Type Description NetworkAuthenticator | Improve this Doc View Source timeout Declaration public float timeout Field Value Type Description Single Methods | Improve this Doc View Source Awake() Declaration public void Awake() | Improve this Doc View Source OnClientAuthenticate(NetworkConnection) Declaration public override void OnClientAuthenticate(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Overrides NetworkAuthenticator.OnClientAuthenticate(NetworkConnection) | Improve this Doc View Source OnServerAuthenticate(NetworkConnection) Declaration public override void OnServerAuthenticate(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Overrides NetworkAuthenticator.OnServerAuthenticate(NetworkConnection) | Improve this Doc View Source OnStartClient() Declaration public override void OnStartClient() Overrides NetworkAuthenticator.OnStartClient() | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkAuthenticator.OnStartServer() | Improve this Doc View Source OnStopClient() Declaration public override void OnStopClient() Overrides NetworkAuthenticator.OnStopClient() | Improve this Doc View Source OnStopServer() Declaration public override void OnStopServer() Overrides NetworkAuthenticator.OnStopServer()"
  },
  "api/Mirror.Cloud.ListServerService.ServerJson.html": {
    "href": "api/Mirror.Cloud.ListServerService.ServerJson.html",
    "title": "Struct ServerJson",
    "keywords": "Struct ServerJson Implements ICanBeJson Namespace : Mirror.Cloud.ListServerService Assembly : Mirror.Cloud.dll Syntax public struct ServerJson : ICanBeJson Fields | Improve this Doc View Source address Uri string of the ip and port of the server. The ip is calculated by the request to the API This is returns from the api, any incoming address fields will be ignored Declaration public string address Field Value Type Description String | Improve this Doc View Source customAddress Can be used to set custom uri optional Declaration public string customAddress Field Value Type Description String | Improve this Doc View Source customData Array of custom data, use SetCustomData to set values optional Declaration public KeyValue[] customData Field Value Type Description KeyValue [] | Improve this Doc View Source displayName optional Declaration public string displayName Field Value Type Description String | Improve this Doc View Source maxPlayerCount Declaration public int maxPlayerCount Field Value Type Description Int32 | Improve this Doc View Source playerCount Declaration public int playerCount Field Value Type Description Int32 | Improve this Doc View Source port Declaration public int port Field Value Type Description Int32 | Improve this Doc View Source protocol Declaration public string protocol Field Value Type Description String Methods | Improve this Doc View Source GetCustomUri() Uri from customAddress field Declaration public Uri GetCustomUri() Returns Type Description Uri | Improve this Doc View Source GetServerUri() Uri from address field Declaration public Uri GetServerUri() Returns Type Description Uri | Improve this Doc View Source SetCustomData(Dictionary<String, String>) Updates the customData array Declaration public void SetCustomData(Dictionary<string, string> data) Parameters Type Name Description Dictionary < String , String > data | Improve this Doc View Source Validate() Declaration public bool Validate() Returns Type Description Boolean Implements ICanBeJson"
  },
  "api/Mirror.RemoteCalls.CommandInfo.html": {
    "href": "api/Mirror.RemoteCalls.CommandInfo.html",
    "title": "Struct CommandInfo",
    "keywords": "Struct CommandInfo Namespace : Mirror.RemoteCalls Assembly : Mirror.dll Syntax public struct CommandInfo Fields | Improve this Doc View Source ignoreAuthority Declaration public bool ignoreAuthority Field Value Type Description Boolean"
  },
  "api/Mirror.Tests.Runtime.ClientSceneTests.ClientSceneTests_LocalPlayer.html": {
    "href": "api/Mirror.Tests.Runtime.ClientSceneTests.ClientSceneTests_LocalPlayer.html",
    "title": "Class ClientSceneTests_LocalPlayer",
    "keywords": "Class ClientSceneTests_LocalPlayer Inheritance Object ClientSceneTestsBase ClientSceneTests_LocalPlayer Inherited Members ClientSceneTestsBase.ValidPrefabAssetGuid ClientSceneTestsBase.PrefabWithChildrenAssetGuid ClientSceneTestsBase.InvalidPrefabAssetGuid ClientSceneTestsBase.AnotherGuidString ClientSceneTestsBase.validPrefab ClientSceneTestsBase.validPrefabNetworkIdentity ClientSceneTestsBase.prefabWithChildren ClientSceneTestsBase.invalidPrefab ClientSceneTestsBase.validPrefabGuid ClientSceneTestsBase.anotherGuid ClientSceneTestsBase._createdObjects ClientSceneTestsBase.prefabs ClientSceneTestsBase.spawnHandlers ClientSceneTestsBase.unspawnHandlers ClientSceneTestsBase.spawnableObjects ClientSceneTestsBase.OneTimeSetUp() ClientSceneTestsBase.TearDown() ClientSceneTestsBase.OneTimeTearDown() Namespace : Mirror.Tests.Runtime.ClientSceneTests Assembly : Mirror.Tests.Runtime.dll Syntax public class ClientSceneTests_LocalPlayer : ClientSceneTestsBase Methods | Improve this Doc View Source DestroyingOtherObjectDoesntEffectLocalPlayer() Declaration public IEnumerator DestroyingOtherObjectDoesntEffectLocalPlayer() Returns Type Description IEnumerator | Improve this Doc View Source LocalPlayerIsSetToNullAfterDestroy() Declaration public IEnumerator LocalPlayerIsSetToNullAfterDestroy() Returns Type Description IEnumerator | Improve this Doc View Source LocalPlayerIsSetToNullAfterDestroyMessage() Declaration public IEnumerator LocalPlayerIsSetToNullAfterDestroyMessage() Returns Type Description IEnumerator | Improve this Doc View Source Setup() Declaration public void Setup()"
  },
  "api/Mirror.Examples.RigidbodyPhysics.html": {
    "href": "api/Mirror.Examples.RigidbodyPhysics.html",
    "title": "Namespace Mirror.Examples.RigidbodyPhysics",
    "keywords": "Namespace Mirror.Examples.RigidbodyPhysics Classes AddForce"
  },
  "api/Telepathy.html": {
    "href": "api/Telepathy.html",
    "title": "Namespace Telepathy",
    "keywords": "Namespace Telepathy Classes Client Common Logger NetworkStreamExtensions SafeQueue<T> Server ThreadExtensions Utils Structs Message Enums EventType"
  },
  "api/Mirror.Weaver.Tests.WeaverTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverTests.html",
    "title": "Class WeaverTests",
    "keywords": "Class WeaverTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public abstract class WeaverTests : object Fields | Improve this Doc View Source logger Declaration public static readonly ILogger logger Field Value Type Description ILogger | Improve this Doc View Source weaverErrors Declaration protected List<string> weaverErrors Field Value Type Description List < String > | Improve this Doc View Source weaverWarnings Declaration protected List<string> weaverWarnings Field Value Type Description List < String > Methods | Improve this Doc View Source BuildAndWeaveTestAssembly(String, String) Declaration protected void BuildAndWeaveTestAssembly(string className, string testName) Parameters Type Name Description String className String testName | Improve this Doc View Source FixtureCleanup() Declaration public void FixtureCleanup() | Improve this Doc View Source FixtureSetup() Declaration public void FixtureSetup() | Improve this Doc View Source TestCleanup() Declaration public void TestCleanup()"
  },
  "api/Mirror.Experimental.NetworkTransform.html": {
    "href": "api/Mirror.Experimental.NetworkTransform.html",
    "title": "Class NetworkTransform",
    "keywords": "Class NetworkTransform Inheritance Object NetworkBehaviour NetworkTransformBase NetworkTransform Inherited Members NetworkTransformBase.clientAuthority NetworkTransformBase.excludeOwnerUpdate NetworkTransformBase.syncPosition NetworkTransformBase.syncRotation NetworkTransformBase.syncScale NetworkTransformBase.interpolatePosition NetworkTransformBase.interpolateRotation NetworkTransformBase.interpolateScale NetworkTransformBase.localPositionSensitivity NetworkTransformBase.localRotationSensitivity NetworkTransformBase.localScaleSensitivity NetworkTransformBase.lastPosition NetworkTransformBase.lastRotation NetworkTransformBase.lastScale NetworkTransformBase.start NetworkTransformBase.goal NetworkTransformBase.ServerTeleport(Vector3) NetworkTransformBase.ServerTeleport(Vector3, Quaternion) NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Experimental Assembly : Mirror.Components.dll Syntax public class NetworkTransform : NetworkTransformBase Properties | Improve this Doc View Source targetTransform Declaration protected override Transform targetTransform { get; } Property Value Type Description Transform Overrides NetworkTransformBase.targetTransform"
  },
  "api/Telepathy.Server.html": {
    "href": "api/Telepathy.Server.html",
    "title": "Class Server",
    "keywords": "Class Server Inheritance Object Common Server Inherited Members Common.receiveQueue Common.ReceiveQueueCount Common.messageQueueSizeWarning Common.GetNextMessage(Message) Common.NoDelay Common.MaxMessageSize Common.SendTimeout Common.SendMessagesBlocking(NetworkStream, Byte[][]) Common.ReadMessageBlocking(NetworkStream, Int32, Byte[]) Common.ReceiveLoop(Int32, TcpClient, ConcurrentQueue<Message>, Int32) Common.SendLoop(Int32, TcpClient, SafeQueue<Byte[]>, ManualResetEvent) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Telepathy Assembly : Telepathy.dll Syntax public class Server : Common Fields | Improve this Doc View Source listener Declaration public TcpListener listener Field Value Type Description TcpListener Properties | Improve this Doc View Source Active Declaration public bool Active { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Disconnect(Int32) Declaration public bool Disconnect(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description Boolean | Improve this Doc View Source GetClientAddress(Int32) Declaration public string GetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description String | Improve this Doc View Source NextConnectionId() Declaration public int NextConnectionId() Returns Type Description Int32 | Improve this Doc View Source Send(Int32, Byte[]) Declaration public bool Send(int connectionId, byte[] data) Parameters Type Name Description Int32 connectionId Byte [] data Returns Type Description Boolean | Improve this Doc View Source Start(Int32) Declaration public bool Start(int port) Parameters Type Name Description Int32 port Returns Type Description Boolean | Improve this Doc View Source Stop() Declaration public void Stop()"
  },
  "api/Mirror.Tests.MessageTests.OverloadMethodTest.html": {
    "href": "api/Mirror.Tests.MessageTests.OverloadMethodTest.html",
    "title": "Class OverloadMethodTest",
    "keywords": "Class OverloadMethodTest Inheritance Object OverloadMethodTest Namespace : Mirror.Tests.MessageTests Assembly : Mirror.Tests.dll Syntax public class OverloadMethodTest : object Methods | Improve this Doc View Source MethodsWithNoArgs() Declaration public void MethodsWithNoArgs() | Improve this Doc View Source MethodsWithTwoArgs() Declaration public void MethodsWithTwoArgs()"
  },
  "api/Mirror.Weaver.ReaderWriterProcessor.html": {
    "href": "api/Mirror.Weaver.ReaderWriterProcessor.html",
    "title": "Class ReaderWriterProcessor",
    "keywords": "Class ReaderWriterProcessor Inheritance Object ReaderWriterProcessor Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class ReaderWriterProcessor : object Methods | Improve this Doc View Source InitializeReaderAndWriters(AssemblyDefinition) Creates a method that will store all the readers and writers into write and read The method will be marked InitializeOnLoadMethodAttribute so it gets executed before mirror runtime code Declaration public static void InitializeReaderAndWriters(AssemblyDefinition currentAssembly) Parameters Type Name Description AssemblyDefinition currentAssembly | Improve this Doc View Source Process(AssemblyDefinition) Declaration public static bool Process(AssemblyDefinition CurrentAssembly) Parameters Type Name Description AssemblyDefinition CurrentAssembly Returns Type Description Boolean"
  },
  "api/Mirror.Cloud.Example.ApiUpdater.html": {
    "href": "api/Mirror.Cloud.Example.ApiUpdater.html",
    "title": "Class ApiUpdater",
    "keywords": "Class ApiUpdater This component should be put on the NetworkManager object Inheritance Object ApiUpdater Namespace : Mirror.Cloud.Example Assembly : Mirror.Examples.Cloud.GUI.dll Syntax public class ApiUpdater : MonoBehaviour Fields | Improve this Doc View Source gameName Declaration public string gameName Field Value Type Description String"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.Array_Vector3_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.Array_Vector3_Test.html",
    "title": "Class Array_Vector3_Test",
    "keywords": "Class Array_Vector3_Test Inheritance Object Array_Vector3_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class Array_Vector3_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.CommandMessage.html": {
    "href": "api/Mirror.CommandMessage.html",
    "title": "Struct CommandMessage",
    "keywords": "Struct CommandMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct CommandMessage : NetworkMessage Fields | Improve this Doc View Source componentIndex Declaration public int componentIndex Field Value Type Description Int32 | Improve this Doc View Source functionHash Declaration public int functionHash Field Value Type Description Int32 | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32 | Improve this Doc View Source payload Declaration public ArraySegment<byte> payload Field Value Type Description ArraySegment < Byte > Implements NetworkMessage"
  },
  "api/Mirror.SceneOperation.html": {
    "href": "api/Mirror.SceneOperation.html",
    "title": "Enum SceneOperation",
    "keywords": "Enum SceneOperation Namespace : Mirror Assembly : Mirror.dll Syntax public enum SceneOperation : byte Fields Name Description LoadAdditive Normal UnloadAdditive"
  },
  "api/Mirror.Cloud.ListServerService.IListServerServerApi.html": {
    "href": "api/Mirror.Cloud.ListServerService.IListServerServerApi.html",
    "title": "Interface IListServerServerApi",
    "keywords": "Interface IListServerServerApi Inherited Members IBaseApi.Shutdown() Namespace : Mirror.Cloud.ListServerService Assembly : Mirror.Cloud.dll Syntax public interface IListServerServerApi : IBaseApi Properties | Improve this Doc View Source ServerInList Has a server been added to the list with this connection Declaration bool ServerInList { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AddServer(ServerJson) Add a server to the list Declaration void AddServer(ServerJson server) Parameters Type Name Description ServerJson server | Improve this Doc View Source RemoveServer() Removes the current server Declaration void RemoveServer() | Improve this Doc View Source UpdateServer(ServerJson) Update the current server Declaration void UpdateServer(ServerJson server) Parameters Type Name Description ServerJson server | Improve this Doc View Source UpdateServer(Int32) Update the current server Declaration void UpdateServer(int newPlayerCount) Parameters Type Name Description Int32 newPlayerCount"
  },
  "api/Mirror.Tests.RemoteAttrributeTest.TargetRpcTest.html": {
    "href": "api/Mirror.Tests.RemoteAttrributeTest.TargetRpcTest.html",
    "title": "Class TargetRpcTest",
    "keywords": "Class TargetRpcTest Inheritance Object RemoteTestBase TargetRpcTest Inherited Members RemoteTestBase.spawned RemoteTestBase.Setup() RemoteTestBase.TearDown() RemoteTestBase.CreateHostObject<T>(Boolean) RemoteTestBase.ProcessMessages() Namespace : Mirror.Tests.RemoteAttrributeTest Assembly : Mirror.Tests.dll Syntax public class TargetRpcTest : RemoteTestBase Methods | Improve this Doc View Source ErrorForTargetRpcWhenNotGivenConnectionToClient() Declaration public void ErrorForTargetRpcWhenNotGivenConnectionToClient() | Improve this Doc View Source ErrorForTargetRpcWhenObjetNotSpawned() Declaration public void ErrorForTargetRpcWhenObjetNotSpawned() | Improve this Doc View Source ErrorForTargetRpcWhenServerNotActive() Declaration public void ErrorForTargetRpcWhenServerNotActive() | Improve this Doc View Source ErrorForTargetRpcWithNoOwner() Declaration public void ErrorForTargetRpcWithNoOwner() | Improve this Doc View Source ErrorForTargetRpcWithNullArgment() Declaration public void ErrorForTargetRpcWithNullArgment() | Improve this Doc View Source TargetRpcIsCalled() Declaration public void TargetRpcIsCalled() | Improve this Doc View Source TargetRpcIsCalledOnTarget() Declaration public void TargetRpcIsCalledOnTarget()"
  },
  "api/Telepathy.ThreadExtensions.html": {
    "href": "api/Telepathy.ThreadExtensions.html",
    "title": "Class ThreadExtensions",
    "keywords": "Class ThreadExtensions Inheritance Object ThreadExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Telepathy Assembly : Telepathy.dll Syntax public static class ThreadExtensions Methods | Improve this Doc View Source AbortAndJoin(Thread) Declaration public static void AbortAndJoin(this Thread thread) Parameters Type Name Description Thread thread"
  },
  "api/Mirror.Examples.Benchmark.MonsterMovement.html": {
    "href": "api/Mirror.Examples.Benchmark.MonsterMovement.html",
    "title": "Class MonsterMovement",
    "keywords": "Class MonsterMovement Inheritance Object NetworkBehaviour MonsterMovement Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.Benchmark Assembly : Mirror.Examples.dll Syntax public class MonsterMovement : NetworkBehaviour Fields | Improve this Doc View Source movementDistance Declaration public float movementDistance Field Value Type Description Single | Improve this Doc View Source movementProbability Declaration public float movementProbability Field Value Type Description Single | Improve this Doc View Source speed Declaration public float speed Field Value Type Description Single Methods | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer()"
  },
  "api/Mirror.Cloud.IBaseApi.html": {
    "href": "api/Mirror.Cloud.IBaseApi.html",
    "title": "Interface IBaseApi",
    "keywords": "Interface IBaseApi Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public interface IBaseApi Methods | Improve this Doc View Source Shutdown() Cleans up any data created by the instance For Example: removing server from list Declaration void Shutdown()"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.Array_Vector3_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.Array_Vector3_Test.Message.html",
    "title": "Struct Array_Vector3_Test.Message",
    "keywords": "Struct Array_Vector3_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public Vector3[] collection Field Value Type Description Vector3 [] Implements NetworkMessage"
  },
  "api/Mirror.Examples.Pong.QuitButtonHUD.html": {
    "href": "api/Mirror.Examples.Pong.QuitButtonHUD.html",
    "title": "Class QuitButtonHUD",
    "keywords": "Class QuitButtonHUD Simular to NetworkManagerHUD but just quit buttons Inheritance Object QuitButtonHUD Namespace : Mirror.Examples.Pong Assembly : Mirror.Examples.Cloud.GUI.dll Syntax public class QuitButtonHUD : MonoBehaviour"
  },
  "api/Mirror.EditorScripts.ScriptableObjectUtility.html": {
    "href": "api/Mirror.EditorScripts.ScriptableObjectUtility.html",
    "title": "Class ScriptableObjectUtility",
    "keywords": "Class ScriptableObjectUtility Inheritance Object ScriptableObjectUtility Namespace : Mirror.EditorScripts Assembly : Mirror.Editor.dll Syntax public static class ScriptableObjectUtility : object Methods | Improve this Doc View Source CreateAsset<T>(String) Declaration public static T CreateAsset<T>(string defaultName) where T : ScriptableObject Parameters Type Name Description String defaultName Returns Type Description T Type Parameters Name Description T"
  },
  "api/Mirror.SimpleWeb.Log.Levels.html": {
    "href": "api/Mirror.SimpleWeb.Log.Levels.html",
    "title": "Enum Log.Levels",
    "keywords": "Enum Log.Levels Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public enum Levels : int Fields Name Description error info none verbose warn"
  },
  "api/Mirror.SyncSortedSet-1.html": {
    "href": "api/Mirror.SyncSortedSet-1.html",
    "title": "Class SyncSortedSet<T>",
    "keywords": "Class SyncSortedSet<T> Inheritance Object SyncSet <T> SyncSortedSet<T> Implements SyncObject Inherited Members SyncSet<T>.objects SyncSet<T>.Count SyncSet<T>.IsReadOnly SyncSet<T>.Callback SyncSet<T>.Reset() SyncSet<T>.IsDirty SyncSet<T>.Flush() SyncSet<T>.OnSerializeAll(NetworkWriter) SyncSet<T>.OnSerializeDelta(NetworkWriter) SyncSet<T>.OnDeserializeAll(NetworkReader) SyncSet<T>.OnDeserializeDelta(NetworkReader) SyncSet<T>.Add(T) SyncSet<T>.Clear() SyncSet<T>.Contains(T) SyncSet<T>.CopyTo(T[], Int32) SyncSet<T>.Remove(T) SyncSet<T>.ExceptWith(IEnumerable<T>) SyncSet<T>.IntersectWith(IEnumerable<T>) SyncSet<T>.IsProperSubsetOf(IEnumerable<T>) SyncSet<T>.IsProperSupersetOf(IEnumerable<T>) SyncSet<T>.IsSubsetOf(IEnumerable<T>) SyncSet<T>.IsSupersetOf(IEnumerable<T>) SyncSet<T>.Overlaps(IEnumerable<T>) SyncSet<T>.SetEquals(IEnumerable<T>) SyncSet<T>.SymmetricExceptWith(IEnumerable<T>) SyncSet<T>.UnionWith(IEnumerable<T>) Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncSortedSet<T> : SyncSet<T>, SyncObject Type Parameters Name Description T Constructors | Improve this Doc View Source SyncSortedSet() Declaration public SyncSortedSet() | Improve this Doc View Source SyncSortedSet(IComparer<T>) Declaration public SyncSortedSet(IComparer<T> comparer) Parameters Type Name Description IComparer <T> comparer Methods | Improve this Doc View Source GetEnumerator() Declaration public SortedSet<T>.Enumerator GetEnumerator() Returns Type Description SortedSet.Enumerator <> Implements SyncObject"
  },
  "api/Mirror.NetworkTransform.html": {
    "href": "api/Mirror.NetworkTransform.html",
    "title": "Class NetworkTransform",
    "keywords": "Class NetworkTransform Inheritance Object NetworkBehaviour NetworkTransformBase NetworkTransform Inherited Members NetworkTransformBase.clientAuthority NetworkTransformBase.localPositionSensitivity NetworkTransformBase.localRotationSensitivity NetworkTransformBase.localScaleSensitivity NetworkTransformBase.SerializeIntoWriter(NetworkWriter, Vector3, Quaternion, Vector3) NetworkTransformBase.OnSerialize(NetworkWriter, Boolean) NetworkTransformBase.OnDeserialize(NetworkReader, Boolean) NetworkTransformBase.ServerTeleport(Vector3) NetworkTransformBase.ServerTeleport(Vector3, Quaternion) NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class NetworkTransform : NetworkTransformBase Properties | Improve this Doc View Source targetComponent Declaration protected override Transform targetComponent { get; } Property Value Type Description Transform Overrides NetworkTransformBase.targetComponent"
  },
  "api/Mirror.Examples.Pong.NetworkManagerPong.html": {
    "href": "api/Mirror.Examples.Pong.NetworkManagerPong.html",
    "title": "Class NetworkManagerPong",
    "keywords": "Class NetworkManagerPong Inheritance Object NetworkManager NetworkManagerPong Inherited Members NetworkManager.dontDestroyOnLoad NetworkManager.runInBackground NetworkManager.autoStartServerBuild NetworkManager.showDebugMessages NetworkManager.serverTickRate NetworkManager.offlineScene NetworkManager.onlineScene NetworkManager.transport NetworkManager.networkAddress NetworkManager.maxConnections NetworkManager.disconnectInactiveConnections NetworkManager.disconnectInactiveTimeout NetworkManager.authenticator NetworkManager.playerPrefab NetworkManager.autoCreatePlayer NetworkManager.playerSpawnMethod NetworkManager.spawnPrefabs NetworkManager.singleton NetworkManager.numPlayers NetworkManager.isNetworkActive NetworkManager.clientLoadedScene NetworkManager.mode NetworkManager.OnValidate() NetworkManager.Awake() NetworkManager.Start() NetworkManager.LateUpdate() NetworkManager.IsSceneActive(String) NetworkManager.StartServer() NetworkManager.StartClient() NetworkManager.StartClient(Uri) NetworkManager.StartHost() NetworkManager.StopHost() NetworkManager.StopServer() NetworkManager.StopClient() NetworkManager.OnApplicationQuit() NetworkManager.ConfigureServerFrameRate() NetworkManager.Shutdown() NetworkManager.OnDestroy() NetworkManager.networkSceneName NetworkManager.loadingSceneAsync NetworkManager.ServerChangeScene(String) NetworkManager.startPositionIndex NetworkManager.startPositions NetworkManager.RegisterStartPosition(Transform) NetworkManager.UnRegisterStartPosition(Transform) NetworkManager.GetStartPosition() NetworkManager.OnServerConnect(NetworkConnection) NetworkManager.OnServerReady(NetworkConnection) NetworkManager.OnServerError(NetworkConnection, Int32) NetworkManager.OnServerChangeScene(String) NetworkManager.OnServerSceneChanged(String) NetworkManager.OnClientConnect(NetworkConnection) NetworkManager.OnClientDisconnect(NetworkConnection) NetworkManager.OnClientError(NetworkConnection, Int32) NetworkManager.OnClientNotReady(NetworkConnection) NetworkManager.OnClientChangeScene(String, SceneOperation, Boolean) NetworkManager.OnClientSceneChanged(NetworkConnection) NetworkManager.OnStartHost() NetworkManager.OnStartServer() NetworkManager.OnStartClient() NetworkManager.OnStopServer() NetworkManager.OnStopClient() NetworkManager.OnStopHost() Namespace : Mirror.Examples.Pong Assembly : Mirror.Examples.dll Syntax public class NetworkManagerPong : NetworkManager Fields | Improve this Doc View Source leftRacketSpawn Declaration public Transform leftRacketSpawn Field Value Type Description Transform | Improve this Doc View Source rightRacketSpawn Declaration public Transform rightRacketSpawn Field Value Type Description Transform Methods | Improve this Doc View Source OnServerAddPlayer(NetworkConnection) Declaration public override void OnServerAddPlayer(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Overrides NetworkManager.OnServerAddPlayer(NetworkConnection) | Improve this Doc View Source OnServerDisconnect(NetworkConnection) Declaration public override void OnServerDisconnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Overrides NetworkManager.OnServerDisconnect(NetworkConnection)"
  },
  "api/Mirror.SyncListUInt.html": {
    "href": "api/Mirror.SyncListUInt.html",
    "title": "Class SyncListUInt",
    "keywords": "Class SyncListUInt Inheritance Object SyncList < UInt32 > SyncListUInt Implements IReadOnlyList < UInt32 > SyncObject Inherited Members SyncList<UInt32>.Count SyncList<UInt32>.IsReadOnly SyncList<UInt32>.Callback SyncList<UInt32>.IsDirty SyncList<UInt32>.Flush() SyncList<UInt32>.Reset() SyncList<UInt32>.OnSerializeAll(NetworkWriter) SyncList<UInt32>.OnSerializeDelta(NetworkWriter) SyncList<UInt32>.OnDeserializeAll(NetworkReader) SyncList<UInt32>.OnDeserializeDelta(NetworkReader) SyncList<UInt32>.Add(UInt32) SyncList<UInt32>.AddRange(IEnumerable<UInt32>) SyncList<UInt32>.Clear() SyncList<UInt32>.Contains(UInt32) SyncList<UInt32>.CopyTo(UInt32[], Int32) SyncList<UInt32>.IndexOf(UInt32) SyncList<UInt32>.FindIndex(Predicate<UInt32>) SyncList<UInt32>.Find(Predicate<UInt32>) SyncList<UInt32>.FindAll(Predicate<UInt32>) SyncList<UInt32>.Insert(Int32, UInt32) SyncList<UInt32>.InsertRange(Int32, IEnumerable<UInt32>) SyncList<UInt32>.Remove(UInt32) SyncList<UInt32>.RemoveAt(Int32) SyncList<UInt32>.RemoveAll(Predicate<UInt32>) SyncList<UInt32>.Item[Int32] SyncList<UInt32>.GetEnumerator() Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncListUInt : SyncList<uint>, IReadOnlyList<uint>, SyncObject Implements IReadOnlyList<> SyncObject"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_int_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_int_Test.html",
    "title": "Class ArraySegment_int_Test",
    "keywords": "Class ArraySegment_int_Test Inheritance Object ArraySegment_int_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class ArraySegment_int_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.Tests.MemoryTransport.Message.html": {
    "href": "api/Mirror.Tests.MemoryTransport.Message.html",
    "title": "Struct MemoryTransport.Message",
    "keywords": "Struct MemoryTransport.Message Namespace : Mirror.Tests Assembly : Mirror.Tests.Common.dll Syntax public struct Message Constructors | Improve this Doc View Source Message(Int32, MemoryTransport.EventType, Byte[]) Declaration public Message(int connectionId, MemoryTransport.EventType eventType, byte[] data) Parameters Type Name Description Int32 connectionId MemoryTransport.EventType eventType Byte [] data Fields | Improve this Doc View Source connectionId Declaration public int connectionId Field Value Type Description Int32 | Improve this Doc View Source data Declaration public byte[] data Field Value Type Description Byte [] | Improve this Doc View Source eventType Declaration public MemoryTransport.EventType eventType Field Value Type Description MemoryTransport.EventType"
  },
  "api/Mirror.SimpleWeb.SimpleWebServer.html": {
    "href": "api/Mirror.SimpleWeb.SimpleWebServer.html",
    "title": "Class SimpleWebServer",
    "keywords": "Class SimpleWebServer Inheritance Object SimpleWebServer Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public class SimpleWebServer : object Constructors | Improve this Doc View Source SimpleWebServer(Int32, TcpConfig, Int32, Int32, SslConfig) Declaration public SimpleWebServer(int maxMessagesPerTick, TcpConfig tcpConfig, int maxMessageSize, int handshakeMaxSize, SslConfig sslConfig) Parameters Type Name Description Int32 maxMessagesPerTick TcpConfig tcpConfig Int32 maxMessageSize Int32 handshakeMaxSize SslConfig sslConfig Properties | Improve this Doc View Source Active Declaration public bool Active { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source GetClientAddress(Int32) Declaration public string GetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description String | Improve this Doc View Source KickClient(Int32) Declaration public bool KickClient(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description Boolean | Improve this Doc View Source ProcessMessageQueue(MonoBehaviour) Declaration public void ProcessMessageQueue(MonoBehaviour behaviour) Parameters Type Name Description MonoBehaviour behaviour | Improve this Doc View Source SendAll(List<Int32>, ArraySegment<Byte>) Declaration public void SendAll(List<int> connectionIds, ArraySegment<byte> source) Parameters Type Name Description List < Int32 > connectionIds ArraySegment < Byte > source | Improve this Doc View Source SendOne(Int32, ArraySegment<Byte>) Declaration public void SendOne(int connectionId, ArraySegment<byte> source) Parameters Type Name Description Int32 connectionId ArraySegment < Byte > source | Improve this Doc View Source Start(UInt16) Declaration public void Start(ushort port) Parameters Type Name Description UInt16 port | Improve this Doc View Source Stop() Declaration public void Stop() Events | Improve this Doc View Source onConnect Declaration public event Action<int> onConnect Event Type Type Description Action < Int32 > | Improve this Doc View Source onData Declaration public event Action<int, ArraySegment<byte>> onData Event Type Type Description Action < Int32 , ArraySegment < Byte >> | Improve this Doc View Source onDisconnect Declaration public event Action<int> onDisconnect Event Type Type Description Action < Int32 > | Improve this Doc View Source onError Declaration public event Action<int, Exception> onError Event Type Type Description Action < Int32 , Exception >"
  },
  "api/Mirror.SimpleWeb.WebSocketClientStandAlone.html": {
    "href": "api/Mirror.SimpleWeb.WebSocketClientStandAlone.html",
    "title": "Class WebSocketClientStandAlone",
    "keywords": "Class WebSocketClientStandAlone Inheritance Object SimpleWebClient WebSocketClientStandAlone Inherited Members SimpleWebClient.Create(Int32, Int32, TcpConfig) SimpleWebClient.maxMessageSize SimpleWebClient.receiveQueue SimpleWebClient.bufferPool SimpleWebClient.state SimpleWebClient.ConnectionState SimpleWebClient.onConnect SimpleWebClient.onDisconnect SimpleWebClient.onData SimpleWebClient.onError SimpleWebClient.ProcessMessageQueue(MonoBehaviour) Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public class WebSocketClientStandAlone : SimpleWebClient Methods | Improve this Doc View Source Connect(Uri) Declaration public override void Connect(Uri serverAddress) Parameters Type Name Description Uri serverAddress Overrides SimpleWebClient.Connect(Uri) | Improve this Doc View Source Disconnect() Declaration public override void Disconnect() Overrides SimpleWebClient.Disconnect() | Improve this Doc View Source Send(ArraySegment<Byte>) Declaration public override void Send(ArraySegment<byte> segment) Parameters Type Name Description ArraySegment < Byte > segment Overrides SimpleWebClient.Send(ArraySegment<Byte>)"
  },
  "api/Mirror.LogFilter.html": {
    "href": "api/Mirror.LogFilter.html",
    "title": "Class LogFilter",
    "keywords": "Class LogFilter Inheritance Object LogFilter Namespace : Mirror Assembly : Mirror.dll Syntax public static class LogFilter : object Fields | Improve this Doc View Source Debug Declaration public static bool Debug Field Value Type Description Boolean"
  },
  "api/Mirror.Tests.EnumReadWriteTests.CustomMessage.html": {
    "href": "api/Mirror.Tests.EnumReadWriteTests.CustomMessage.html",
    "title": "Struct EnumReadWriteTests.CustomMessage",
    "keywords": "Struct EnumReadWriteTests.CustomMessage Implements NetworkMessage Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public struct CustomMessage : NetworkMessage Fields | Improve this Doc View Source customEnum Declaration public EnumReadWriteTests.MyCustomEnum customEnum Field Value Type Description EnumReadWriteTests.MyCustomEnum Implements NetworkMessage"
  },
  "api/Mirror.Logging.LogSettings.LoggerSettings.html": {
    "href": "api/Mirror.Logging.LogSettings.LoggerSettings.html",
    "title": "Struct LogSettings.LoggerSettings",
    "keywords": "Struct LogSettings.LoggerSettings Namespace : Mirror.Logging Assembly : Mirror.dll Syntax public struct LoggerSettings Fields | Improve this Doc View Source logLevel Declaration public LogType logLevel Field Value Type Description LogType | Improve this Doc View Source name Declaration public string name Field Value Type Description String"
  },
  "api/Mirror.ObjectSpawnStartedMessage.html": {
    "href": "api/Mirror.ObjectSpawnStartedMessage.html",
    "title": "Struct ObjectSpawnStartedMessage",
    "keywords": "Struct ObjectSpawnStartedMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct ObjectSpawnStartedMessage : NetworkMessage Implements NetworkMessage"
  },
  "api/Mirror.NetworkAnimator.html": {
    "href": "api/Mirror.NetworkAnimator.html",
    "title": "Class NetworkAnimator",
    "keywords": "Class NetworkAnimator A component to synchronize Mecanim animation states for networked objects. Inheritance Object NetworkBehaviour NetworkAnimator Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class NetworkAnimator : NetworkBehaviour Remarks The animation of game objects can be networked by this component. There are two models of authority for networked movement: If the object has authority on the client, then it should be animated locally on the owning client. The animation state information will be sent from the owning client to the server, then broadcast to all of the other clients. This is common for player objects. If the object has authority on the server, then it should be animated on the server and state information will be sent to all clients. This is common for objects not related to a specific client, such as an enemy unit. The NetworkAnimator synchronizes all animation parameters of the selected Animator. It does not automatically sychronize triggers. The function SetTrigger can by used by an object with authority to fire an animation trigger on other clients. Fields | Improve this Doc View Source animator The animator component to synchronize. Declaration public Animator animator Field Value Type Description Animator | Improve this Doc View Source clientAuthority Declaration public bool clientAuthority Field Value Type Description Boolean Methods | Improve this Doc View Source OnDeserialize(NetworkReader, Boolean) Custom Deserialization Declaration public override void OnDeserialize(NetworkReader reader, bool initialState) Parameters Type Name Description NetworkReader reader Boolean initialState Overrides NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) | Improve this Doc View Source OnSerialize(NetworkWriter, Boolean) Custom Serialization Declaration public override bool OnSerialize(NetworkWriter writer, bool initialState) Parameters Type Name Description NetworkWriter writer Boolean initialState Returns Type Description Boolean Overrides NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) | Improve this Doc View Source ResetTrigger(Int32) Causes an animation trigger to be reset for a networked object. Declaration public void ResetTrigger(int hash) Parameters Type Name Description Int32 hash Hash id of trigger (from the Animator). | Improve this Doc View Source ResetTrigger(String) Causes an animation trigger to be reset for a networked object. If local authority is set, and this is called from the client, then the trigger will be reset on the server and all clients. If not, then this is called on the server, and the trigger will be reset on all clients. Declaration public void ResetTrigger(string triggerName) Parameters Type Name Description String triggerName Name of trigger. | Improve this Doc View Source SetTrigger(Int32) Causes an animation trigger to be invoked for a networked object. Declaration public void SetTrigger(int hash) Parameters Type Name Description Int32 hash Hash id of trigger (from the Animator). | Improve this Doc View Source SetTrigger(String) Causes an animation trigger to be invoked for a networked object. If local authority is set, and this is called from the client, then the trigger will be invoked on the server and all clients. If not, then this is called on the server, and the trigger will be called on all clients. Declaration public void SetTrigger(string triggerName) Parameters Type Name Description String triggerName Name of trigger."
  },
  "api/Mirror.Weaver.SyncVarProcessor.html": {
    "href": "api/Mirror.Weaver.SyncVarProcessor.html",
    "title": "Class SyncVarProcessor",
    "keywords": "Class SyncVarProcessor Processes [SyncVar] in NetworkBehaviour Inheritance Object SyncVarProcessor Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class SyncVarProcessor : object Methods | Improve this Doc View Source GenerateSyncVarGetter(FieldDefinition, String, FieldDefinition) Declaration public static MethodDefinition GenerateSyncVarGetter(FieldDefinition fd, string originalName, FieldDefinition netFieldId) Parameters Type Name Description FieldDefinition fd String originalName FieldDefinition netFieldId Returns Type Description MethodDefinition | Improve this Doc View Source GenerateSyncVarSetter(TypeDefinition, FieldDefinition, String, Int64, FieldDefinition) Declaration public static MethodDefinition GenerateSyncVarSetter(TypeDefinition td, FieldDefinition fd, string originalName, long dirtyBit, FieldDefinition netFieldId) Parameters Type Name Description TypeDefinition td FieldDefinition fd String originalName Int64 dirtyBit FieldDefinition netFieldId Returns Type Description MethodDefinition | Improve this Doc View Source GetHookMethod(TypeDefinition, FieldDefinition) Declaration public static MethodDefinition GetHookMethod(TypeDefinition td, FieldDefinition syncVar) Parameters Type Name Description TypeDefinition td FieldDefinition syncVar Returns Type Description MethodDefinition | Improve this Doc View Source ProcessSyncVar(TypeDefinition, FieldDefinition, Dictionary<FieldDefinition, FieldDefinition>, Int64) Declaration public static void ProcessSyncVar(TypeDefinition td, FieldDefinition fd, Dictionary<FieldDefinition, FieldDefinition> syncVarNetIds, long dirtyBit) Parameters Type Name Description TypeDefinition td FieldDefinition fd Dictionary < FieldDefinition , FieldDefinition > syncVarNetIds Int64 dirtyBit | Improve this Doc View Source ProcessSyncVars(TypeDefinition) Declaration public static (List<FieldDefinition> syncVars, Dictionary<FieldDefinition, FieldDefinition> syncVarNetIds)ProcessSyncVars(TypeDefinition td) Parameters Type Name Description TypeDefinition td Returns Type Description ValueTuple < List < FieldDefinition >, Dictionary < FieldDefinition , FieldDefinition >> | Improve this Doc View Source WriteCallHookMethodUsingArgument(ILProcessor, MethodDefinition, VariableDefinition) Declaration public static void WriteCallHookMethodUsingArgument(ILProcessor worker, MethodDefinition hookMethod, VariableDefinition oldValue) Parameters Type Name Description ILProcessor worker MethodDefinition hookMethod VariableDefinition oldValue | Improve this Doc View Source WriteCallHookMethodUsingField(ILProcessor, MethodDefinition, VariableDefinition, FieldDefinition) Declaration public static void WriteCallHookMethodUsingField(ILProcessor worker, MethodDefinition hookMethod, VariableDefinition oldValue, FieldDefinition newValue) Parameters Type Name Description ILProcessor worker MethodDefinition hookMethod VariableDefinition oldValue FieldDefinition newValue"
  },
  "api/kcp2k.html": {
    "href": "api/kcp2k.html",
    "title": "Namespace kcp2k",
    "keywords": "Namespace kcp2k Classes Kcp KcpClient KcpClientConnection KcpConnection KcpServer KcpServerConnection KcpTransport Log Utils"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.html",
    "title": "Namespace Mirror.Tests.Generated.CollectionWriters",
    "keywords": "Namespace Mirror.Tests.Generated.CollectionWriters Classes Array_ClassWithNoConstructor_Test Array_FloatStringStruct_Test Array_int_Test Array_string_Test Array_Vector3_Test ArraySegment_ClassWithNoConstructor_Test ArraySegment_FloatStringStruct_Test ArraySegment_int_Test ArraySegment_string_Test ArraySegment_Vector3_Test List_ClassWithNoConstructor_Test List_FloatStringStruct_Test List_int_Test List_string_Test List_Vector3_Test Structs Array_ClassWithNoConstructor_Test.Message Array_FloatStringStruct_Test.Message Array_int_Test.Message Array_string_Test.Message Array_Vector3_Test.Message ArraySegment_ClassWithNoConstructor_Test.Message ArraySegment_FloatStringStruct_Test.Message ArraySegment_int_Test.Message ArraySegment_string_Test.Message ArraySegment_Vector3_Test.Message List_ClassWithNoConstructor_Test.Message List_FloatStringStruct_Test.Message List_int_Test.Message List_string_Test.Message List_Vector3_Test.Message"
  },
  "api/Mirror.Logging.NetworkLogSettings.html": {
    "href": "api/Mirror.Logging.NetworkLogSettings.html",
    "title": "Class NetworkLogSettings",
    "keywords": "Class NetworkLogSettings Used to load LogSettings in build Inheritance Object NetworkLogSettings Namespace : Mirror.Logging Assembly : Mirror.dll Syntax public class NetworkLogSettings : MonoBehaviour"
  },
  "api/Mirror.Weaver.Tests.WeaverSyncListTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverSyncListTests.html",
    "title": "Class WeaverSyncListTests",
    "keywords": "Class WeaverSyncListTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverSyncListTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverSyncListTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source GenericSyncListCanBeUsed() Declaration public void GenericSyncListCanBeUsed() | Improve this Doc View Source SyncList() Declaration public void SyncList() | Improve this Doc View Source SyncListByteValid() Declaration public void SyncListByteValid() | Improve this Doc View Source SyncListErrorForGenericStruct() Declaration public void SyncListErrorForGenericStruct() | Improve this Doc View Source SyncListErrorForInterface() Declaration public void SyncListErrorForInterface() | Improve this Doc View Source SyncListGenericAbstractInheritance() Declaration public void SyncListGenericAbstractInheritance() | Improve this Doc View Source SyncListGenericInheritance() Declaration public void SyncListGenericInheritance() | Improve this Doc View Source SyncListGenericInheritanceWithMultipleGeneric() Declaration public void SyncListGenericInheritanceWithMultipleGeneric() | Improve this Doc View Source SyncListGenericStructWithCustomMethods() Declaration public void SyncListGenericStructWithCustomMethods() | Improve this Doc View Source SyncListInheritance() Declaration public void SyncListInheritance() | Improve this Doc View Source SyncListInterfaceWithCustomMethods() Declaration public void SyncListInterfaceWithCustomMethods() | Improve this Doc View Source SyncListMissingParamlessCtor() Declaration public void SyncListMissingParamlessCtor() | Improve this Doc View Source SyncListMissingParamlessCtorManuallyInitialized() Declaration public void SyncListMissingParamlessCtorManuallyInitialized() | Improve this Doc View Source SyncListNestedInAbstractClass() Declaration public void SyncListNestedInAbstractClass() | Improve this Doc View Source SyncListNestedInAbstractClassWithInvalid() Declaration public void SyncListNestedInAbstractClassWithInvalid() | Improve this Doc View Source SyncListNestedInStruct() Declaration public void SyncListNestedInStruct() | Improve this Doc View Source SyncListNestedInStructWithInvalid() Declaration public void SyncListNestedInStructWithInvalid() | Improve this Doc View Source SyncListNestedStruct() Declaration public void SyncListNestedStruct() | Improve this Doc View Source SyncListStruct() Declaration public void SyncListStruct()"
  },
  "api/Mirror.Tests.ScriptableObjectWriterTest.ScriptableObjectMessage.html": {
    "href": "api/Mirror.Tests.ScriptableObjectWriterTest.ScriptableObjectMessage.html",
    "title": "Struct ScriptableObjectWriterTest.ScriptableObjectMessage",
    "keywords": "Struct ScriptableObjectWriterTest.ScriptableObjectMessage Implements NetworkMessage Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public struct ScriptableObjectMessage : NetworkMessage Fields | Improve this Doc View Source scriptableObject Declaration public MyScriptableObject scriptableObject Field Value Type Description MyScriptableObject Implements NetworkMessage"
  },
  "api/Mirror.SimpleWeb.EventType.html": {
    "href": "api/Mirror.SimpleWeb.EventType.html",
    "title": "Enum EventType",
    "keywords": "Enum EventType Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public enum EventType : int Fields Name Description Connected Data Disconnected Error"
  },
  "api/Mirror.Cloud.Example.NetworkManagerListServer.html": {
    "href": "api/Mirror.Cloud.Example.NetworkManagerListServer.html",
    "title": "Class NetworkManagerListServer",
    "keywords": "Class NetworkManagerListServer Network Manager with events that are used by the list server Inheritance Object NetworkManager NetworkManagerListServer NetworkManagerListServerPong Inherited Members NetworkManager.dontDestroyOnLoad NetworkManager.runInBackground NetworkManager.autoStartServerBuild NetworkManager.showDebugMessages NetworkManager.serverTickRate NetworkManager.offlineScene NetworkManager.onlineScene NetworkManager.transport NetworkManager.networkAddress NetworkManager.maxConnections NetworkManager.disconnectInactiveConnections NetworkManager.disconnectInactiveTimeout NetworkManager.authenticator NetworkManager.playerPrefab NetworkManager.autoCreatePlayer NetworkManager.playerSpawnMethod NetworkManager.spawnPrefabs NetworkManager.singleton NetworkManager.numPlayers NetworkManager.isNetworkActive NetworkManager.clientLoadedScene NetworkManager.mode NetworkManager.OnValidate() NetworkManager.Awake() NetworkManager.Start() NetworkManager.LateUpdate() NetworkManager.IsSceneActive(String) NetworkManager.StartServer() NetworkManager.StartClient() NetworkManager.StartClient(Uri) NetworkManager.StartHost() NetworkManager.StopHost() NetworkManager.StopServer() NetworkManager.StopClient() NetworkManager.OnApplicationQuit() NetworkManager.ConfigureServerFrameRate() NetworkManager.Shutdown() NetworkManager.OnDestroy() NetworkManager.networkSceneName NetworkManager.loadingSceneAsync NetworkManager.ServerChangeScene(String) NetworkManager.startPositionIndex NetworkManager.startPositions NetworkManager.RegisterStartPosition(Transform) NetworkManager.UnRegisterStartPosition(Transform) NetworkManager.GetStartPosition() NetworkManager.OnServerReady(NetworkConnection) NetworkManager.OnServerAddPlayer(NetworkConnection) NetworkManager.OnServerError(NetworkConnection, Int32) NetworkManager.OnServerChangeScene(String) NetworkManager.OnServerSceneChanged(String) NetworkManager.OnClientConnect(NetworkConnection) NetworkManager.OnClientDisconnect(NetworkConnection) NetworkManager.OnClientError(NetworkConnection, Int32) NetworkManager.OnClientNotReady(NetworkConnection) NetworkManager.OnClientChangeScene(String, SceneOperation, Boolean) NetworkManager.OnClientSceneChanged(NetworkConnection) NetworkManager.OnStartHost() NetworkManager.OnStartClient() NetworkManager.OnStopClient() NetworkManager.OnStopHost() Namespace : Mirror.Cloud.Example Assembly : Mirror.Examples.Cloud.GUI.dll Syntax public class NetworkManagerListServer : NetworkManager Methods | Improve this Doc View Source OnServerConnect(NetworkConnection) Declaration public override void OnServerConnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Overrides NetworkManager.OnServerConnect(NetworkConnection) | Improve this Doc View Source OnServerDisconnect(NetworkConnection) Declaration public override void OnServerDisconnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Overrides NetworkManager.OnServerDisconnect(NetworkConnection) | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkManager.OnStartServer() | Improve this Doc View Source OnStopServer() Declaration public override void OnStopServer() Overrides NetworkManager.OnStopServer() Events | Improve this Doc View Source onPlayerListChanged Called when players leaves or joins the room Declaration public event NetworkManagerListServer.OnPlayerListChanged onPlayerListChanged Event Type Type Description NetworkManagerListServer.OnPlayerListChanged | Improve this Doc View Source onServerStarted Called when Server Starts Declaration public event Action onServerStarted Event Type Type Description Action | Improve this Doc View Source onServerStopped Called when Server Stops Declaration public event Action onServerStopped Event Type Type Description Action"
  },
  "api/Mirror.SimpleWeb.MessageProcessor.html": {
    "href": "api/Mirror.SimpleWeb.MessageProcessor.html",
    "title": "Class MessageProcessor",
    "keywords": "Class MessageProcessor Inheritance Object MessageProcessor Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public static class MessageProcessor : object Methods | Improve this Doc View Source GetOpcode(Byte[]) Declaration public static int GetOpcode(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description Int32 | Improve this Doc View Source GetPayloadLength(Byte[]) Declaration public static int GetPayloadLength(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description Int32 | Improve this Doc View Source NeedToReadShortLength(Byte[]) Declaration public static bool NeedToReadShortLength(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description Boolean | Improve this Doc View Source ToggleMask(Byte[], Int32, ArrayBuffer, Int32, Byte[], Int32) Declaration public static void ToggleMask(byte[] src, int sourceOffset, ArrayBuffer dst, int messageLength, byte[] maskBuffer, int maskOffset) Parameters Type Name Description Byte [] src Int32 sourceOffset ArrayBuffer dst Int32 messageLength Byte [] maskBuffer Int32 maskOffset | Improve this Doc View Source ToggleMask(Byte[], Int32, Byte[], Int32, Int32, Byte[], Int32) Declaration public static void ToggleMask(byte[] src, int srcOffset, byte[] dst, int dstOffset, int messageLength, byte[] maskBuffer, int maskOffset) Parameters Type Name Description Byte [] src Int32 srcOffset Byte [] dst Int32 dstOffset Int32 messageLength Byte [] maskBuffer Int32 maskOffset | Improve this Doc View Source ToggleMask(Byte[], Int32, Int32, Byte[], Int32) Declaration public static void ToggleMask(byte[] src, int sourceOffset, int messageLength, byte[] maskBuffer, int maskOffset) Parameters Type Name Description Byte [] src Int32 sourceOffset Int32 messageLength Byte [] maskBuffer Int32 maskOffset | Improve this Doc View Source ValidateHeader(Byte[], Int32, Boolean) Declaration public static void ValidateHeader(byte[] buffer, int maxLength, bool expectMask) Parameters Type Name Description Byte [] buffer Int32 maxLength Boolean expectMask"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_ClassWithNoConstructor_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_ClassWithNoConstructor_Test.html",
    "title": "Class ArraySegment_ClassWithNoConstructor_Test",
    "keywords": "Class ArraySegment_ClassWithNoConstructor_Test Inheritance Object ArraySegment_ClassWithNoConstructor_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class ArraySegment_ClassWithNoConstructor_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.CommandAttribute.html": {
    "href": "api/Mirror.CommandAttribute.html",
    "title": "Class CommandAttribute",
    "keywords": "Class CommandAttribute Call this from a client to run this function on the server. Make sure to validate input etc. It's not possible to call this from a server. Inheritance Object CommandAttribute Namespace : Mirror Assembly : Mirror.dll Syntax public class CommandAttribute : Attribute Fields | Improve this Doc View Source channel Declaration public int channel Field Value Type Description Int32 | Improve this Doc View Source ignoreAuthority Declaration public bool ignoreAuthority Field Value Type Description Boolean"
  },
  "api/Mirror.Tests.NetworkBehaviourSerialize.NetworkBehaviourSerializeTest.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourSerialize.NetworkBehaviourSerializeTest.html",
    "title": "Class NetworkBehaviourSerializeTest",
    "keywords": "Class NetworkBehaviourSerializeTest Inheritance Object NetworkBehaviourSerializeTest Namespace : Mirror.Tests.NetworkBehaviourSerialize Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourSerializeTest : object Methods | Improve this Doc View Source BehaviourWithSyncVarTest(Boolean) Declaration public void BehaviourWithSyncVarTest(bool initialState) Parameters Type Name Description Boolean initialState | Improve this Doc View Source BehaviourWithSyncVarWithOnSerializeTest(Boolean) Declaration public void BehaviourWithSyncVarWithOnSerializeTest(bool initialState) Parameters Type Name Description Boolean initialState | Improve this Doc View Source OverrideBehaviourFromSyncVarTest(Boolean) Declaration public void OverrideBehaviourFromSyncVarTest(bool initialState) Parameters Type Name Description Boolean initialState | Improve this Doc View Source OverrideBehaviourFromSyncVarWithOnSerializeTest(Boolean) Declaration public void OverrideBehaviourFromSyncVarWithOnSerializeTest(bool initialState) Parameters Type Name Description Boolean initialState | Improve this Doc View Source OverrideBehaviourWithSyncVarFromSyncVarTest(Boolean) Declaration public void OverrideBehaviourWithSyncVarFromSyncVarTest(bool initialState) Parameters Type Name Description Boolean initialState | Improve this Doc View Source OverrideBehaviourWithSyncVarFromSyncVarWithOnSerializeTest(Boolean) Declaration public void OverrideBehaviourWithSyncVarFromSyncVarWithOnSerializeTest(bool initialState) Parameters Type Name Description Boolean initialState | Improve this Doc View Source SubClassFromSyncVarTest(Boolean) Declaration public void SubClassFromSyncVarTest(bool initialState) Parameters Type Name Description Boolean initialState | Improve this Doc View Source SubClassTest(Boolean) Declaration public void SubClassTest(bool initialState) Parameters Type Name Description Boolean initialState | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.IMessageBase.html": {
    "href": "api/Mirror.IMessageBase.html",
    "title": "Interface IMessageBase",
    "keywords": "Interface IMessageBase Namespace : Mirror Assembly : Mirror.dll Syntax public interface IMessageBase"
  },
  "api/Mirror.SimpleWeb.ClientState.html": {
    "href": "api/Mirror.SimpleWeb.ClientState.html",
    "title": "Enum ClientState",
    "keywords": "Enum ClientState Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public enum ClientState : int Fields Name Description Connected Connecting Disconnecting NotConnected"
  },
  "api/Mirror.Examples.Chat.Player.html": {
    "href": "api/Mirror.Examples.Chat.Player.html",
    "title": "Class Player",
    "keywords": "Class Player Inheritance Object NetworkBehaviour Player Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.Chat Assembly : Mirror.Examples.dll Syntax public class Player : NetworkBehaviour Fields | Improve this Doc View Source playerName Declaration public string playerName Field Value Type Description String Methods | Improve this Doc View Source CmdSend(String) Declaration public void CmdSend(string message) Parameters Type Name Description String message | Improve this Doc View Source RpcReceive(String) Declaration public void RpcReceive(string message) Parameters Type Name Description String message Events | Improve this Doc View Source OnMessage Declaration public static event Action<Player, string> OnMessage Event Type Type Description Action < Player , String >"
  },
  "api/Mirror.RemoteCalls.RemoteCallHelper.html": {
    "href": "api/Mirror.RemoteCalls.RemoteCallHelper.html",
    "title": "Class RemoteCallHelper",
    "keywords": "Class RemoteCallHelper Used to help manage remote calls for NetworkBehaviours Inheritance Object RemoteCallHelper Namespace : Mirror.RemoteCalls Assembly : Mirror.dll Syntax public static class RemoteCallHelper : object Methods | Improve this Doc View Source GetDelegate(Int32) Gets the handler function for a given hash Can be used by profilers and debuggers Declaration public static CmdDelegate GetDelegate(int cmdHash) Parameters Type Name Description Int32 cmdHash rpc function hash Returns Type Description CmdDelegate The function delegate that will handle the command | Improve this Doc View Source RegisterCommandDelegate(Type, String, CmdDelegate, Boolean) Declaration public static void RegisterCommandDelegate(Type invokeClass, string cmdName, CmdDelegate func, bool ignoreAuthority) Parameters Type Name Description Type invokeClass String cmdName CmdDelegate func Boolean ignoreAuthority | Improve this Doc View Source RegisterRpcDelegate(Type, String, CmdDelegate) Declaration public static void RegisterRpcDelegate(Type invokeClass, string rpcName, CmdDelegate func) Parameters Type Name Description Type invokeClass String rpcName CmdDelegate func"
  },
  "api/Mirror.Tests.NetworkTransformTest.html": {
    "href": "api/Mirror.Tests.NetworkTransformTest.html",
    "title": "Class NetworkTransformTest",
    "keywords": "Class NetworkTransformTest Inheritance Object NetworkTransformTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkTransformTest : object Methods | Improve this Doc View Source SerializeIntoWriterTest() Declaration public void SerializeIntoWriterTest()"
  },
  "api/Mirror.SimpleWeb.Message.html": {
    "href": "api/Mirror.SimpleWeb.Message.html",
    "title": "Struct Message",
    "keywords": "Struct Message Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public struct Message Constructors | Improve this Doc View Source Message(Exception) Declaration public Message(Exception exception) Parameters Type Name Description Exception exception | Improve this Doc View Source Message(ArrayBuffer) Declaration public Message(ArrayBuffer data) Parameters Type Name Description ArrayBuffer data | Improve this Doc View Source Message(EventType) Declaration public Message(EventType type) Parameters Type Name Description EventType type | Improve this Doc View Source Message(Int32, Exception) Declaration public Message(int connId, Exception exception) Parameters Type Name Description Int32 connId Exception exception | Improve this Doc View Source Message(Int32, ArrayBuffer) Declaration public Message(int connId, ArrayBuffer data) Parameters Type Name Description Int32 connId ArrayBuffer data | Improve this Doc View Source Message(Int32, EventType) Declaration public Message(int connId, EventType type) Parameters Type Name Description Int32 connId EventType type Fields | Improve this Doc View Source connId Declaration public readonly int connId Field Value Type Description Int32 | Improve this Doc View Source data Declaration public readonly ArrayBuffer data Field Value Type Description ArrayBuffer | Improve this Doc View Source exception Declaration public readonly Exception exception Field Value Type Description Exception | Improve this Doc View Source type Declaration public readonly EventType type Field Value Type Description EventType"
  },
  "api/Mirror.NetworkLobbyManager.html": {
    "href": "api/Mirror.NetworkLobbyManager.html",
    "title": "Class NetworkLobbyManager",
    "keywords": "Class NetworkLobbyManager This is a specialized NetworkManager that includes a networked lobby. Inheritance Object NetworkManager NetworkRoomManager NetworkLobbyManager Inherited Members NetworkRoomManager.minPlayers NetworkRoomManager.roomPlayerPrefab NetworkRoomManager.RoomScene NetworkRoomManager.GameplayScene NetworkRoomManager.pendingPlayers NetworkRoomManager.roomSlots NetworkRoomManager.allPlayersReady NetworkRoomManager.OnValidate() NetworkRoomManager.OnServerReady(NetworkConnection) NetworkRoomManager.CheckReadyToBegin() NetworkRoomManager.OnServerConnect(NetworkConnection) NetworkRoomManager.OnServerDisconnect(NetworkConnection) NetworkRoomManager.clientIndex NetworkRoomManager.OnServerAddPlayer(NetworkConnection) NetworkRoomManager.RecalculateRoomPlayerIndices() NetworkRoomManager.ServerChangeScene(String) NetworkRoomManager.OnServerSceneChanged(String) NetworkRoomManager.OnStartServer() NetworkRoomManager.OnStartHost() NetworkRoomManager.OnStopServer() NetworkRoomManager.OnStopHost() NetworkRoomManager.OnStartClient() NetworkRoomManager.OnClientConnect(NetworkConnection) NetworkRoomManager.OnClientDisconnect(NetworkConnection) NetworkRoomManager.OnStopClient() NetworkRoomManager.OnClientSceneChanged(NetworkConnection) NetworkRoomManager.OnRoomStartHost() NetworkRoomManager.OnRoomStopHost() NetworkRoomManager.OnRoomStartServer() NetworkRoomManager.OnRoomStopServer() NetworkRoomManager.OnRoomServerConnect(NetworkConnection) NetworkRoomManager.OnRoomServerDisconnect(NetworkConnection) NetworkRoomManager.OnRoomServerSceneChanged(String) NetworkRoomManager.OnRoomServerCreateRoomPlayer(NetworkConnection) NetworkRoomManager.OnRoomServerCreateGamePlayer(NetworkConnection, GameObject) NetworkRoomManager.OnRoomServerAddPlayer(NetworkConnection) NetworkRoomManager.OnRoomServerSceneLoadedForPlayer(NetworkConnection, GameObject, GameObject) NetworkRoomManager.OnRoomServerPlayersReady() NetworkRoomManager.OnRoomServerPlayersNotReady() NetworkRoomManager.OnRoomClientEnter() NetworkRoomManager.OnRoomClientExit() NetworkRoomManager.OnRoomClientConnect(NetworkConnection) NetworkRoomManager.OnRoomClientDisconnect(NetworkConnection) NetworkRoomManager.OnRoomStartClient() NetworkRoomManager.OnRoomStopClient() NetworkRoomManager.OnRoomClientSceneChanged(NetworkConnection) NetworkRoomManager.OnRoomClientAddPlayerFailed() NetworkRoomManager.OnGUI() NetworkManager.dontDestroyOnLoad NetworkManager.runInBackground NetworkManager.autoStartServerBuild NetworkManager.showDebugMessages NetworkManager.serverTickRate NetworkManager.offlineScene NetworkManager.onlineScene NetworkManager.transport NetworkManager.networkAddress NetworkManager.maxConnections NetworkManager.disconnectInactiveConnections NetworkManager.disconnectInactiveTimeout NetworkManager.authenticator NetworkManager.playerPrefab NetworkManager.autoCreatePlayer NetworkManager.playerSpawnMethod NetworkManager.spawnPrefabs NetworkManager.singleton NetworkManager.numPlayers NetworkManager.isNetworkActive NetworkManager.clientLoadedScene NetworkManager.mode NetworkManager.Awake() NetworkManager.Start() NetworkManager.LateUpdate() NetworkManager.IsSceneActive(String) NetworkManager.StartServer() NetworkManager.StartClient() NetworkManager.StartClient(Uri) NetworkManager.StartHost() NetworkManager.StopHost() NetworkManager.StopServer() NetworkManager.StopClient() NetworkManager.OnApplicationQuit() NetworkManager.ConfigureServerFrameRate() NetworkManager.Shutdown() NetworkManager.OnDestroy() NetworkManager.networkSceneName NetworkManager.loadingSceneAsync NetworkManager.startPositionIndex NetworkManager.startPositions NetworkManager.RegisterStartPosition(Transform) NetworkManager.UnRegisterStartPosition(Transform) NetworkManager.GetStartPosition() NetworkManager.OnServerError(NetworkConnection, Int32) NetworkManager.OnServerChangeScene(String) NetworkManager.OnClientError(NetworkConnection, Int32) NetworkManager.OnClientNotReady(NetworkConnection) NetworkManager.OnClientChangeScene(String, SceneOperation, Boolean) Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class NetworkLobbyManager : NetworkRoomManager Remarks The lobby has slots that track the joined players, and a maximum player count that is enforced. It requires that the NetworkLobbyPlayer component be on the lobby player objects. NetworkLobbyManager is derived from NetworkManager, and so it implements many of the virtual functions provided by the NetworkManager class. To avoid accidentally replacing functionality of the NetworkLobbyManager, there are new virtual functions on the NetworkLobbyManager that begin with \"OnLobby\". These should be used on classes derived from NetworkLobbyManager instead of the virtual functions on NetworkManager. The OnLobby*() functions have empty implementations on the NetworkLobbyManager base class, so the base class functions do not have to be called."
  },
  "api/Mirror.Tests.EnumReadWriteTests.html": {
    "href": "api/Mirror.Tests.EnumReadWriteTests.html",
    "title": "Class EnumReadWriteTests",
    "keywords": "Class EnumReadWriteTests Inheritance Object EnumReadWriteTests Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class EnumReadWriteTests : object Methods | Improve this Doc View Source ByteIsSentForByteEnum() Declaration public void ByteIsSentForByteEnum() | Improve this Doc View Source CustomWriterIsUsedForEnum() Declaration public void CustomWriterIsUsedForEnum() | Improve this Doc View Source ShortIsSentForShortEnum() Declaration public void ShortIsSentForShortEnum()"
  },
  "api/Mirror.Weaver.CommandProcessor.html": {
    "href": "api/Mirror.Weaver.CommandProcessor.html",
    "title": "Class CommandProcessor",
    "keywords": "Class CommandProcessor Processes [Command] methods in NetworkBehaviour Inheritance Object CommandProcessor Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class CommandProcessor : object Methods | Improve this Doc View Source ProcessCommandCall(TypeDefinition, MethodDefinition, CustomAttribute) Declaration public static MethodDefinition ProcessCommandCall(TypeDefinition td, MethodDefinition md, CustomAttribute commandAttr) Parameters Type Name Description TypeDefinition td MethodDefinition md CustomAttribute commandAttr Returns Type Description MethodDefinition | Improve this Doc View Source ProcessCommandInvoke(TypeDefinition, MethodDefinition, MethodDefinition) Declaration public static MethodDefinition ProcessCommandInvoke(TypeDefinition td, MethodDefinition method, MethodDefinition cmdCallFunc) Parameters Type Name Description TypeDefinition td MethodDefinition method MethodDefinition cmdCallFunc Returns Type Description MethodDefinition"
  },
  "api/Mirror.Cloud.Example.NetworkManagerListServer.OnPlayerListChanged.html": {
    "href": "api/Mirror.Cloud.Example.NetworkManagerListServer.OnPlayerListChanged.html",
    "title": "Delegate NetworkManagerListServer.OnPlayerListChanged",
    "keywords": "Delegate NetworkManagerListServer.OnPlayerListChanged Namespace : Mirror.Cloud.Example Assembly : Mirror.Examples.Cloud.GUI.dll Syntax public delegate void OnPlayerListChanged(int playerCount); Parameters Type Name Description Int32 playerCount"
  },
  "api/Mirror.Tests.OnNetworkDestroyTestNetworkBehaviour.html": {
    "href": "api/Mirror.Tests.OnNetworkDestroyTestNetworkBehaviour.html",
    "title": "Class OnNetworkDestroyTestNetworkBehaviour",
    "keywords": "Class OnNetworkDestroyTestNetworkBehaviour Inheritance Object NetworkBehaviour OnNetworkDestroyTestNetworkBehaviour Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class OnNetworkDestroyTestNetworkBehaviour : NetworkBehaviour Fields | Improve this Doc View Source called Declaration public int called Field Value Type Description Int32 Methods | Improve this Doc View Source OnStopClient() Declaration public override void OnStopClient() Overrides NetworkBehaviour.OnStopClient()"
  },
  "api/Mirror.Tests.TestPlayer.html": {
    "href": "api/Mirror.Tests.TestPlayer.html",
    "title": "Struct TestPlayer",
    "keywords": "Struct TestPlayer Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public struct TestPlayer Fields | Improve this Doc View Source item Declaration public TestItem item Field Value Type Description TestItem"
  },
  "api/Mirror.Cloud.ListServerService.ListServerServerApi.html": {
    "href": "api/Mirror.Cloud.ListServerService.ListServerServerApi.html",
    "title": "Class ListServerServerApi",
    "keywords": "Class ListServerServerApi Inheritance Object BaseApi ListServerBaseApi ListServerServerApi Implements IListServerServerApi IBaseApi Inherited Members BaseApi.runner BaseApi.requestCreator Namespace : Mirror.Cloud.ListServerService Assembly : Mirror.Cloud.dll Syntax public sealed class ListServerServerApi : ListServerBaseApi, IListServerServerApi, IBaseApi Constructors | Improve this Doc View Source ListServerServerApi(ICoroutineRunner, IRequestCreator) Declaration public ListServerServerApi(ICoroutineRunner runner, IRequestCreator requestCreator) Parameters Type Name Description ICoroutineRunner runner IRequestCreator requestCreator Properties | Improve this Doc View Source ServerInList Declaration public bool ServerInList { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AddServer(ServerJson) Declaration public void AddServer(ServerJson server) Parameters Type Name Description ServerJson server | Improve this Doc View Source RemoveServer() Declaration public void RemoveServer() | Improve this Doc View Source Shutdown() Declaration public void Shutdown() | Improve this Doc View Source UpdateServer(ServerJson) Declaration public void UpdateServer(ServerJson server) Parameters Type Name Description ServerJson server | Improve this Doc View Source UpdateServer(Int32) Declaration public void UpdateServer(int newPlayerCount) Parameters Type Name Description Int32 newPlayerCount Implements IListServerServerApi IBaseApi"
  },
  "api/Mirror.Examples.Benchmark.html": {
    "href": "api/Mirror.Examples.Benchmark.html",
    "title": "Namespace Mirror.Examples.Benchmark",
    "keywords": "Namespace Mirror.Examples.Benchmark Classes BenchmarkNetworkManager MonsterMovement PlayerMovement"
  },
  "api/Mirror.Tests.MessagePackerTest.html": {
    "href": "api/Mirror.Tests.MessagePackerTest.html",
    "title": "Class MessagePackerTest",
    "keywords": "Class MessagePackerTest Inheritance Object MessagePackerTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class MessagePackerTest : object Methods | Improve this Doc View Source MessageIdIsCorrectLength() Declaration public void MessageIdIsCorrectLength() | Improve this Doc View Source PackToByteArray<T>(T) Declaration public static byte[] PackToByteArray<T>(T message) where T : struct, NetworkMessage Parameters Type Name Description T message Returns Type Description Byte [] Type Parameters Name Description T | Improve this Doc View Source TestPacking() Declaration public void TestPacking() | Improve this Doc View Source TestUnpackIdMismatch() Declaration public void TestUnpackIdMismatch() | Improve this Doc View Source TestUnpackMessageNonGeneric() Declaration public void TestUnpackMessageNonGeneric() | Improve this Doc View Source UnpackFromByteArray<T>(Byte[]) Declaration public static T UnpackFromByteArray<T>(byte[] data) where T : struct, NetworkMessage Parameters Type Name Description Byte [] data Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source UnpackInvalidMessage() Declaration public void UnpackInvalidMessage() | Improve this Doc View Source UnpackWrongMessage() Declaration public void UnpackWrongMessage()"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.List_int_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.List_int_Test.Message.html",
    "title": "Struct List_int_Test.Message",
    "keywords": "Struct List_int_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public List<int> collection Field Value Type Description List < Int32 > Implements NetworkMessage"
  },
  "api/Mirror.Cloud.Example.ServerListUIItem.html": {
    "href": "api/Mirror.Cloud.Example.ServerListUIItem.html",
    "title": "Class ServerListUIItem",
    "keywords": "Class ServerListUIItem Displays a server created by ServerListUI Inheritance Object ServerListUIItem Namespace : Mirror.Cloud.Example Assembly : Mirror.Examples.Cloud.GUI.dll Syntax public class ServerListUIItem : MonoBehaviour Methods | Improve this Doc View Source Setup(ServerJson) Declaration public void Setup(ServerJson server) Parameters Type Name Description ServerJson server"
  },
  "api/Mirror.Tests.Runtime.ClientSceneTests.ClientSceneTests_Runtime_RegisterPrefab.html": {
    "href": "api/Mirror.Tests.Runtime.ClientSceneTests.ClientSceneTests_Runtime_RegisterPrefab.html",
    "title": "Class ClientSceneTests_Runtime_RegisterPrefab",
    "keywords": "Class ClientSceneTests_Runtime_RegisterPrefab Inheritance Object ClientSceneTestsBase ClientSceneTests_RegisterPrefabBase ClientSceneTests_Runtime_RegisterPrefab Inherited Members ClientSceneTests_RegisterPrefabBase.CheckOverloadWithAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, Boolean) ClientSceneTests_RegisterPrefabBase.CheckOverloadWithHandler(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, Boolean) ClientSceneTests_RegisterPrefabBase.OverloadWithAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) ClientSceneTests_RegisterPrefabBase.OverloadWithHandler(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) ClientSceneTests_RegisterPrefabBase.CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) ClientSceneTests_RegisterPrefabBase.CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, Guid) ClientSceneTests_RegisterPrefabBase.CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, SpawnDelegate) ClientSceneTests_RegisterPrefabBase.CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, SpawnHandlerDelegate) ClientSceneTests_RegisterPrefabBase.CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, UnSpawnDelegate) ClientSceneTests_RegisterPrefabBase.GuidForOverload(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) ClientSceneTestsBase.ValidPrefabAssetGuid ClientSceneTestsBase.PrefabWithChildrenAssetGuid ClientSceneTestsBase.InvalidPrefabAssetGuid ClientSceneTestsBase.AnotherGuidString ClientSceneTestsBase.validPrefab ClientSceneTestsBase.validPrefabNetworkIdentity ClientSceneTestsBase.prefabWithChildren ClientSceneTestsBase.invalidPrefab ClientSceneTestsBase.validPrefabGuid ClientSceneTestsBase.anotherGuid ClientSceneTestsBase._createdObjects ClientSceneTestsBase.prefabs ClientSceneTestsBase.spawnHandlers ClientSceneTestsBase.unspawnHandlers ClientSceneTestsBase.spawnableObjects ClientSceneTestsBase.OneTimeSetUp() ClientSceneTestsBase.TearDown() ClientSceneTestsBase.OneTimeTearDown() Namespace : Mirror.Tests.Runtime.ClientSceneTests Assembly : Mirror.Tests.Runtime.dll Syntax public class ClientSceneTests_Runtime_RegisterPrefab : ClientSceneTests_RegisterPrefabBase Methods | Improve this Doc View Source CreateSceneObject(out GameObject, out NetworkIdentity) Create scene objects, must be done at runtime so that sceneId isnt set when assetId.get is called Declaration protected static void CreateSceneObject(out GameObject runtimeObject, out NetworkIdentity networkIdentity) Parameters Type Name Description GameObject runtimeObject NetworkIdentity networkIdentity | Improve this Doc View Source ErrorForEmptyGuid(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void ErrorForEmptyGuid(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source Handler_AddsSpawnHandlerToDictionaryForRuntimeObject(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void Handler_AddsSpawnHandlerToDictionaryForRuntimeObject(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source Handler_AddsUnSpawnHandlerToDictionaryForRuntimeObject(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void Handler_AddsUnSpawnHandlerToDictionaryForRuntimeObject(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source PrefabNewGuid_AddsRuntimeObjectToDictionary(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void PrefabNewGuid_AddsRuntimeObjectToDictionary(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload"
  },
  "api/Mirror.Cloud.ListServerService.CustomDataHelper.html": {
    "href": "api/Mirror.Cloud.ListServerService.CustomDataHelper.html",
    "title": "Class CustomDataHelper",
    "keywords": "Class CustomDataHelper Inheritance Object CustomDataHelper Namespace : Mirror.Cloud.ListServerService Assembly : Mirror.Cloud.dll Syntax public static class CustomDataHelper : object Methods | Improve this Doc View Source ToDictionary(KeyValue[]) Declaration public static Dictionary<string, string> ToDictionary(this KeyValue[] keyValues) Parameters Type Name Description KeyValue [] keyValues Returns Type Description Dictionary < String , String > | Improve this Doc View Source ToKeyValueArray(Dictionary<String, String>) Declaration public static KeyValue[] ToKeyValueArray(this Dictionary<string, string> dictionary) Parameters Type Name Description Dictionary < String , String > dictionary Returns Type Description KeyValue [] | Improve this Doc View Source ValidateCustomData(KeyValue[]) Declaration public static void ValidateCustomData(KeyValue[] customData) Parameters Type Name Description KeyValue [] customData"
  },
  "api/Mirror.Examples.Additive.RandomColor.html": {
    "href": "api/Mirror.Examples.Additive.RandomColor.html",
    "title": "Class RandomColor",
    "keywords": "Class RandomColor Inheritance Object NetworkBehaviour RandomColor Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.Additive Assembly : Mirror.Examples.dll Syntax public class RandomColor : NetworkBehaviour Fields | Improve this Doc View Source color Declaration public Color32 color Field Value Type Description Color32 Methods | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer()"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.Array_int_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.Array_int_Test.Message.html",
    "title": "Struct Array_int_Test.Message",
    "keywords": "Struct Array_int_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public int[] collection Field Value Type Description Int32 [] Implements NetworkMessage"
  },
  "api/Mirror.Examples.MultipleAdditiveScenes.PhysicsSimulator.html": {
    "href": "api/Mirror.Examples.MultipleAdditiveScenes.PhysicsSimulator.html",
    "title": "Class PhysicsSimulator",
    "keywords": "Class PhysicsSimulator Inheritance Object PhysicsSimulator Namespace : Mirror.Examples.MultipleAdditiveScenes Assembly : Mirror.Examples.dll Syntax public class PhysicsSimulator : MonoBehaviour"
  },
  "api/Mirror.Tests.MyScriptableObject.html": {
    "href": "api/Mirror.Tests.MyScriptableObject.html",
    "title": "Class MyScriptableObject",
    "keywords": "Class MyScriptableObject Inheritance Object MyScriptableObject Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class MyScriptableObject : ScriptableObject Fields | Improve this Doc View Source someData Declaration public int someData Field Value Type Description Int32"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.List_ClassWithNoConstructor_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.List_ClassWithNoConstructor_Test.html",
    "title": "Class List_ClassWithNoConstructor_Test",
    "keywords": "Class List_ClassWithNoConstructor_Test Inheritance Object List_ClassWithNoConstructor_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class List_ClassWithNoConstructor_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.Tests.MessageTests.ResponseMessageReverse.html": {
    "href": "api/Mirror.Tests.MessageTests.ResponseMessageReverse.html",
    "title": "Class ResponseMessageReverse",
    "keywords": "Class ResponseMessageReverse Inheritance Object RequestMessageBaseReverse ResponseMessageReverse Implements NetworkMessage Inherited Members RequestMessageBaseReverse.responseId Namespace : Mirror.Tests.MessageTests Assembly : Mirror.Tests.dll Syntax public class ResponseMessageReverse : RequestMessageBaseReverse, NetworkMessage Fields | Improve this Doc View Source errorCode Declaration public int errorCode Field Value Type Description Int32 | Improve this Doc View Source message Declaration public string message Field Value Type Description String | Improve this Doc View Source state Declaration public int state Field Value Type Description Int32 Implements NetworkMessage"
  },
  "api/Mirror.ObjectHideMessage.html": {
    "href": "api/Mirror.ObjectHideMessage.html",
    "title": "Struct ObjectHideMessage",
    "keywords": "Struct ObjectHideMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct ObjectHideMessage : NetworkMessage Fields | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32 Implements NetworkMessage"
  },
  "api/Mirror.Weaver.Tests.WeaverCommandTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverCommandTests.html",
    "title": "Class WeaverCommandTests",
    "keywords": "Class WeaverCommandTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverCommandTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverCommandTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source AbstractCommand() Declaration public void AbstractCommand() | Improve this Doc View Source CommandCantBeStatic() Declaration public void CommandCantBeStatic() | Improve this Doc View Source CommandThatIgnoresAuthority() Declaration public void CommandThatIgnoresAuthority() | Improve this Doc View Source CommandThatIgnoresAuthorityWithSenderConnection() Declaration public void CommandThatIgnoresAuthorityWithSenderConnection() | Improve this Doc View Source CommandValid() Declaration public void CommandValid() | Improve this Doc View Source CommandWithArguments() Declaration public void CommandWithArguments() | Improve this Doc View Source CommandWithSenderConnectionAndOtherArgs() Declaration public void CommandWithSenderConnectionAndOtherArgs() | Improve this Doc View Source ErrorForNetworkConnectionThatIsNotSenderConnection() Declaration public void ErrorForNetworkConnectionThatIsNotSenderConnection() | Improve this Doc View Source ErrorForOptionalNetworkConnectionThatIsNotSenderConnection() Declaration public void ErrorForOptionalNetworkConnectionThatIsNotSenderConnection() | Improve this Doc View Source OverrideAbstractCommand() Declaration public void OverrideAbstractCommand() | Improve this Doc View Source OverrideVirtualCallBaseCommand() Declaration public void OverrideVirtualCallBaseCommand() | Improve this Doc View Source OverrideVirtualCallsBaseCommandWithMultipleBaseClasses() Declaration public void OverrideVirtualCallsBaseCommandWithMultipleBaseClasses() | Improve this Doc View Source OverrideVirtualCallsBaseCommandWithOverride() Declaration public void OverrideVirtualCallsBaseCommandWithOverride() | Improve this Doc View Source OverrideVirtualCommand() Declaration public void OverrideVirtualCommand() | Improve this Doc View Source VirtualCommand() Declaration public void VirtualCommand()"
  },
  "api/Mirror.ObjectDestroyMessage.html": {
    "href": "api/Mirror.ObjectDestroyMessage.html",
    "title": "Struct ObjectDestroyMessage",
    "keywords": "Struct ObjectDestroyMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct ObjectDestroyMessage : NetworkMessage Fields | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32 Implements NetworkMessage"
  },
  "api/Mirror.Tests.EnumReadWriteTests.MyByteEnum.html": {
    "href": "api/Mirror.Tests.EnumReadWriteTests.MyByteEnum.html",
    "title": "Enum EnumReadWriteTests.MyByteEnum",
    "keywords": "Enum EnumReadWriteTests.MyByteEnum Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public enum MyByteEnum : byte Fields Name Description A B C D"
  },
  "api/Mirror.MessageBase.html": {
    "href": "api/Mirror.MessageBase.html",
    "title": "Class MessageBase",
    "keywords": "Class MessageBase Inheritance Object MessageBase Implements IMessageBase Namespace : Mirror Assembly : Mirror.dll Syntax public class MessageBase : object, IMessageBase Implements IMessageBase"
  },
  "api/Mirror.Authenticators.BasicAuthenticator.AuthResponseMessage.html": {
    "href": "api/Mirror.Authenticators.BasicAuthenticator.AuthResponseMessage.html",
    "title": "Struct BasicAuthenticator.AuthResponseMessage",
    "keywords": "Struct BasicAuthenticator.AuthResponseMessage Implements NetworkMessage Namespace : Mirror.Authenticators Assembly : Mirror.Authenticators.dll Syntax public struct AuthResponseMessage : NetworkMessage Fields | Improve this Doc View Source code Declaration public byte code Field Value Type Description Byte | Improve this Doc View Source message Declaration public string message Field Value Type Description String Implements NetworkMessage"
  },
  "api/Mirror.NetworkMessage.html": {
    "href": "api/Mirror.NetworkMessage.html",
    "title": "Interface NetworkMessage",
    "keywords": "Interface NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public interface NetworkMessage"
  },
  "api/Mirror.SceneMessage.html": {
    "href": "api/Mirror.SceneMessage.html",
    "title": "Struct SceneMessage",
    "keywords": "Struct SceneMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct SceneMessage : NetworkMessage Fields | Improve this Doc View Source customHandling Declaration public bool customHandling Field Value Type Description Boolean | Improve this Doc View Source sceneName Declaration public string sceneName Field Value Type Description String | Improve this Doc View Source sceneOperation Declaration public SceneOperation sceneOperation Field Value Type Description SceneOperation Implements NetworkMessage"
  },
  "api/Mirror.NetworkMessageDelegate.html": {
    "href": "api/Mirror.NetworkMessageDelegate.html",
    "title": "Delegate NetworkMessageDelegate",
    "keywords": "Delegate NetworkMessageDelegate Namespace : Mirror Assembly : Mirror.dll Syntax public delegate void NetworkMessageDelegate(NetworkConnection conn, NetworkReader reader, int channelId); Parameters Type Name Description NetworkConnection conn NetworkReader reader Int32 channelId"
  },
  "api/Mirror.Cloud.EmptyJson.html": {
    "href": "api/Mirror.Cloud.EmptyJson.html",
    "title": "Struct EmptyJson",
    "keywords": "Struct EmptyJson Implements ICanBeJson Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public struct EmptyJson : ICanBeJson Implements ICanBeJson"
  },
  "api/Mirror.Pool-1.html": {
    "href": "api/Mirror.Pool-1.html",
    "title": "Class Pool<T>",
    "keywords": "Class Pool<T> Inheritance Object Pool<T> Namespace : Mirror Assembly : Mirror.dll Syntax public class Pool<T> : object Type Parameters Name Description T Constructors | Improve this Doc View Source Pool(Func<T>) Declaration public Pool(Func<T> objectGenerator) Parameters Type Name Description Func <T> objectGenerator Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Return(T) Declaration public void Return(T item) Parameters Type Name Description T item | Improve this Doc View Source Take() Declaration public T Take() Returns Type Description T"
  },
  "api/Mirror.Tests.NetworkBehaviourGetSyncVarGameObjectComponent.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourGetSyncVarGameObjectComponent.html",
    "title": "Class NetworkBehaviourGetSyncVarGameObjectComponent",
    "keywords": "Class NetworkBehaviourGetSyncVarGameObjectComponent Inheritance Object NetworkBehaviour NetworkBehaviourGetSyncVarGameObjectComponent Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourGetSyncVarGameObjectComponent : NetworkBehaviour Fields | Improve this Doc View Source test Declaration public GameObject test Field Value Type Description GameObject | Improve this Doc View Source testNetId Declaration public uint testNetId Field Value Type Description UInt32 Methods | Improve this Doc View Source GetSyncVarGameObjectExposed() Declaration public GameObject GetSyncVarGameObjectExposed() Returns Type Description GameObject"
  },
  "api/Mirror.Discovery.ServerFoundUnityEvent.html": {
    "href": "api/Mirror.Discovery.ServerFoundUnityEvent.html",
    "title": "Class ServerFoundUnityEvent",
    "keywords": "Class ServerFoundUnityEvent Inheritance Object ServerFoundUnityEvent Namespace : Mirror.Discovery Assembly : Mirror.Components.dll Syntax public class ServerFoundUnityEvent : UnityEvent<ServerResponse>"
  },
  "api/Mirror.Examples.Chat.ChatWindow.html": {
    "href": "api/Mirror.Examples.Chat.ChatWindow.html",
    "title": "Class ChatWindow",
    "keywords": "Class ChatWindow Inheritance Object ChatWindow Namespace : Mirror.Examples.Chat Assembly : Mirror.Examples.dll Syntax public class ChatWindow : MonoBehaviour Fields | Improve this Doc View Source chatHistory Declaration public Text chatHistory Field Value Type Description Text | Improve this Doc View Source chatMessage Declaration public InputField chatMessage Field Value Type Description InputField | Improve this Doc View Source scrollbar Declaration public Scrollbar scrollbar Field Value Type Description Scrollbar Methods | Improve this Doc View Source Awake() Declaration public void Awake() | Improve this Doc View Source OnSend() Declaration public void OnSend()"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_string_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_string_Test.Message.html",
    "title": "Struct ArraySegment_string_Test.Message",
    "keywords": "Struct ArraySegment_string_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public ArraySegment<string> collection Field Value Type Description ArraySegment < String > Implements NetworkMessage"
  },
  "api/Mirror.Tests.Performance.html": {
    "href": "api/Mirror.Tests.Performance.html",
    "title": "Namespace Mirror.Tests.Performance",
    "keywords": "Namespace Mirror.Tests.Performance Classes FakeNetworkConnection Health NetworkIdentityPerformance NetworkIdentityPerformanceWithMultipleBehaviour NetworkWriterPerformance"
  },
  "api/Mirror.ClientScene.LocalplayerChanged.html": {
    "href": "api/Mirror.ClientScene.LocalplayerChanged.html",
    "title": "Delegate ClientScene.LocalplayerChanged",
    "keywords": "Delegate ClientScene.LocalplayerChanged Namespace : Mirror Assembly : Mirror.dll Syntax public delegate void LocalplayerChanged(NetworkIdentity oldPlayer, NetworkIdentity newPlayer); Parameters Type Name Description NetworkIdentity oldPlayer NetworkIdentity newPlayer"
  },
  "api/Mirror.Cloud.ICanBeJson.html": {
    "href": "api/Mirror.Cloud.ICanBeJson.html",
    "title": "Interface ICanBeJson",
    "keywords": "Interface ICanBeJson Objects that can be sent to the Api must have this interface Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public interface ICanBeJson"
  },
  "api/Mirror.SyncVarAttributeDrawer.html": {
    "href": "api/Mirror.SyncVarAttributeDrawer.html",
    "title": "Class SyncVarAttributeDrawer",
    "keywords": "Class SyncVarAttributeDrawer Inheritance Object SyncVarAttributeDrawer Namespace : Mirror Assembly : Mirror.Editor.dll Syntax public class SyncVarAttributeDrawer : PropertyDrawer Methods | Improve this Doc View Source GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Mirror.Tests.NetworkBehaviourSerialize.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourSerialize.html",
    "title": "Namespace Mirror.Tests.NetworkBehaviourSerialize",
    "keywords": "Namespace Mirror.Tests.NetworkBehaviourSerialize Classes NetworkBehaviourSerializeTest"
  },
  "api/Mirror.Tests.Runtime.ClientSceneTests.TestListenerBehaviour.html": {
    "href": "api/Mirror.Tests.Runtime.ClientSceneTests.TestListenerBehaviour.html",
    "title": "Class TestListenerBehaviour",
    "keywords": "Class TestListenerBehaviour Inheritance Object TestListenerBehaviour Namespace : Mirror.Tests.Runtime.ClientSceneTests Assembly : Mirror.Tests.Runtime.dll Syntax public class TestListenerBehaviour : MonoBehaviour Methods | Improve this Doc View Source OnDisable() Declaration public void OnDisable() Events | Improve this Doc View Source onDestroyCalled Declaration public event System.Action onDestroyCalled Event Type Type Description Action | Improve this Doc View Source onDisableCalled Declaration public event System.Action onDisableCalled Event Type Type Description Action"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.List_Vector3_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.List_Vector3_Test.Message.html",
    "title": "Struct List_Vector3_Test.Message",
    "keywords": "Struct List_Vector3_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public List<Vector3> collection Field Value Type Description List < Vector3 > Implements NetworkMessage"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_int_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_int_Test.Message.html",
    "title": "Struct ArraySegment_int_Test.Message",
    "keywords": "Struct ArraySegment_int_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public ArraySegment<int> collection Field Value Type Description ArraySegment < Int32 > Implements NetworkMessage"
  },
  "api/Mirror.Tests.EnumReadWriteTests.ByteMessage.html": {
    "href": "api/Mirror.Tests.EnumReadWriteTests.ByteMessage.html",
    "title": "Struct EnumReadWriteTests.ByteMessage",
    "keywords": "Struct EnumReadWriteTests.ByteMessage Implements NetworkMessage Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public struct ByteMessage : NetworkMessage Fields | Improve this Doc View Source byteEnum Declaration public EnumReadWriteTests.MyByteEnum byteEnum Field Value Type Description EnumReadWriteTests.MyByteEnum Implements NetworkMessage"
  },
  "api/Mirror.NetworkManager.html": {
    "href": "api/Mirror.NetworkManager.html",
    "title": "Class NetworkManager",
    "keywords": "Class NetworkManager Inheritance Object NetworkManager NetworkManagerListServer AdditiveNetworkManager BasicNetManager BenchmarkNetworkManager ChatNetworkManager MultiSceneNetManager NetworkManagerPong NetworkRoomManager Namespace : Mirror Assembly : Mirror.dll Syntax public class NetworkManager : MonoBehaviour Fields | Improve this Doc View Source authenticator Declaration public NetworkAuthenticator authenticator Field Value Type Description NetworkAuthenticator | Improve this Doc View Source autoCreatePlayer A flag to control whether or not player objects are automatically created on connect, and on scene change. Declaration public bool autoCreatePlayer Field Value Type Description Boolean | Improve this Doc View Source autoStartServerBuild Automatically invoke StartServer() If the application is a Server Build, StartServer is automatically invoked. Server build is true when \"Server build\" is checked in build menu, or BuildOptions.EnableHeadlessMode flag is in BuildOptions Declaration public bool autoStartServerBuild Field Value Type Description Boolean | Improve this Doc View Source clientLoadedScene This is true if the client loaded a new scene when connecting to the server. This is set before OnClientConnect is called, so it can be checked there to perform different logic if a scene load occurred. Declaration public bool clientLoadedScene Field Value Type Description Boolean | Improve this Doc View Source disconnectInactiveConnections Should the server disconnect remote connections that have gone silent for more than Server Idle Timeout? Declaration public bool disconnectInactiveConnections Field Value Type Description Boolean | Improve this Doc View Source disconnectInactiveTimeout Timeout in seconds since last message from a client after which server will auto-disconnect. By default, clients send at least a Ping message every 2 seconds. The Host client is immune from idle timeout disconnection. Default value is 60 seconds. Declaration public float disconnectInactiveTimeout Field Value Type Description Single | Improve this Doc View Source dontDestroyOnLoad A flag to control whether the NetworkManager object is destroyed when the scene changes. This should be set if your game has a single NetworkManager that exists for the lifetime of the process. If there is a NetworkManager in each scene, then this should not be set. Declaration public bool dontDestroyOnLoad Field Value Type Description Boolean | Improve this Doc View Source isNetworkActive True if the server or client is started and running This is set True in StartServer / StartClient, and set False in StopServer / StopClient Declaration public bool isNetworkActive Field Value Type Description Boolean | Improve this Doc View Source loadingSceneAsync Declaration public static UnityEngine.AsyncOperation loadingSceneAsync Field Value Type Description UnityEngine.AsyncOperation | Improve this Doc View Source maxConnections The maximum number of concurrent network connections to support. This effects the memory usage of the network layer. Declaration public int maxConnections Field Value Type Description Int32 | Improve this Doc View Source networkAddress The network address currently in use. For clients, this is the address of the server that is connected to. For servers, this is the local address. Declaration public string networkAddress Field Value Type Description String | Improve this Doc View Source offlineScene The scene to switch to when offline. Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is completed - such as a client disconnect, or a server shutdown. Declaration public string offlineScene Field Value Type Description String | Improve this Doc View Source onlineScene The scene to switch to when online. Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is started - such as a client connect, or a server listen. Declaration public string onlineScene Field Value Type Description String | Improve this Doc View Source playerPrefab The default prefab to be used to create player objects on the server. Player objects are created in the default handler for AddPlayer() on the server. Implementing OnServerAddPlayer overrides this behaviour. Declaration public GameObject playerPrefab Field Value Type Description GameObject | Improve this Doc View Source playerSpawnMethod The current method of spawning players used by the NetworkManager. Declaration public PlayerSpawnMethod playerSpawnMethod Field Value Type Description PlayerSpawnMethod | Improve this Doc View Source runInBackground Controls whether the program runs when it is in the background. This is required when multiple instances of a program using networking are running on the same machine, such as when testing using localhost. But this is not recommended when deploying to mobile platforms. Declaration public bool runInBackground Field Value Type Description Boolean | Improve this Doc View Source serverTickRate Server Update frequency, per second. Use around 60Hz for fast paced games like Counter-Strike to minimize latency. Use around 30Hz for games like WoW to minimize computations. Use around 1-10Hz for slow paced games like EVE. Declaration public int serverTickRate Field Value Type Description Int32 | Improve this Doc View Source showDebugMessages Enables verbose debug messages in the console Declaration public bool showDebugMessages Field Value Type Description Boolean | Improve this Doc View Source spawnPrefabs List of prefabs that will be registered with the spawning system. For each of these prefabs, ClientScene.RegisterPrefab() will be automatically invoked. Declaration public List<GameObject> spawnPrefabs Field Value Type Description List < GameObject > | Improve this Doc View Source startPositionIndex Declaration public static int startPositionIndex Field Value Type Description Int32 | Improve this Doc View Source startPositions List of transforms populted by NetworkStartPosition components found in the scene. Declaration public static List<Transform> startPositions Field Value Type Description List < Transform > | Improve this Doc View Source transport Declaration protected Transport transport Field Value Type Description Transport Properties | Improve this Doc View Source mode Declaration public NetworkManagerMode mode { get; } Property Value Type Description NetworkManagerMode | Improve this Doc View Source networkSceneName The name of the current network scene. Declaration public static string networkSceneName { get; protected set; } Property Value Type Description String Remarks This is populated if the NetworkManager is doing scene management. Calls to ServerChangeScene() cause this to change. New clients that connect to a server will automatically load this scene. This is used to make sure that all scene changes are initialized by Mirror. Loading a scene manually wont set networkSceneName, so Mirror would still load it again on start. | Improve this Doc View Source numPlayers Number of active player objects across all connections on the server. This is only valid on the host / server. Declaration public int numPlayers { get; } Property Value Type Description Int32 | Improve this Doc View Source singleton NetworkManager singleton Declaration public static NetworkManager singleton { get; } Property Value Type Description NetworkManager Methods | Improve this Doc View Source Awake() virtual so that inheriting classes' Awake() can call base.Awake() too Declaration public virtual void Awake() | Improve this Doc View Source ConfigureServerFrameRate() Set the frame rate for a headless server. Override if you wish to disable the behavior or set your own tick rate. Declaration public virtual void ConfigureServerFrameRate() | Improve this Doc View Source GetStartPosition() This finds a spawn position based on NetworkStartPosition objects in the scene. This is used by the default implementation of OnServerAddPlayer. Declaration public Transform GetStartPosition() Returns Type Description Transform Returns the transform to spawn a player at, or null. | Improve this Doc View Source IsSceneActive(String) Declaration public static bool IsSceneActive(string scene) Parameters Type Name Description String scene Returns Type Description Boolean | Improve this Doc View Source LateUpdate() virtual so that inheriting classes' LateUpdate() can call base.LateUpdate() too Declaration public virtual void LateUpdate() | Improve this Doc View Source OnApplicationQuit() called when quitting the application by closing the window / pressing stop in the editor virtual so that inheriting classes' OnApplicationQuit() can call base.OnApplicationQuit() too Declaration public virtual void OnApplicationQuit() | Improve this Doc View Source OnClientChangeScene(String, SceneOperation, Boolean) Called from ClientChangeScene immediately before SceneManager.LoadSceneAsync is executed This allows client to do work / cleanup / prep before the scene changes. Declaration public virtual void OnClientChangeScene(string newSceneName, SceneOperation sceneOperation, bool customHandling) Parameters Type Name Description String newSceneName Name of the scene that's about to be loaded SceneOperation sceneOperation Scene operation that's about to happen Boolean customHandling true to indicate that scene loading will be handled through overrides | Improve this Doc View Source OnClientConnect(NetworkConnection) Called on the client when connected to a server. The default implementation of this function sets the client as ready and adds a player. Override the function to dictate what happens when the client connects. Declaration public virtual void OnClientConnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection to the server. | Improve this Doc View Source OnClientDisconnect(NetworkConnection) Called on clients when disconnected from a server. This is called on the client when it disconnects from the server. Override this function to decide what happens when the client disconnects. Declaration public virtual void OnClientDisconnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection to the server. | Improve this Doc View Source OnClientError(NetworkConnection, Int32) Called on clients when a network error occurs. Declaration public virtual void OnClientError(NetworkConnection conn, int errorCode) Parameters Type Name Description NetworkConnection conn Connection to a server. Int32 errorCode Error code. | Improve this Doc View Source OnClientNotReady(NetworkConnection) Called on clients when a servers tells the client it is no longer ready. This is commonly used when switching scenes. Declaration public virtual void OnClientNotReady(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection to the server. | Improve this Doc View Source OnClientSceneChanged(NetworkConnection) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. Scene changes can cause player objects to be destroyed. The default implementation of OnClientSceneChanged in the NetworkManager is to add a player object for the connection if no player object exists. Declaration public virtual void OnClientSceneChanged(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The network connection that the scene change message arrived on. | Improve this Doc View Source OnDestroy() virtual so that inheriting classes' OnDestroy() can call base.OnDestroy() too Declaration public virtual void OnDestroy() | Improve this Doc View Source OnServerAddPlayer(NetworkConnection) Called on the server when a client adds a new player with ClientScene.AddPlayer. The default implementation for this function creates a new player object from the playerPrefab. Declaration public virtual void OnServerAddPlayer(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection from client. | Improve this Doc View Source OnServerChangeScene(String) Called from ServerChangeScene immediately before SceneManager.LoadSceneAsync is executed This allows server to do work / cleanup / prep before the scene changes. Declaration public virtual void OnServerChangeScene(string newSceneName) Parameters Type Name Description String newSceneName Name of the scene that's about to be loaded | Improve this Doc View Source OnServerConnect(NetworkConnection) Called on the server when a new client connects. Unity calls this on the Server when a Client connects to the Server. Use an override to tell the NetworkManager what to do when a client connects to the server. Declaration public virtual void OnServerConnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection from client. | Improve this Doc View Source OnServerDisconnect(NetworkConnection) Called on the server when a client disconnects. This is called on the Server when a Client disconnects from the Server. Use an override to decide what should happen when a disconnection is detected. Declaration public virtual void OnServerDisconnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection from client. | Improve this Doc View Source OnServerError(NetworkConnection, Int32) Called on the server when a network error occurs for a client connection. Declaration public virtual void OnServerError(NetworkConnection conn, int errorCode) Parameters Type Name Description NetworkConnection conn Connection from client. Int32 errorCode Error code. | Improve this Doc View Source OnServerReady(NetworkConnection) Called on the server when a client is ready. The default implementation of this function calls NetworkServer.SetClientReady() to continue the network setup process. Declaration public virtual void OnServerReady(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection from client. | Improve this Doc View Source OnServerSceneChanged(String) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene(). Declaration public virtual void OnServerSceneChanged(string sceneName) Parameters Type Name Description String sceneName The name of the new scene. | Improve this Doc View Source OnStartClient() This is invoked when the client is started. Declaration public virtual void OnStartClient() | Improve this Doc View Source OnStartHost() This is invoked when a host is started. StartHost has multiple signatures, but they all cause this hook to be called. Declaration public virtual void OnStartHost() | Improve this Doc View Source OnStartServer() This is invoked when a server is started - including when a host is started. StartServer has multiple signatures, but they all cause this hook to be called. Declaration public virtual void OnStartServer() | Improve this Doc View Source OnStopClient() This is called when a client is stopped. Declaration public virtual void OnStopClient() | Improve this Doc View Source OnStopHost() This is called when a host is stopped. Declaration public virtual void OnStopHost() | Improve this Doc View Source OnStopServer() This is called when a server is stopped - including when a host is stopped. Declaration public virtual void OnStopServer() | Improve this Doc View Source OnValidate() virtual so that inheriting classes' OnValidate() can call base.OnValidate() too Declaration public virtual void OnValidate() | Improve this Doc View Source RegisterStartPosition(Transform) Registers the transform of a game object as a player spawn location. This is done automatically by NetworkStartPosition components, but can be done manually from user script code. Declaration public static void RegisterStartPosition(Transform start) Parameters Type Name Description Transform start Transform to register. | Improve this Doc View Source ServerChangeScene(String) This causes the server to switch scenes and sets the networkSceneName. Clients that connect to this server will automatically switch to this scene. This is called autmatically if onlineScene or offlineScene are set, but it can be called from user code to switch scenes again while the game is in progress. This automatically sets clients to be not-ready. The clients must call NetworkClient.Ready() again to participate in the new scene. Declaration public virtual void ServerChangeScene(string newSceneName) Parameters Type Name Description String newSceneName | Improve this Doc View Source Shutdown() This is the only way to clear the singleton, so another instance can be created. Declaration public static void Shutdown() | Improve this Doc View Source Start() virtual so that inheriting classes' Start() can call base.Start() too Declaration public virtual void Start() | Improve this Doc View Source StartClient() This starts a network client. It uses the networkAddress property as the address to connect to. This makes the newly created client connect to the server immediately. Declaration public void StartClient() | Improve this Doc View Source StartClient(Uri) This starts a network client. It uses the Uri parameter as the address to connect to. This makes the newly created client connect to the server immediately. Declaration public void StartClient(Uri uri) Parameters Type Name Description Uri uri location of the server to connect to | Improve this Doc View Source StartHost() This starts a network \"host\" - a server and client in the same application. The client returned from StartHost() is a special \"local\" client that communicates to the in-process server using a message queue instead of the real network. But in almost all other cases, it can be treated as a normal client. Declaration public void StartHost() | Improve this Doc View Source StartServer() This starts a new server. Declaration public void StartServer() | Improve this Doc View Source StopClient() Stops the client that the manager is using. Declaration public void StopClient() | Improve this Doc View Source StopHost() This stops both the client and the server that the manager is using. Declaration public void StopHost() | Improve this Doc View Source StopServer() Stops the server that the manager is using. Declaration public void StopServer() | Improve this Doc View Source UnRegisterStartPosition(Transform) Unregisters the transform of a game object as a player spawn location. This is done automatically by the NetworkStartPosition component, but can be done manually from user code. Declaration public static void UnRegisterStartPosition(Transform start) Parameters Type Name Description Transform start Transform to unregister."
  },
  "api/Mirror.Tests.NetworkIdentityTests.html": {
    "href": "api/Mirror.Tests.NetworkIdentityTests.html",
    "title": "Class NetworkIdentityTests",
    "keywords": "Class NetworkIdentityTests Inheritance Object NetworkIdentityTests Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkIdentityTests : object Methods | Improve this Doc View Source AddAllReadyServerConnectionsToObservers() Declaration public void AddAllReadyServerConnectionsToObservers() | Improve this Doc View Source AddObserver() Declaration public void AddObserver() | Improve this Doc View Source AssignAndRemoveClientAuthority() Declaration public void AssignAndRemoveClientAuthority() | Improve this Doc View Source AssignSceneID() Declaration public void AssignSceneID() | Improve this Doc View Source ClearAllComponentsDirtyBits() Declaration public void ClearAllComponentsDirtyBits() | Improve this Doc View Source ClearDirtyComponentsDirtyBits() Declaration public void ClearDirtyComponentsDirtyBits() | Improve this Doc View Source ClearObservers() Declaration public void ClearObservers() | Improve this Doc View Source CreatingNetworkBehavioursCacheShouldLogErrorForTooComponents() Declaration public void CreatingNetworkBehavioursCacheShouldLogErrorForTooComponents() | Improve this Doc View Source GetNewObservers() Declaration public void GetNewObservers() | Improve this Doc View Source GetNewObserversClearsHashSet() Declaration public void GetNewObserversClearsHashSet() | Improve this Doc View Source GetNewObserversFalseIfNoComponents() Declaration public void GetNewObserversFalseIfNoComponents() | Improve this Doc View Source GetSetAssetId() Declaration public void GetSetAssetId() | Improve this Doc View Source HandleCommand() Declaration public void HandleCommand() | Improve this Doc View Source HandleRpc() Declaration public void HandleRpc() | Improve this Doc View Source HostMode_IsFlags_Test() Declaration public void HostMode_IsFlags_Test() | Improve this Doc View Source NotifyAuthorityCallsOnStartStopAuthority() Declaration public void NotifyAuthorityCallsOnStartStopAuthority() | Improve this Doc View Source OnCheckObserverCatchesException() Declaration public void OnCheckObserverCatchesException() | Improve this Doc View Source OnCheckObserverFalse() Declaration public void OnCheckObserverFalse() | Improve this Doc View Source OnCheckObserverTrue() Declaration public void OnCheckObserverTrue() | Improve this Doc View Source OnDeserializeSafelyShouldDetectAndHandleDeSerializationMismatch() Declaration public void OnDeserializeSafelyShouldDetectAndHandleDeSerializationMismatch() | Improve this Doc View Source OnNetworkDestroy() Declaration public void OnNetworkDestroy() | Improve this Doc View Source OnSerializeAllSafelyShouldNotLogErrorsForTooManyComponents() Declaration public void OnSerializeAllSafelyShouldNotLogErrorsForTooManyComponents() | Improve this Doc View Source OnSerializeAndDeserializeAllSafely() Declaration public void OnSerializeAndDeserializeAllSafely() | Improve this Doc View Source OnSetHostVisibilityBaseTest() Declaration public void OnSetHostVisibilityBaseTest() | Improve this Doc View Source OnSetHostVisibilityCallsComponentsAndCatchesExceptions() Declaration public void OnSetHostVisibilityCallsComponentsAndCatchesExceptions() | Improve this Doc View Source OnStartAuthorityCallsComponentsAndCatchesExceptions() Declaration public void OnStartAuthorityCallsComponentsAndCatchesExceptions() | Improve this Doc View Source OnStartClientCallsComponentsAndCatchesExceptions() Declaration public void OnStartClientCallsComponentsAndCatchesExceptions() | Improve this Doc View Source OnStartLocalPlayer() Declaration public void OnStartLocalPlayer() | Improve this Doc View Source OnStartServerCallsComponentsAndCatchesExceptions() Declaration public void OnStartServerCallsComponentsAndCatchesExceptions() | Improve this Doc View Source OnStartServerInHostModeSetsIsClientTrue() Declaration public void OnStartServerInHostModeSetsIsClientTrue() | Improve this Doc View Source OnStartServerTest() Declaration public void OnStartServerTest() | Improve this Doc View Source OnStopAuthorityCallsComponentsAndCatchesExceptions() Declaration public void OnStopAuthorityCallsComponentsAndCatchesExceptions() | Improve this Doc View Source OnStopServer() Declaration public void OnStopServer() | Improve this Doc View Source OnStopServerEx() Declaration public void OnStopServerEx() | Improve this Doc View Source OnValidateSetupIDsSetsEmptyAssetIDForSceneObject() Declaration public void OnValidateSetupIDsSetsEmptyAssetIDForSceneObject() | Improve this Doc View Source RebuildObserversAddRemoveAndVisListTest() Declaration public void RebuildObserversAddRemoveAndVisListTest() | Improve this Doc View Source RebuildObserversAddsOwnReadyPlayer() Declaration public void RebuildObserversAddsOwnReadyPlayer() | Improve this Doc View Source RebuildObserversAddsReadyConnectionsIfImplemented() Declaration public void RebuildObserversAddsReadyConnectionsIfImplemented() | Improve this Doc View Source RebuildObserversAddsReadyServerConnectionsIfNotImplemented() Declaration public void RebuildObserversAddsReadyServerConnectionsIfNotImplemented() | Improve this Doc View Source RebuildObserversDoesNotAddServerConnectionsIfImplemented() Declaration public void RebuildObserversDoesNotAddServerConnectionsIfImplemented() | Improve this Doc View Source RebuildObserversDoesntAddNotReadyConnectionsIfImplemented() Declaration public void RebuildObserversDoesntAddNotReadyConnectionsIfImplemented() | Improve this Doc View Source RebuildObserversOnlyAddsOwnPlayerIfReady() Declaration public void RebuildObserversOnlyAddsOwnPlayerIfReady() | Improve this Doc View Source RebuildObserversReturnsIfNull() Declaration public void RebuildObserversReturnsIfNull() | Improve this Doc View Source RebuildObserversSetsHostVisibility() Declaration public void RebuildObserversSetsHostVisibility() | Improve this Doc View Source RemoveObserverInternal() Declaration public void RemoveObserverInternal() | Improve this Doc View Source Reset() Declaration public void Reset() | Improve this Doc View Source ServerMode_IsFlags_Test() Declaration public void ServerMode_IsFlags_Test() | Improve this Doc View Source ServerUpdate() Declaration public void ServerUpdate() | Improve this Doc View Source SetAssetId_DoesNotGiveErrorIfBothOldAndNewAreEmpty() Declaration public void SetAssetId_DoesNotGiveErrorIfBothOldAndNewAreEmpty() | Improve this Doc View Source SetAssetId_GivesErrorForEmptyGuid() Declaration public void SetAssetId_GivesErrorForEmptyGuid() | Improve this Doc View Source SetAssetId_GivesErrorIfOneExists() Declaration public void SetAssetId_GivesErrorIfOneExists() | Improve this Doc View Source SetClientOwner() Declaration public void SetClientOwner() | Improve this Doc View Source SetSceneIdSceneHashPartInternal() Declaration public void SetSceneIdSceneHashPartInternal() | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.Cloud.IUnityEqualCheck.html": {
    "href": "api/Mirror.Cloud.IUnityEqualCheck.html",
    "title": "Interface IUnityEqualCheck",
    "keywords": "Interface IUnityEqualCheck Adds Extension to check if unity object is null. Use these methods to stop MissingReferenceException Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public interface IUnityEqualCheck Extension Methods UnityEqualCheckExtension.IsNull(IUnityEqualCheck) UnityEqualCheckExtension.IsNotNull(IUnityEqualCheck)"
  },
  "api/Mirror.SimpleWeb.BufferPool.html": {
    "href": "api/Mirror.SimpleWeb.BufferPool.html",
    "title": "Class BufferPool",
    "keywords": "Class BufferPool Collection of different sized buffers Inheritance Object BufferPool Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public class BufferPool : object Remarks Problem: * Need to cached byte[] so that new ones arn't created each time * Arrays sent are multiple different sizes * Some message might be big so need buffers to cover that size * Most messages will be small compared to max message size Solution: * Create multiple groups of buffers covering the range of allowed sizes * Split range exponentially (using math.log) so that there are more groups for small buffers Constructors | Improve this Doc View Source BufferPool(Int32, Int32, Int32) Declaration public BufferPool(int bucketCount, int smallest, int largest) Parameters Type Name Description Int32 bucketCount Int32 smallest Int32 largest Methods | Improve this Doc View Source Take(Int32) Declaration public ArrayBuffer Take(int size) Parameters Type Name Description Int32 size Returns Type Description ArrayBuffer"
  },
  "api/Mirror.Examples.Chat.html": {
    "href": "api/Mirror.Examples.Chat.html",
    "title": "Namespace Mirror.Examples.Chat",
    "keywords": "Namespace Mirror.Examples.Chat Classes ChatNetworkManager ChatWindow Player Structs ChatNetworkManager.CreatePlayerMessage"
  },
  "api/Mirror.NetworkMatchChecker.html": {
    "href": "api/Mirror.NetworkMatchChecker.html",
    "title": "Class NetworkMatchChecker",
    "keywords": "Class NetworkMatchChecker Component that controls visibility of networked objects based on match id. Any object with this component on it will only be visible to other objects in the same match. This would be used to isolate players to their respective matches within a single game server instance. Inheritance Object NetworkBehaviour NetworkVisibility NetworkMatchChecker Inherited Members Mirror.NetworkVisibility.OnRebuildObservers(HashSet<>, System.Boolean) NetworkVisibility.OnSetHostVisibility(Boolean) NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class NetworkMatchChecker : NetworkVisibility Fields | Improve this Doc View Source currentMatchDebug Declaration public string currentMatchDebug Field Value Type Description String Properties | Improve this Doc View Source matchId Set this to the same value on all networked objects that belong to a given match Declaration public Guid matchId { get; set; } Property Value Type Description Guid Methods | Improve this Doc View Source OnCheckObserver(NetworkConnection) Callback used by the visibility system to determine if an observer (player) can see this object. If this function returns true, the network connection will be added as an observer. Declaration public override bool OnCheckObserver(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Network connection of a player. Returns Type Description Boolean True if the player can see this object. Overrides NetworkVisibility.OnCheckObserver(NetworkConnection) | Improve this Doc View Source OnRebuildObservers(HashSet<NetworkConnection>, Boolean) Callback used by the visibility system to (re)construct the set of observers that can see this object. Implementations of this callback should add network connections of players that can see this object to the observers set. Declaration public override void OnRebuildObservers(HashSet<NetworkConnection> observers, bool initialize) Parameters Type Name Description HashSet < NetworkConnection > observers The new set of observers for this object. Boolean initialize True if the set of observers is being built for the first time. | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer()"
  },
  "api/Mirror.Tests.EnumReadWriteTests.MyShortEnum.html": {
    "href": "api/Mirror.Tests.EnumReadWriteTests.MyShortEnum.html",
    "title": "Enum EnumReadWriteTests.MyShortEnum",
    "keywords": "Enum EnumReadWriteTests.MyShortEnum Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public enum MyShortEnum : short Fields Name Description E F G H"
  },
  "api/Mirror.NetworkDiagnostics.MessageInfo.html": {
    "href": "api/Mirror.NetworkDiagnostics.MessageInfo.html",
    "title": "Struct NetworkDiagnostics.MessageInfo",
    "keywords": "Struct NetworkDiagnostics.MessageInfo Describes an outgoing message Namespace : Mirror Assembly : Mirror.dll Syntax public struct MessageInfo Fields | Improve this Doc View Source bytes how big was the message (does not include transport headers) Declaration public readonly int bytes Field Value Type Description Int32 | Improve this Doc View Source channel channel through which the message was sent Declaration public readonly int channel Field Value Type Description Int32 | Improve this Doc View Source count How many connections was the message sent to If an object has a lot of observers this count could be high Declaration public readonly int count Field Value Type Description Int32 | Improve this Doc View Source message The message being sent Declaration public readonly NetworkMessage message Field Value Type Description NetworkMessage"
  },
  "api/Mirror.SyncMode.html": {
    "href": "api/Mirror.SyncMode.html",
    "title": "Enum SyncMode",
    "keywords": "Enum SyncMode Sync to everyone, or only to owner. Namespace : Mirror Assembly : Mirror.dll Syntax public enum SyncMode : int Fields Name Description Observers Owner"
  },
  "api/Mirror.Tests.GeneratedWriterTests.DataSenderBehaviour.html": {
    "href": "api/Mirror.Tests.GeneratedWriterTests.DataSenderBehaviour.html",
    "title": "Class DataSenderBehaviour",
    "keywords": "Class DataSenderBehaviour Inheritance Object NetworkBehaviour DataSenderBehaviour Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests.GeneratedWriterTests Assembly : Mirror.Tests.dll Syntax public class DataSenderBehaviour : NetworkBehaviour Methods | Improve this Doc View Source CmdSendData(SomeOtherData) Declaration public void CmdSendData(SomeOtherData otherData) Parameters Type Name Description SomeOtherData otherData Events | Improve this Doc View Source onData Declaration public event Action<SomeOtherData> onData Event Type Type Description Action < SomeOtherData >"
  },
  "api/Mirror.Tests.SyncListClassTest.html": {
    "href": "api/Mirror.Tests.SyncListClassTest.html",
    "title": "Class SyncListClassTest",
    "keywords": "Class SyncListClassTest Inheritance Object SyncListClassTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class SyncListClassTest : object Methods | Improve this Doc View Source ClearShouldClearAll() Declaration public void ClearShouldClearAll() | Improve this Doc View Source RemoveShouldRemoveItem() Declaration public void RemoveShouldRemoveItem()"
  },
  "api/Mirror.Cloud.RequestCreator.html": {
    "href": "api/Mirror.Cloud.RequestCreator.html",
    "title": "Class RequestCreator",
    "keywords": "Class RequestCreator Methods to create and send UnityWebRequest Inheritance Object RequestCreator Implements IRequestCreator Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public class RequestCreator : object, IRequestCreator Constructors | Improve this Doc View Source RequestCreator(String, String, ICoroutineRunner) Declaration public RequestCreator(string baseAddress, string apiKey, ICoroutineRunner coroutineRunner) Parameters Type Name Description String baseAddress String apiKey ICoroutineRunner coroutineRunner Fields | Improve this Doc View Source apiKey Declaration public readonly string apiKey Field Value Type Description String | Improve this Doc View Source baseAddress Declaration public readonly string baseAddress Field Value Type Description String Methods | Improve this Doc View Source Delete(String) Create Delete Request to page Declaration public UnityWebRequest Delete(string page) Parameters Type Name Description String page Returns Type Description UnityWebRequest | Improve this Doc View Source Get(String) Create Get Request to page Declaration public UnityWebRequest Get(string page) Parameters Type Name Description String page Returns Type Description UnityWebRequest | Improve this Doc View Source Patch<T>(String, T) Creates Patch Request to page with Json body Declaration public UnityWebRequest Patch<T>(string page, T json) where T : struct, ICanBeJson Parameters Type Name Description String page T json Returns Type Description UnityWebRequest Type Parameters Name Description T | Improve this Doc View Source Post<T>(String, T) Creates Post Request to page with Json body Declaration public UnityWebRequest Post<T>(string page, T json) where T : struct, ICanBeJson Parameters Type Name Description String page T json Returns Type Description UnityWebRequest Type Parameters Name Description T | Improve this Doc View Source SendRequest(UnityWebRequest, RequestSuccess, RequestFail) Declaration public void SendRequest(UnityWebRequest request, RequestSuccess onSuccess = null, RequestFail onFail = null) Parameters Type Name Description UnityWebRequest request RequestSuccess onSuccess RequestFail onFail | Improve this Doc View Source SendRequestEnumerator(UnityWebRequest, RequestSuccess, RequestFail) Declaration public IEnumerator SendRequestEnumerator(UnityWebRequest request, RequestSuccess onSuccess = null, RequestFail onFail = null) Parameters Type Name Description UnityWebRequest request RequestSuccess onSuccess RequestFail onFail Returns Type Description IEnumerator Implements IRequestCreator"
  },
  "api/Mirror.EditorScripts.Logging.NetworkLogSettingsEditor.html": {
    "href": "api/Mirror.EditorScripts.Logging.NetworkLogSettingsEditor.html",
    "title": "Class NetworkLogSettingsEditor",
    "keywords": "Class NetworkLogSettingsEditor Inheritance Object NetworkLogSettingsEditor Namespace : Mirror.EditorScripts.Logging Assembly : Mirror.Editor.dll Syntax public class NetworkLogSettingsEditor : Editor Methods | Improve this Doc View Source OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Mirror.Tests.SyncDictionaryTest.html": {
    "href": "api/Mirror.Tests.SyncDictionaryTest.html",
    "title": "Class SyncDictionaryTest",
    "keywords": "Class SyncDictionaryTest Inheritance Object SyncDictionaryTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class SyncDictionaryTest : object Methods | Improve this Doc View Source CallbackRemoveTest() Declaration public void CallbackRemoveTest() | Improve this Doc View Source CallbackTest() Declaration public void CallbackTest() | Improve this Doc View Source CopyToOutOfBoundsTest() Declaration public void CopyToOutOfBoundsTest() | Improve this Doc View Source CopyToOutOfRangeTest() Declaration public void CopyToOutOfRangeTest() | Improve this Doc View Source CopyToTest() Declaration public void CopyToTest() | Improve this Doc View Source CountTest() Declaration public void CountTest() | Improve this Doc View Source DirtyTest() Declaration public void DirtyTest() | Improve this Doc View Source ObjectCanBeReusedAfterReset() Declaration public void ObjectCanBeReusedAfterReset() | Improve this Doc View Source ReadOnlyTest() Declaration public void ReadOnlyTest() | Improve this Doc View Source ResetShouldClearChanges() Declaration public void ResetShouldClearChanges() | Improve this Doc View Source ResetShouldClearItems() Declaration public void ResetShouldClearItems() | Improve this Doc View Source ResetShouldSetReadOnlyToFalse() Declaration public void ResetShouldSetReadOnlyToFalse() | Improve this Doc View Source ServerCallbackTest() Declaration public void ServerCallbackTest() | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source TestAdd() Declaration public void TestAdd() | Improve this Doc View Source TestBareSet() Declaration public void TestBareSet() | Improve this Doc View Source TestBareSetNull() Declaration public void TestBareSetNull() | Improve this Doc View Source TestClear() Declaration public void TestClear() | Improve this Doc View Source TestConsecutiveSet() Declaration public void TestConsecutiveSet() | Improve this Doc View Source TestContains() Declaration public void TestContains() | Improve this Doc View Source TestInit() Declaration public void TestInit() | Improve this Doc View Source TestMultSync() Declaration public void TestMultSync() | Improve this Doc View Source TestNullSet() Declaration public void TestNullSet() | Improve this Doc View Source TestRemove() Declaration public void TestRemove() | Improve this Doc View Source TestRemovePair() Declaration public void TestRemovePair() | Improve this Doc View Source TestSet() Declaration public void TestSet() | Improve this Doc View Source WritingToReadOnlyThrows() Declaration public void WritingToReadOnlyThrows()"
  },
  "api/Mirror.Tests.NetworkBehaviourInitSyncObjectTester.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourInitSyncObjectTester.html",
    "title": "Class NetworkBehaviourInitSyncObjectTester",
    "keywords": "Class NetworkBehaviourInitSyncObjectTester Inheritance Object NetworkBehaviour NetworkBehaviourInitSyncObjectTester Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourInitSyncObjectTester : NetworkBehaviour Methods | Improve this Doc View Source InitSyncObject() Declaration public void InitSyncObject()"
  },
  "api/Mirror.Experimental.NetworkTransformBase.html": {
    "href": "api/Mirror.Experimental.NetworkTransformBase.html",
    "title": "Class NetworkTransformBase",
    "keywords": "Class NetworkTransformBase Inheritance Object NetworkBehaviour NetworkTransformBase NetworkTransform NetworkTransformChild Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Experimental Assembly : Mirror.Components.dll Syntax public abstract class NetworkTransformBase : NetworkBehaviour Fields | Improve this Doc View Source clientAuthority Declaration public bool clientAuthority Field Value Type Description Boolean | Improve this Doc View Source excludeOwnerUpdate Declaration public bool excludeOwnerUpdate Field Value Type Description Boolean | Improve this Doc View Source goal Declaration public NetworkTransformBase.DataPoint goal Field Value Type Description NetworkTransformBase.DataPoint | Improve this Doc View Source interpolatePosition Declaration public bool interpolatePosition Field Value Type Description Boolean | Improve this Doc View Source interpolateRotation Declaration public bool interpolateRotation Field Value Type Description Boolean | Improve this Doc View Source interpolateScale Declaration public bool interpolateScale Field Value Type Description Boolean | Improve this Doc View Source lastPosition Declaration public Vector3 lastPosition Field Value Type Description Vector3 | Improve this Doc View Source lastRotation Declaration public Quaternion lastRotation Field Value Type Description Quaternion | Improve this Doc View Source lastScale Declaration public Vector3 lastScale Field Value Type Description Vector3 | Improve this Doc View Source localPositionSensitivity Declaration public float localPositionSensitivity Field Value Type Description Single | Improve this Doc View Source localRotationSensitivity Declaration public float localRotationSensitivity Field Value Type Description Single | Improve this Doc View Source localScaleSensitivity Declaration public float localScaleSensitivity Field Value Type Description Single | Improve this Doc View Source start Declaration public NetworkTransformBase.DataPoint start Field Value Type Description NetworkTransformBase.DataPoint | Improve this Doc View Source syncPosition Declaration public bool syncPosition Field Value Type Description Boolean | Improve this Doc View Source syncRotation Declaration public bool syncRotation Field Value Type Description Boolean | Improve this Doc View Source syncScale Declaration public bool syncScale Field Value Type Description Boolean Properties | Improve this Doc View Source targetTransform Declaration protected abstract Transform targetTransform { get; } Property Value Type Description Transform Methods | Improve this Doc View Source ServerTeleport(Vector3) This method will override this GameObject's current Transform.localPosition to the specified Vector3 and update all clients. NOTE: position must be in LOCAL space if the transform has a parent Declaration public void ServerTeleport(Vector3 localPosition) Parameters Type Name Description Vector3 localPosition Where to teleport this GameObject | Improve this Doc View Source ServerTeleport(Vector3, Quaternion) This method will override this GameObject's current Transform.localPosition and Transform.localRotation to the specified Vector3 and Quaternion and update all clients. NOTE: localPosition must be in LOCAL space if the transform has a parent NOTE: localRotation must be in LOCAL space if the transform has a parent Declaration public void ServerTeleport(Vector3 localPosition, Quaternion localRotation) Parameters Type Name Description Vector3 localPosition Where to teleport this GameObject Quaternion localRotation Which rotation to set this GameObject"
  },
  "api/Mirror.NetworkManagerEditor.html": {
    "href": "api/Mirror.NetworkManagerEditor.html",
    "title": "Class NetworkManagerEditor",
    "keywords": "Class NetworkManagerEditor Inheritance Object NetworkManagerEditor Namespace : Mirror Assembly : Mirror.Editor.dll Syntax public class NetworkManagerEditor : Editor Fields | Improve this Doc View Source networkManager Declaration protected NetworkManager networkManager Field Value Type Description NetworkManager Methods | Improve this Doc View Source Init() Declaration protected void Init() | Improve this Doc View Source OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Mirror.SyncSet-1.SyncSetChanged.html": {
    "href": "api/Mirror.SyncSet-1.SyncSetChanged.html",
    "title": "Delegate SyncSet<T>.SyncSetChanged",
    "keywords": "Delegate SyncSet<T>.SyncSetChanged Namespace : Mirror Assembly : Mirror.dll Syntax public delegate void SyncSetChanged(SyncSet<T>.Operation op, T item); Parameters Type Name Description SyncSet.Operation <> op T item"
  },
  "api/Mirror.Logging.LogSettings.html": {
    "href": "api/Mirror.Logging.LogSettings.html",
    "title": "Class LogSettings",
    "keywords": "Class LogSettings Inheritance Object LogSettings Namespace : Mirror.Logging Assembly : Mirror.dll Syntax public class LogSettings : ScriptableObject Fields | Improve this Doc View Source loglevels Declaration public List<LogSettings.LoggerSettings> loglevels Field Value Type Description List < LogSettings.LoggerSettings > Extension Methods LogSettingsExt.SaveFromDictionary(LogSettings, SortedDictionary<String, ILogger>) LogSettingsExt.LoadIntoDictionary(LogSettings, SortedDictionary<String, ILogger>)"
  },
  "api/Mirror.Tests.Performance.Runtime.ULocalConnectionPerformance.html": {
    "href": "api/Mirror.Tests.Performance.Runtime.ULocalConnectionPerformance.html",
    "title": "Class ULocalConnectionPerformance",
    "keywords": "Class ULocalConnectionPerformance Inheritance Object ULocalConnectionPerformance Namespace : Mirror.Tests.Performance.Runtime Assembly : Mirror.Tests.Performance.Runtime.dll Syntax public class ULocalConnectionPerformance : object Methods | Improve this Doc View Source ConnectAndDisconnectWorks() Declaration public IEnumerator ConnectAndDisconnectWorks() Returns Type Description IEnumerator | Improve this Doc View Source OneTimeTearDown() Declaration public void OneTimeTearDown() | Improve this Doc View Source ULocalConnectionPerformanceWithEnumeratorPasses() Declaration public IEnumerator ULocalConnectionPerformanceWithEnumeratorPasses() Returns Type Description IEnumerator"
  },
  "api/Mirror.Weaver.Resolvers.html": {
    "href": "api/Mirror.Weaver.Resolvers.html",
    "title": "Class Resolvers",
    "keywords": "Class Resolvers Inheritance Object Resolvers Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class Resolvers : object Methods | Improve this Doc View Source ResolveDefaultPublicCtor(TypeReference) Declaration public static MethodDefinition ResolveDefaultPublicCtor(TypeReference variable) Parameters Type Name Description TypeReference variable Returns Type Description MethodDefinition | Improve this Doc View Source ResolveMethod(TypeReference, AssemblyDefinition, System.Func<MethodDefinition, Boolean>) Declaration public static MethodReference ResolveMethod(TypeReference t, AssemblyDefinition scriptDef, System.Func<MethodDefinition, bool> predicate) Parameters Type Name Description TypeReference t AssemblyDefinition scriptDef System.Func < MethodDefinition , Boolean > predicate Returns Type Description MethodReference | Improve this Doc View Source ResolveMethod(TypeReference, AssemblyDefinition, String) Declaration public static MethodReference ResolveMethod(TypeReference tr, AssemblyDefinition scriptDef, string name) Parameters Type Name Description TypeReference tr AssemblyDefinition scriptDef String name Returns Type Description MethodReference | Improve this Doc View Source ResolveProperty(TypeReference, AssemblyDefinition, String) Declaration public static MethodReference ResolveProperty(TypeReference tr, AssemblyDefinition scriptDef, string name) Parameters Type Name Description TypeReference tr AssemblyDefinition scriptDef String name Returns Type Description MethodReference | Improve this Doc View Source TryResolveMethodInParents(TypeReference, AssemblyDefinition, String) Declaration public static MethodReference TryResolveMethodInParents(TypeReference tr, AssemblyDefinition scriptDef, string name) Parameters Type Name Description TypeReference tr AssemblyDefinition scriptDef String name Returns Type Description MethodReference"
  },
  "api/Mirror.LogFactory.html": {
    "href": "api/Mirror.LogFactory.html",
    "title": "Class LogFactory",
    "keywords": "Class LogFactory Inheritance Object LogFactory Namespace : Mirror Assembly : Mirror.dll Syntax public static class LogFactory : object Properties | Improve this Doc View Source AllLoggers Declaration public static SortedDictionary<string, ILogger>.ValueCollection AllLoggers { get; } Property Value Type Description SortedDictionary.ValueCollection <> Methods | Improve this Doc View Source EnableDebugMode() Makes all log levels LogType.Log, this is so that NetworkManger.showDebugMessages can still be used Declaration public static void EnableDebugMode() | Improve this Doc View Source GetLogger(String, LogType) Declaration public static ILogger GetLogger(string loggerName, LogType defaultLogLevel = null) Parameters Type Name Description String loggerName LogType defaultLogLevel Returns Type Description ILogger | Improve this Doc View Source GetLogger(System.Type, LogType) Declaration public static ILogger GetLogger(System.Type type, LogType defaultLogLevel = null) Parameters Type Name Description System.Type type LogType defaultLogLevel Returns Type Description ILogger | Improve this Doc View Source GetLogger<T>(LogType) Declaration public static ILogger GetLogger<T>(LogType defaultLogLevel = null) Parameters Type Name Description LogType defaultLogLevel Returns Type Description ILogger Type Parameters Name Description T | Improve this Doc View Source ReplaceLogHandler(ILogHandler) Replacing log handler for all existing loggers and sets defaultLogHandler for new loggers Declaration public static void ReplaceLogHandler(ILogHandler logHandler) Parameters Type Name Description ILogHandler logHandler"
  },
  "api/Mirror.Tests.ExponentialMovingAverageTest.html": {
    "href": "api/Mirror.Tests.ExponentialMovingAverageTest.html",
    "title": "Class ExponentialMovingAverageTest",
    "keywords": "Class ExponentialMovingAverageTest Inheritance Object ExponentialMovingAverageTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class ExponentialMovingAverageTest : object Methods | Improve this Doc View Source TestInitial() Declaration public void TestInitial() | Improve this Doc View Source TestMovingAverage() Declaration public void TestMovingAverage() | Improve this Doc View Source TestVar() Declaration public void TestVar()"
  },
  "api/Mirror.Tests.StructMessages.SomeStructMessage.html": {
    "href": "api/Mirror.Tests.StructMessages.SomeStructMessage.html",
    "title": "Struct SomeStructMessage",
    "keywords": "Struct SomeStructMessage Implements NetworkMessage Namespace : Mirror.Tests.StructMessages Assembly : Mirror.Tests.dll Syntax public struct SomeStructMessage : NetworkMessage Fields | Improve this Doc View Source someValue Declaration public int someValue Field Value Type Description Int32 Implements NetworkMessage"
  },
  "api/Mirror.Tests.CommandTestNetworkBehaviour.html": {
    "href": "api/Mirror.Tests.CommandTestNetworkBehaviour.html",
    "title": "Class CommandTestNetworkBehaviour",
    "keywords": "Class CommandTestNetworkBehaviour Inheritance Object NetworkBehaviour CommandTestNetworkBehaviour Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class CommandTestNetworkBehaviour : NetworkBehaviour Fields | Improve this Doc View Source called Declaration public int called Field Value Type Description Int32 | Improve this Doc View Source senderConnectionInCall Declaration public NetworkConnection senderConnectionInCall Field Value Type Description NetworkConnection Methods | Improve this Doc View Source CommandGenerated(NetworkBehaviour, NetworkReader, NetworkConnection) Declaration public static void CommandGenerated(NetworkBehaviour comp, NetworkReader reader, NetworkConnection senderConnection) Parameters Type Name Description NetworkBehaviour comp NetworkReader reader NetworkConnection senderConnection"
  },
  "api/Mirror.NetworkRoomManager.html": {
    "href": "api/Mirror.NetworkRoomManager.html",
    "title": "Class NetworkRoomManager",
    "keywords": "Class NetworkRoomManager This is a specialized NetworkManager that includes a networked room. Inheritance Object NetworkManager NetworkRoomManager NetworkRoomManagerExt NetworkLobbyManager Inherited Members NetworkManager.dontDestroyOnLoad NetworkManager.runInBackground NetworkManager.autoStartServerBuild NetworkManager.showDebugMessages NetworkManager.serverTickRate NetworkManager.offlineScene NetworkManager.onlineScene NetworkManager.transport NetworkManager.networkAddress NetworkManager.maxConnections NetworkManager.disconnectInactiveConnections NetworkManager.disconnectInactiveTimeout NetworkManager.authenticator NetworkManager.playerPrefab NetworkManager.autoCreatePlayer NetworkManager.playerSpawnMethod NetworkManager.spawnPrefabs NetworkManager.singleton NetworkManager.numPlayers NetworkManager.isNetworkActive NetworkManager.clientLoadedScene NetworkManager.mode NetworkManager.Awake() NetworkManager.Start() NetworkManager.LateUpdate() NetworkManager.IsSceneActive(String) NetworkManager.StartServer() NetworkManager.StartClient() NetworkManager.StartClient(Uri) NetworkManager.StartHost() NetworkManager.StopHost() NetworkManager.StopServer() NetworkManager.StopClient() NetworkManager.OnApplicationQuit() NetworkManager.ConfigureServerFrameRate() NetworkManager.Shutdown() NetworkManager.OnDestroy() NetworkManager.networkSceneName NetworkManager.loadingSceneAsync NetworkManager.startPositionIndex NetworkManager.startPositions NetworkManager.RegisterStartPosition(Transform) NetworkManager.UnRegisterStartPosition(Transform) NetworkManager.GetStartPosition() NetworkManager.OnServerError(NetworkConnection, Int32) NetworkManager.OnServerChangeScene(String) NetworkManager.OnClientError(NetworkConnection, Int32) NetworkManager.OnClientNotReady(NetworkConnection) NetworkManager.OnClientChangeScene(String, SceneOperation, Boolean) Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class NetworkRoomManager : NetworkManager Remarks The room has slots that track the joined players, and a maximum player count that is enforced. It requires that the NetworkRoomPlayer component be on the room player objects. NetworkRoomManager is derived from NetworkManager, and so it implements many of the virtual functions provided by the NetworkManager class. To avoid accidentally replacing functionality of the NetworkRoomManager, there are new virtual functions on the NetworkRoomManager that begin with \"OnRoom\". These should be used on classes derived from NetworkRoomManager instead of the virtual functions on NetworkManager. The OnRoom*() functions have empty implementations on the NetworkRoomManager base class, so the base class functions do not have to be called. Fields | Improve this Doc View Source clientIndex Declaration public int clientIndex Field Value Type Description Int32 | Improve this Doc View Source GameplayScene The scene to use for the playing the game from the room. This is similar to the onlineScene of the NetworkManager. Declaration public string GameplayScene Field Value Type Description String | Improve this Doc View Source minPlayers Declaration protected int minPlayers Field Value Type Description Int32 | Improve this Doc View Source pendingPlayers List of players that are in the Room Declaration public List<NetworkRoomManager.PendingPlayer> pendingPlayers Field Value Type Description List < NetworkRoomManager.PendingPlayer > | Improve this Doc View Source roomPlayerPrefab Declaration protected NetworkRoomPlayer roomPlayerPrefab Field Value Type Description NetworkRoomPlayer | Improve this Doc View Source RoomScene The scene to use for the room. This is similar to the offlineScene of the NetworkManager. Declaration public string RoomScene Field Value Type Description String | Improve this Doc View Source roomSlots These slots track players that enter the room. The slotId on players is global to the game - across all players. Declaration public List<NetworkRoomPlayer> roomSlots Field Value Type Description List < NetworkRoomPlayer > Properties | Improve this Doc View Source allPlayersReady Declaration public bool allPlayersReady { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source CheckReadyToBegin() CheckReadyToBegin checks all of the players in the room to see if their readyToBegin flag is set. If all of the players are ready, then the server switches from the RoomScene to the PlayScene, essentially starting the game. This is called automatically in response to NetworkRoomPlayer.CmdChangeReadyState. Declaration public void CheckReadyToBegin() | Improve this Doc View Source OnClientConnect(NetworkConnection) Called on the client when connected to a server. The default implementation of this function sets the client as ready and adds a player. Override the function to dictate what happens when the client connects. Declaration public override void OnClientConnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection to the server. Overrides NetworkManager.OnClientConnect(NetworkConnection) | Improve this Doc View Source OnClientDisconnect(NetworkConnection) Called on clients when disconnected from a server. This is called on the client when it disconnects from the server. Override this function to decide what happens when the client disconnects. Declaration public override void OnClientDisconnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection to the server. Overrides NetworkManager.OnClientDisconnect(NetworkConnection) | Improve this Doc View Source OnClientSceneChanged(NetworkConnection) Called on clients when a scene has completed loaded, when the scene load was initiated by the server. Scene changes can cause player objects to be destroyed. The default implementation of OnClientSceneChanged in the NetworkManager is to add a player object for the connection if no player object exists. Declaration public override void OnClientSceneChanged(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection of the client Overrides NetworkManager.OnClientSceneChanged(NetworkConnection) | Improve this Doc View Source OnGUI() virtual so inheriting classes can roll their own Declaration public virtual void OnGUI() | Improve this Doc View Source OnRoomClientAddPlayerFailed() Called on the client when adding a player to the room fails. This could be because the room is full, or the connection is not allowed to have more players. Declaration public virtual void OnRoomClientAddPlayerFailed() | Improve this Doc View Source OnRoomClientConnect(NetworkConnection) This is called on the client when it connects to server. Declaration public virtual void OnRoomClientConnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The connection that connected. | Improve this Doc View Source OnRoomClientDisconnect(NetworkConnection) This is called on the client when disconnected from a server. Declaration public virtual void OnRoomClientDisconnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The connection that disconnected. | Improve this Doc View Source OnRoomClientEnter() This is a hook to allow custom behaviour when the game client enters the room. Declaration public virtual void OnRoomClientEnter() | Improve this Doc View Source OnRoomClientExit() This is a hook to allow custom behaviour when the game client exits the room. Declaration public virtual void OnRoomClientExit() | Improve this Doc View Source OnRoomClientSceneChanged(NetworkConnection) This is called on the client when the client is finished loading a new networked scene. Declaration public virtual void OnRoomClientSceneChanged(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The connection that finished loading a new networked scene. | Improve this Doc View Source OnRoomServerAddPlayer(NetworkConnection) This allows customization of the creation of the GamePlayer object on the server. This is only called for subsequent GamePlay scenes after the first one. See OnRoomServerCreateGamePlayer(NetworkConnection, GameObject) to customize the player object for the initial GamePlay scene. Declaration public virtual void OnRoomServerAddPlayer(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The connection the player object is for. | Improve this Doc View Source OnRoomServerConnect(NetworkConnection) This is called on the server when a new client connects to the server. Declaration public virtual void OnRoomServerConnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The new connection. | Improve this Doc View Source OnRoomServerCreateGamePlayer(NetworkConnection, GameObject) This allows customization of the creation of the GamePlayer object on the server. By default the gamePlayerPrefab is used to create the game-player, but this function allows that behaviour to be customized. The object returned from the function will be used to replace the room-player on the connection. Declaration public virtual GameObject OnRoomServerCreateGamePlayer(NetworkConnection conn, GameObject roomPlayer) Parameters Type Name Description NetworkConnection conn The connection the player object is for. GameObject roomPlayer The room player object for this connection. Returns Type Description GameObject A new GamePlayer object. | Improve this Doc View Source OnRoomServerCreateRoomPlayer(NetworkConnection) This allows customization of the creation of the room-player object on the server. By default the roomPlayerPrefab is used to create the room-player, but this function allows that behaviour to be customized. Declaration public virtual GameObject OnRoomServerCreateRoomPlayer(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The connection the player object is for. Returns Type Description GameObject The new room-player object. | Improve this Doc View Source OnRoomServerDisconnect(NetworkConnection) This is called on the server when a client disconnects. Declaration public virtual void OnRoomServerDisconnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The connection that disconnected. | Improve this Doc View Source OnRoomServerPlayersNotReady() This is called on the server when CheckReadyToBegin finds that players are not ready May be called multiple times while not ready players are joining Declaration public virtual void OnRoomServerPlayersNotReady() | Improve this Doc View Source OnRoomServerPlayersReady() This is called on the server when all the players in the room are ready. The default implementation of this function uses ServerChangeScene() to switch to the game player scene. By implementing this callback you can customize what happens when all the players in the room are ready, such as adding a countdown or a confirmation for a group leader. Declaration public virtual void OnRoomServerPlayersReady() | Improve this Doc View Source OnRoomServerSceneChanged(String) This is called on the server when a networked scene finishes loading. Declaration public virtual void OnRoomServerSceneChanged(string sceneName) Parameters Type Name Description String sceneName Name of the new scene. | Improve this Doc View Source OnRoomServerSceneLoadedForPlayer(NetworkConnection, GameObject, GameObject) This is called on the server when it is told that a client has finished switching from the room scene to a game player scene. When switching from the room, the room-player is replaced with a game-player object. This callback function gives an opportunity to apply state from the room-player to the game-player object. Declaration public virtual bool OnRoomServerSceneLoadedForPlayer(NetworkConnection conn, GameObject roomPlayer, GameObject gamePlayer) Parameters Type Name Description NetworkConnection conn The connection of the player GameObject roomPlayer The room player object. GameObject gamePlayer The game player object. Returns Type Description Boolean False to not allow this player to replace the room player. | Improve this Doc View Source OnRoomStartClient() This is called on the client when a client is started. Declaration public virtual void OnRoomStartClient() | Improve this Doc View Source OnRoomStartHost() This is called on the host when a host is started. Declaration public virtual void OnRoomStartHost() | Improve this Doc View Source OnRoomStartServer() This is called on the server when the server is started - including when a host is started. Declaration public virtual void OnRoomStartServer() | Improve this Doc View Source OnRoomStopClient() This is called on the client when the client stops. Declaration public virtual void OnRoomStopClient() | Improve this Doc View Source OnRoomStopHost() This is called on the host when the host is stopped. Declaration public virtual void OnRoomStopHost() | Improve this Doc View Source OnRoomStopServer() This is called on the server when the server is started - including when a host is stopped. Declaration public virtual void OnRoomStopServer() | Improve this Doc View Source OnServerAddPlayer(NetworkConnection) Called on the server when a client adds a new player with ClientScene.AddPlayer. The default implementation for this function creates a new player object from the playerPrefab. Declaration public override void OnServerAddPlayer(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection from client. Overrides NetworkManager.OnServerAddPlayer(NetworkConnection) | Improve this Doc View Source OnServerConnect(NetworkConnection) Called on the server when a new client connects. Unity calls this on the Server when a Client connects to the Server. Use an override to tell the NetworkManager what to do when a client connects to the server. Declaration public override void OnServerConnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection from client. Overrides NetworkManager.OnServerConnect(NetworkConnection) | Improve this Doc View Source OnServerDisconnect(NetworkConnection) Called on the server when a client disconnects. This is called on the Server when a Client disconnects from the Server. Use an override to decide what should happen when a disconnection is detected. Declaration public override void OnServerDisconnect(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection from client. Overrides NetworkManager.OnServerDisconnect(NetworkConnection) | Improve this Doc View Source OnServerReady(NetworkConnection) Called on the server when a client is ready. The default implementation of this function calls NetworkServer.SetClientReady() to continue the network setup process. Declaration public override void OnServerReady(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection from client. Overrides NetworkManager.OnServerReady(NetworkConnection) | Improve this Doc View Source OnServerSceneChanged(String) Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene(). Declaration public override void OnServerSceneChanged(string sceneName) Parameters Type Name Description String sceneName The name of the new scene. Overrides NetworkManager.OnServerSceneChanged(String) | Improve this Doc View Source OnStartClient() This is invoked when the client is started. Declaration public override void OnStartClient() Overrides NetworkManager.OnStartClient() | Improve this Doc View Source OnStartHost() This is invoked when a host is started. StartHost has multiple signatures, but they all cause this hook to be called. Declaration public override void OnStartHost() Overrides NetworkManager.OnStartHost() | Improve this Doc View Source OnStartServer() This is invoked when a server is started - including when a host is started. StartServer has multiple signatures, but they all cause this hook to be called. Declaration public override void OnStartServer() Overrides NetworkManager.OnStartServer() | Improve this Doc View Source OnStopClient() This is called when a client is stopped. Declaration public override void OnStopClient() Overrides NetworkManager.OnStopClient() | Improve this Doc View Source OnStopHost() This is called when a host is stopped. Declaration public override void OnStopHost() Overrides NetworkManager.OnStopHost() | Improve this Doc View Source OnStopServer() This is called when a server is stopped - including when a host is stopped. Declaration public override void OnStopServer() Overrides NetworkManager.OnStopServer() | Improve this Doc View Source OnValidate() Declaration public override void OnValidate() Overrides NetworkManager.OnValidate() | Improve this Doc View Source RecalculateRoomPlayerIndices() Declaration public void RecalculateRoomPlayerIndices() | Improve this Doc View Source ServerChangeScene(String) This causes the server to switch scenes and sets the networkSceneName. Clients that connect to this server will automatically switch to this scene. This is called autmatically if onlineScene or offlineScene are set, but it can be called from user code to switch scenes again while the game is in progress. This automatically sets clients to be not-ready. The clients must call NetworkClient.Ready() again to participate in the new scene. Declaration public override void ServerChangeScene(string newSceneName) Parameters Type Name Description String newSceneName Overrides NetworkManager.ServerChangeScene(String)"
  },
  "api/Mirror.NetworkIdentity.ClientAuthorityCallback.html": {
    "href": "api/Mirror.NetworkIdentity.ClientAuthorityCallback.html",
    "title": "Delegate NetworkIdentity.ClientAuthorityCallback",
    "keywords": "Delegate NetworkIdentity.ClientAuthorityCallback The delegate type for the clientAuthorityCallback. Namespace : Mirror Assembly : Mirror.dll Syntax public delegate void ClientAuthorityCallback(NetworkConnection conn, NetworkIdentity identity, bool authorityState); Parameters Type Name Description NetworkConnection conn The network connection that is gaining or losing authority. NetworkIdentity identity The object whose client authority status is being changed. Boolean authorityState The new state of client authority of the object for the connection."
  },
  "api/Mirror.SyncObject.html": {
    "href": "api/Mirror.SyncObject.html",
    "title": "Interface SyncObject",
    "keywords": "Interface SyncObject A sync object is an object that can synchronize it's state between server and client, such as a SyncList Namespace : Mirror Assembly : Mirror.dll Syntax public interface SyncObject Properties | Improve this Doc View Source IsDirty true if there are changes since the last flush Declaration bool IsDirty { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Flush() Discard all the queued changes Consider the object fully synchronized with clients Declaration void Flush() | Improve this Doc View Source OnDeserializeAll(NetworkReader) Reads a full copy of the object Declaration void OnDeserializeAll(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnDeserializeDelta(NetworkReader) Reads the changes made to the object since last sync Declaration void OnDeserializeDelta(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnSerializeAll(NetworkWriter) Write a full copy of the object Declaration void OnSerializeAll(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source OnSerializeDelta(NetworkWriter) Write the changes made to the object since last sync Declaration void OnSerializeDelta(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source Reset() Resets the SyncObject so that it can be re-used Declaration void Reset() Extension Methods SyncObjectTestMethods.GetChangeCount(SyncObject)"
  },
  "api/Mirror.Tests.LogFactoryTests.html": {
    "href": "api/Mirror.Tests.LogFactoryTests.html",
    "title": "Class LogFactoryTests",
    "keywords": "Class LogFactoryTests Inheritance Object LogFactoryTests Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class LogFactoryTests : object Methods | Improve this Doc View Source DifferentClassDifferentLogger() Declaration public void DifferentClassDifferentLogger() | Improve this Doc View Source LogDebugFull() Declaration public void LogDebugFull() | Improve this Doc View Source LogDebugIgnore() Declaration public void LogDebugIgnore() | Improve this Doc View Source SameClassSameLogger() Declaration public void SameClassSameLogger()"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.List_Vector3_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.List_Vector3_Test.html",
    "title": "Class List_Vector3_Test",
    "keywords": "Class List_Vector3_Test Inheritance Object List_Vector3_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class List_Vector3_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.Tests.GeneratedWriterTests.SomeOtherData.html": {
    "href": "api/Mirror.Tests.GeneratedWriterTests.SomeOtherData.html",
    "title": "Class SomeOtherData",
    "keywords": "Class SomeOtherData Inheritance Object BaseData SomeOtherData Inherited Members BaseData.toggle Namespace : Mirror.Tests.GeneratedWriterTests Assembly : Mirror.Tests.dll Syntax public class SomeOtherData : BaseData Fields | Improve this Doc View Source usefulNumber Declaration public int usefulNumber Field Value Type Description Int32"
  },
  "api/Mirror.Experimental.NetworkRigidbody.html": {
    "href": "api/Mirror.Experimental.NetworkRigidbody.html",
    "title": "Class NetworkRigidbody",
    "keywords": "Class NetworkRigidbody Inheritance Object NetworkBehaviour NetworkRigidbody Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Experimental Assembly : Mirror.Components.dll Syntax public class NetworkRigidbody : NetworkBehaviour"
  },
  "api/Mirror.Tests.CompressionFloatTest.html": {
    "href": "api/Mirror.Tests.CompressionFloatTest.html",
    "title": "Class CompressionFloatTest",
    "keywords": "Class CompressionFloatTest Inheritance Object CompressionFloatTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class CompressionFloatTest : object Methods | Improve this Doc View Source CanScaleToUintAndBack(Single, Single, Single, UInt32, UInt32, Single) Declaration public void CanScaleToUintAndBack(float value, float minFloat, float maxFloat, uint minUint, uint maxUint, float allowedPrecision) Parameters Type Name Description Single value Single minFloat Single maxFloat UInt32 minUint UInt32 maxUint Single allowedPrecision | Improve this Doc View Source ShouldNotThrowWhenGivenInvalidValues(Single, Single, Single, UInt32, UInt32) Declaration public void ShouldNotThrowWhenGivenInvalidValues(float value, float minFloat, float maxFloat, uint minUint, uint maxUint) Parameters Type Name Description Single value Single minFloat Single maxFloat UInt32 minUint UInt32 maxUint | Improve this Doc View Source ValuesOutOfRangeArePackedInRange(Single, Single, Single, UInt32, UInt32) Declaration public uint ValuesOutOfRangeArePackedInRange(float value, float minFloat, float maxFloat, uint minUint, uint maxUint) Parameters Type Name Description Single value Single minFloat Single maxFloat UInt32 minUint UInt32 maxUint Returns Type Description UInt32 | Improve this Doc View Source ValuesOutOfRangeAreUnPackedInRange(UInt32, Single, Single, UInt32, UInt32) Declaration public float ValuesOutOfRangeAreUnPackedInRange(uint value, float minFloat, float maxFloat, uint minUint, uint maxUint) Parameters Type Name Description UInt32 value Single minFloat Single maxFloat UInt32 minUint UInt32 maxUint Returns Type Description Single"
  },
  "api/Mirror.Tests.NetworkBehaviourTests.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourTests.html",
    "title": "Class NetworkBehaviourTests",
    "keywords": "Class NetworkBehaviourTests Inheritance Object NetworkBehaviourTests Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourTests : object Methods | Improve this Doc View Source ClearAllDirtyBitsClearsSyncObjectsDirtyBits() Declaration public void ClearAllDirtyBitsClearsSyncObjectsDirtyBits() | Improve this Doc View Source ClearAllDirtyBitsClearsSyncVarDirtyBits() Declaration public void ClearAllDirtyBitsClearsSyncVarDirtyBits() | Improve this Doc View Source ComponentIndex() Declaration public void ComponentIndex() | Improve this Doc View Source DirtyObjectBits() Declaration public void DirtyObjectBits() | Improve this Doc View Source GetDelegate() Declaration public void GetDelegate() | Improve this Doc View Source GetSyncVarGameObjectOnClient() Declaration public void GetSyncVarGameObjectOnClient() | Improve this Doc View Source GetSyncVarGameObjectOnClientNull() Declaration public void GetSyncVarGameObjectOnClientNull() | Improve this Doc View Source GetSyncVarGameObjectOnServer() Declaration public void GetSyncVarGameObjectOnServer() | Improve this Doc View Source GetSyncVarGameObjectOnServerNull() Declaration public void GetSyncVarGameObjectOnServerNull() | Improve this Doc View Source GetSyncVarNetworkIdentityOnClient() Declaration public void GetSyncVarNetworkIdentityOnClient() | Improve this Doc View Source GetSyncVarNetworkIdentityOnClientNull() Declaration public void GetSyncVarNetworkIdentityOnClientNull() | Improve this Doc View Source GetSyncVarNetworkIdentityOnServer() Declaration public void GetSyncVarNetworkIdentityOnServer() | Improve this Doc View Source GetSyncVarNetworkIdentityOnServerNull() Declaration public void GetSyncVarNetworkIdentityOnServerNull() | Improve this Doc View Source HasIdentitysConnectionToClient() Declaration public void HasIdentitysConnectionToClient() | Improve this Doc View Source HasIdentitysConnectionToServer() Declaration public void HasIdentitysConnectionToServer() | Improve this Doc View Source HasIdentitysNetId() Declaration public void HasIdentitysNetId() | Improve this Doc View Source HasNoAuthorityByDefault() Declaration public void HasNoAuthorityByDefault() | Improve this Doc View Source IsClientOnly() Declaration public void IsClientOnly() | Improve this Doc View Source IsServerOnly() Declaration public void IsServerOnly() | Improve this Doc View Source OnCheckObserverTrueByDefault() Declaration public void OnCheckObserverTrueByDefault() | Improve this Doc View Source OnNetworkDestroy() Declaration public void OnNetworkDestroy() | Improve this Doc View Source OnStartClient() Declaration public void OnStartClient() | Improve this Doc View Source OnStartLocalPlayer() Declaration public void OnStartLocalPlayer() | Improve this Doc View Source RegisterDelegateDoesntOverwrite() Declaration public void RegisterDelegateDoesntOverwrite() | Improve this Doc View Source SendCommandInternal() Declaration public void SendCommandInternal() | Improve this Doc View Source SendRPCInternal() Declaration public void SendRPCInternal() | Improve this Doc View Source SendTargetRPCInternal() Declaration public void SendTargetRPCInternal() | Improve this Doc View Source SerializeAndDeserializeObjectsAll() Declaration public void SerializeAndDeserializeObjectsAll() | Improve this Doc View Source SerializeAndDeserializeObjectsDelta() Declaration public void SerializeAndDeserializeObjectsDelta() | Improve this Doc View Source SetSyncVarGameObjectNull() Declaration public void SetSyncVarGameObjectNull() | Improve this Doc View Source SetSyncVarGameObjectWithoutNetworkIdentity() Declaration public void SetSyncVarGameObjectWithoutNetworkIdentity() | Improve this Doc View Source SetSyncVarGameObjectWithValidObject() Declaration public void SetSyncVarGameObjectWithValidObject() | Improve this Doc View Source SetSyncVarGameObjectZeroNetId() Declaration public void SetSyncVarGameObjectZeroNetId() | Improve this Doc View Source SetSyncVarNetworkIdentityNull() Declaration public void SetSyncVarNetworkIdentityNull() | Improve this Doc View Source SetSyncVarNetworkIdentityWithValidObject() Declaration public void SetSyncVarNetworkIdentityWithValidObject() | Improve this Doc View Source SetSyncVarNetworkIdentityZeroNetId() Declaration public void SetSyncVarNetworkIdentityZeroNetId() | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source SyncVarGameObjectEqualNull() Declaration public void SyncVarGameObjectEqualNull() | Improve this Doc View Source SyncVarGameObjectEqualUnspawnedGO() Declaration public void SyncVarGameObjectEqualUnspawnedGO() | Improve this Doc View Source SyncVarGameObjectEqualUnspawnedGOZeroNetIdIsTrue() Declaration public void SyncVarGameObjectEqualUnspawnedGOZeroNetIdIsTrue() | Improve this Doc View Source SyncVarGameObjectEqualValidGOWithDifferentNetId() Declaration public void SyncVarGameObjectEqualValidGOWithDifferentNetId() | Improve this Doc View Source SyncVarGameObjectEqualValidGOWithSameNetId() Declaration public void SyncVarGameObjectEqualValidGOWithSameNetId() | Improve this Doc View Source SyncVarGameObjectEqualWithoutIdentityComponent() Declaration public void SyncVarGameObjectEqualWithoutIdentityComponent() | Improve this Doc View Source SyncVarGameObjectEqualZeroNetIdAndGOWithoutIdentityComponentIsTrue() Declaration public void SyncVarGameObjectEqualZeroNetIdAndGOWithoutIdentityComponentIsTrue() | Improve this Doc View Source SyncVarGameObjectEqualZeroNetIdNullIsTrue() Declaration public void SyncVarGameObjectEqualZeroNetIdNullIsTrue() | Improve this Doc View Source SyncVarNetworkIdentityEqualNull() Declaration public void SyncVarNetworkIdentityEqualNull() | Improve this Doc View Source SyncVarNetworkIdentityEqualUnspawnedIdentity() Declaration public void SyncVarNetworkIdentityEqualUnspawnedIdentity() | Improve this Doc View Source SyncVarNetworkIdentityEqualUnspawnedIdentityZeroNetIdIsTrue() Declaration public void SyncVarNetworkIdentityEqualUnspawnedIdentityZeroNetIdIsTrue() | Improve this Doc View Source SyncVarNetworkIdentityEqualValidIdentityWithDifferentNetId() Declaration public void SyncVarNetworkIdentityEqualValidIdentityWithDifferentNetId() | Improve this Doc View Source SyncVarNetworkIdentityEqualValidIdentityWithSameNetId() Declaration public void SyncVarNetworkIdentityEqualValidIdentityWithSameNetId() | Improve this Doc View Source SyncVarNetworkIdentityEqualZeroNetIdNullIsTrue() Declaration public void SyncVarNetworkIdentityEqualZeroNetIdNullIsTrue() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.StringHash.html": {
    "href": "api/Mirror.StringHash.html",
    "title": "Class StringHash",
    "keywords": "Class StringHash Inheritance Object StringHash Namespace : Mirror Assembly : Mirror.dll Syntax public static class StringHash : object Methods | Improve this Doc View Source GetStableHashCode(String) Declaration public static int GetStableHashCode(this string text) Parameters Type Name Description String text Returns Type Description Int32"
  },
  "api/Mirror.Examples.MultipleAdditiveScenes.html": {
    "href": "api/Mirror.Examples.MultipleAdditiveScenes.html",
    "title": "Namespace Mirror.Examples.MultipleAdditiveScenes",
    "keywords": "Namespace Mirror.Examples.MultipleAdditiveScenes Classes MultiSceneNetManager PhysicsCollision PhysicsSimulator PlayerController PlayerScore RandomColor Reward"
  },
  "api/Mirror.ConnectState.html": {
    "href": "api/Mirror.ConnectState.html",
    "title": "Enum ConnectState",
    "keywords": "Enum ConnectState Namespace : Mirror Assembly : Mirror.dll Syntax public enum ConnectState : int Fields Name Description Connected Connecting Disconnected None"
  },
  "api/Mirror.Authenticators.BasicAuthenticator.AuthRequestMessage.html": {
    "href": "api/Mirror.Authenticators.BasicAuthenticator.AuthRequestMessage.html",
    "title": "Struct BasicAuthenticator.AuthRequestMessage",
    "keywords": "Struct BasicAuthenticator.AuthRequestMessage Implements NetworkMessage Namespace : Mirror.Authenticators Assembly : Mirror.Authenticators.dll Syntax public struct AuthRequestMessage : NetworkMessage Fields | Improve this Doc View Source authPassword Declaration public string authPassword Field Value Type Description String | Improve this Doc View Source authUsername Declaration public string authUsername Field Value Type Description String Implements NetworkMessage"
  },
  "api/Mirror.Tests.NetworkBehaviourGetSyncVarNetworkIdentityComponent.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourGetSyncVarNetworkIdentityComponent.html",
    "title": "Class NetworkBehaviourGetSyncVarNetworkIdentityComponent",
    "keywords": "Class NetworkBehaviourGetSyncVarNetworkIdentityComponent Inheritance Object NetworkBehaviour NetworkBehaviourGetSyncVarNetworkIdentityComponent Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourGetSyncVarNetworkIdentityComponent : NetworkBehaviour Fields | Improve this Doc View Source test Declaration public NetworkIdentity test Field Value Type Description NetworkIdentity | Improve this Doc View Source testNetId Declaration public uint testNetId Field Value Type Description UInt32 Methods | Improve this Doc View Source GetSyncVarNetworkIdentityExposed() Declaration public NetworkIdentity GetSyncVarNetworkIdentityExposed() Returns Type Description NetworkIdentity"
  },
  "api/Mirror.Cloud.ListServerService.KeyValue.html": {
    "href": "api/Mirror.Cloud.ListServerService.KeyValue.html",
    "title": "Struct KeyValue",
    "keywords": "Struct KeyValue Namespace : Mirror.Cloud.ListServerService Assembly : Mirror.Cloud.dll Syntax public struct KeyValue Constructors | Improve this Doc View Source KeyValue(String, String) Declaration public KeyValue(string key, string value) Parameters Type Name Description String key String value Fields | Improve this Doc View Source key Declaration public string key Field Value Type Description String | Improve this Doc View Source value Declaration public string value Field Value Type Description String Methods | Improve this Doc View Source Validate() Declaration public void Validate()"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_Vector3_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_Vector3_Test.html",
    "title": "Class ArraySegment_Vector3_Test",
    "keywords": "Class ArraySegment_Vector3_Test Inheritance Object ArraySegment_Vector3_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class ArraySegment_Vector3_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.UpdateVarsMessage.html": {
    "href": "api/Mirror.UpdateVarsMessage.html",
    "title": "Struct UpdateVarsMessage",
    "keywords": "Struct UpdateVarsMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct UpdateVarsMessage : NetworkMessage Fields | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32 | Improve this Doc View Source payload Declaration public ArraySegment<byte> payload Field Value Type Description ArraySegment < Byte > Implements NetworkMessage"
  },
  "api/Mirror.Tests.NetworkBehaviourSendCommandInternalComponent.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourSendCommandInternalComponent.html",
    "title": "Class NetworkBehaviourSendCommandInternalComponent",
    "keywords": "Class NetworkBehaviourSendCommandInternalComponent Inheritance Object NetworkBehaviour NetworkBehaviourSendCommandInternalComponent Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourSendCommandInternalComponent : NetworkBehaviour Fields | Improve this Doc View Source called Declaration public int called Field Value Type Description Int32 Methods | Improve this Doc View Source CallSendCommandInternal() Declaration public void CallSendCommandInternal() | Improve this Doc View Source CommandGenerated(NetworkBehaviour, NetworkReader, NetworkConnection) Declaration public static void CommandGenerated(NetworkBehaviour comp, NetworkReader reader, NetworkConnection senderConnection) Parameters Type Name Description NetworkBehaviour comp NetworkReader reader NetworkConnection senderConnection"
  },
  "api/Mirror.Cloud.ICoroutineRunner.html": {
    "href": "api/Mirror.Cloud.ICoroutineRunner.html",
    "title": "Interface ICoroutineRunner",
    "keywords": "Interface ICoroutineRunner Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public interface ICoroutineRunner : IUnityEqualCheck Methods | Improve this Doc View Source StartCoroutine(IEnumerator) Declaration Coroutine StartCoroutine(IEnumerator routine) Parameters Type Name Description IEnumerator routine Returns Type Description Coroutine | Improve this Doc View Source StopCoroutine(Coroutine) Declaration void StopCoroutine(Coroutine routine) Parameters Type Name Description Coroutine routine | Improve this Doc View Source StopCoroutine(IEnumerator) Declaration void StopCoroutine(IEnumerator routine) Parameters Type Name Description IEnumerator routine Extension Methods UnityEqualCheckExtension.IsNull(IUnityEqualCheck) UnityEqualCheckExtension.IsNotNull(IUnityEqualCheck)"
  },
  "api/Mirror.Weaver.SyncObjectInitializer.html": {
    "href": "api/Mirror.Weaver.SyncObjectInitializer.html",
    "title": "Class SyncObjectInitializer",
    "keywords": "Class SyncObjectInitializer Inheritance Object SyncObjectInitializer Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class SyncObjectInitializer : object Methods | Improve this Doc View Source GenerateSyncObjectInitializer(ILProcessor, FieldDefinition) Declaration public static void GenerateSyncObjectInitializer(ILProcessor worker, FieldDefinition fd) Parameters Type Name Description ILProcessor worker FieldDefinition fd | Improve this Doc View Source ImplementsSyncObject(TypeReference) Declaration public static bool ImplementsSyncObject(TypeReference typeRef) Parameters Type Name Description TypeReference typeRef Returns Type Description Boolean"
  },
  "api/Mirror.Tests.Generators.CollectionWriterGenerator.html": {
    "href": "api/Mirror.Tests.Generators.CollectionWriterGenerator.html",
    "title": "Class CollectionWriterGenerator",
    "keywords": "Class CollectionWriterGenerator Inheritance Object GeneratorBase CollectionWriterGenerator Inherited Members GeneratorBase.BaseNameSpace GeneratorBase.Save(String, String, Boolean) GeneratorBase.Merge(IEnumerable<String>, String) Namespace : Mirror.Tests.Generators Assembly : Mirror.Tests.dll Syntax public class CollectionWriterGenerator : GeneratorBase Methods | Improve this Doc View Source GenerateTestFiles() Declaration public static void GenerateTestFiles()"
  },
  "api/Mirror.ObjectSpawnFinishedMessage.html": {
    "href": "api/Mirror.ObjectSpawnFinishedMessage.html",
    "title": "Struct ObjectSpawnFinishedMessage",
    "keywords": "Struct ObjectSpawnFinishedMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct ObjectSpawnFinishedMessage : NetworkMessage Implements NetworkMessage"
  },
  "api/Mirror.Tests.RemoteAttrributeTest.RemoteTestBase.html": {
    "href": "api/Mirror.Tests.RemoteAttrributeTest.RemoteTestBase.html",
    "title": "Class RemoteTestBase",
    "keywords": "Class RemoteTestBase Inheritance Object RemoteTestBase FieldsInBaseClasses ClientRpcOverrideTest ClientRpcTest CommandOverrideTest CommandTest TargetRpcOverrideTest TargetRpcTest Namespace : Mirror.Tests.RemoteAttrributeTest Assembly : Mirror.Tests.dll Syntax public class RemoteTestBase : object Fields | Improve this Doc View Source spawned Declaration protected List<GameObject> spawned Field Value Type Description List < GameObject > Methods | Improve this Doc View Source CreateHostObject<T>(Boolean) Declaration protected T CreateHostObject<T>(bool spawnWithAuthority) where T : NetworkBehaviour Parameters Type Name Description Boolean spawnWithAuthority Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ProcessMessages() Declaration protected static void ProcessMessages() | Improve this Doc View Source Setup() Declaration public void Setup() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.NetworkClient.html": {
    "href": "api/Mirror.NetworkClient.html",
    "title": "Class NetworkClient",
    "keywords": "Class NetworkClient This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. The NetworkClient handle connection state, messages handlers, and connection configuration. There can be many NetworkClient instances in a process at a time, but only one that is connected to a game server ( NetworkServer ) that uses spawned objects. NetworkClient has an internal update function where it handles events from the transport layer. This includes asynchronous connect events, disconnect events and incoming data from a server. The NetworkManager has a NetworkClient instance that it uses for games that it starts, but the NetworkClient may be used by itself. Inheritance Object NetworkClient Namespace : Mirror Assembly : Mirror.dll Syntax public static class NetworkClient : object Properties | Improve this Doc View Source active active is true while a client is connecting/connected (= while the network is active) Declaration public static bool active { get; } Property Value Type Description Boolean | Improve this Doc View Source connection The NetworkConnection object this client is using. Declaration public static NetworkConnection connection { get; } Property Value Type Description NetworkConnection | Improve this Doc View Source isConnected This gives the current connection status of the client. Declaration public static bool isConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source isLocalClient NetworkClient can connect to local server in host mode too Declaration public static bool isLocalClient { get; } Property Value Type Description Boolean | Improve this Doc View Source serverIp The IP address of the server that this client is connected to. This will be empty if the client has not connected yet. Declaration public static string serverIp { get; } Property Value Type Description String Methods | Improve this Doc View Source Connect(String) Connect client to a NetworkServer instance. Declaration public static void Connect(string address) Parameters Type Name Description String address | Improve this Doc View Source Connect(Uri) Connect client to a NetworkServer instance. Declaration public static void Connect(Uri uri) Parameters Type Name Description Uri uri Address of the server to connect to | Improve this Doc View Source ConnectHost() Declaration public static void ConnectHost() | Improve this Doc View Source ConnectLocalServer() connect host mode Declaration public static void ConnectLocalServer() | Improve this Doc View Source Disconnect() Disconnect from server. The disconnect message will be invoked. Declaration public static void Disconnect() | Improve this Doc View Source DisconnectLocalServer() disconnect host mode. this is needed to call DisconnectMessage for the host client too. Declaration public static void DisconnectLocalServer() | Improve this Doc View Source RegisterHandler<T>(Action<T>, Boolean) Register a handler for a particular message type. There are several system message types which you can add handlers for. You can also add your own message types. Declaration public static void RegisterHandler<T>(Action<T> handler, bool requireAuthentication = true) where T : struct, NetworkMessage Parameters Type Name Description Action <T> handler Function handler which will be invoked when this message type is received. Boolean requireAuthentication True if the message requires an authenticated connection Type Parameters Name Description T Message type | Improve this Doc View Source RegisterHandler<T>(Action<NetworkConnection, T>, Boolean) Register a handler for a particular message type. There are several system message types which you can add handlers for. You can also add your own message types. Declaration public static void RegisterHandler<T>(Action<NetworkConnection, T> handler, bool requireAuthentication = true) where T : struct, NetworkMessage Parameters Type Name Description Action < NetworkConnection , T> handler Function handler which will be invoked when this message type is received. Boolean requireAuthentication True if the message requires an authenticated connection Type Parameters Name Description T Message type | Improve this Doc View Source ReplaceHandler<T>(Action<T>, Boolean) Replaces a handler for a particular message type. See also RegisterHandler<T>(Action<NetworkConnection, T>, Boolean) Declaration public static void ReplaceHandler<T>(Action<T> handler, bool requireAuthentication = true) where T : struct, NetworkMessage Parameters Type Name Description Action <T> handler Function handler which will be invoked when this message type is received. Boolean requireAuthentication True if the message requires an authenticated connection Type Parameters Name Description T Message type | Improve this Doc View Source ReplaceHandler<T>(Action<NetworkConnection, T>, Boolean) Replaces a handler for a particular message type. See also RegisterHandler<T>(Action<NetworkConnection, T>, Boolean) Declaration public static void ReplaceHandler<T>(Action<NetworkConnection, T> handler, bool requireAuthentication = true) where T : struct, NetworkMessage Parameters Type Name Description Action < NetworkConnection , T> handler Function handler which will be invoked when this message type is received. Boolean requireAuthentication True if the message requires an authenticated connection Type Parameters Name Description T Message type | Improve this Doc View Source Send<T>(T, Int32) This sends a network message with a message Id to the server. This message is sent on channel zero, which by default is the reliable channel. The message must be an instance of a class derived from MessageBase. The message id passed to Send() is used to identify the handler function to invoke on the server when the message is received. Declaration public static void Send<T>(T message, int channelId = null) where T : struct, NetworkMessage Parameters Type Name Description T message Int32 channelId Type Parameters Name Description T The message type to unregister. | Improve this Doc View Source Shutdown() Shut down a client. This should be done when a client is no longer going to be used. Declaration public static void Shutdown() | Improve this Doc View Source UnregisterHandler<T>() Unregisters a network message handler. Declaration public static bool UnregisterHandler<T>() where T : struct, NetworkMessage Returns Type Description Boolean Type Parameters Name Description T The message type to unregister. | Improve this Doc View Source Update() Declaration public static void Update()"
  },
  "api/Mirror.Tests.MemoryTransport.EventType.html": {
    "href": "api/Mirror.Tests.MemoryTransport.EventType.html",
    "title": "Enum MemoryTransport.EventType",
    "keywords": "Enum MemoryTransport.EventType Namespace : Mirror.Tests Assembly : Mirror.Tests.Common.dll Syntax public enum EventType : int Fields Name Description Connected Data Disconnected"
  },
  "api/Mirror.SimpleWeb.ReadHelperException.html": {
    "href": "api/Mirror.SimpleWeb.ReadHelperException.html",
    "title": "Class ReadHelperException",
    "keywords": "Class ReadHelperException Inheritance Object ReadHelperException Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public class ReadHelperException : Exception Constructors | Improve this Doc View Source ReadHelperException(SerializationInfo, StreamingContext) Declaration protected ReadHelperException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context | Improve this Doc View Source ReadHelperException(String) Declaration public ReadHelperException(string message) Parameters Type Name Description String message"
  },
  "api/Mirror.Tests.SyncDictionaryTest.SyncDictionaryIntString.html": {
    "href": "api/Mirror.Tests.SyncDictionaryTest.SyncDictionaryIntString.html",
    "title": "Class SyncDictionaryTest.SyncDictionaryIntString",
    "keywords": "Class SyncDictionaryTest.SyncDictionaryIntString Inheritance Object SyncIDictionary < Int32 , String > SyncDictionary < Int32 , String > SyncDictionaryTest.SyncDictionaryIntString Implements SyncObject IReadOnlyDictionary < Int32 , String > Inherited Members SyncDictionary<Int32, String>.Values SyncDictionary<Int32, String>.Keys SyncDictionary<Int32, String>.GetEnumerator() SyncIDictionary<Int32, String>.objects SyncIDictionary<Int32, String>.Count SyncIDictionary<Int32, String>.IsReadOnly SyncIDictionary<Int32, String>.Callback SyncIDictionary<Int32, String>.Reset() SyncIDictionary<Int32, String>.IsDirty SyncIDictionary<Int32, String>.Flush() SyncIDictionary<Int32, String>.OnSerializeAll(NetworkWriter) SyncIDictionary<Int32, String>.OnSerializeDelta(NetworkWriter) SyncIDictionary<Int32, String>.OnDeserializeAll(NetworkReader) SyncIDictionary<Int32, String>.OnDeserializeDelta(NetworkReader) SyncIDictionary<Int32, String>.Clear() SyncIDictionary<Int32, String>.ContainsKey(Int32) SyncIDictionary<Int32, String>.Remove(Int32) SyncIDictionary<Int32, String>.Item[Int32] SyncIDictionary<Int32, String>.TryGetValue(Int32, String) SyncIDictionary<Int32, String>.Add(Int32, String) SyncIDictionary<Int32, String>.Add(KeyValuePair<, >) SyncIDictionary<Int32, String>.Contains(KeyValuePair<, >) SyncIDictionary<Int32, String>.CopyTo(KeyValuePair<, >[], Int32) SyncIDictionary<Int32, String>.Remove(KeyValuePair<, >) Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class SyncDictionaryIntString : SyncDictionary<int, string>, SyncObject, IReadOnlyDictionary<int, string> Implements SyncObject IReadOnlyDictionary<, >"
  },
  "api/Mirror.Tests.MessageTests.RequestMessageBase.html": {
    "href": "api/Mirror.Tests.MessageTests.RequestMessageBase.html",
    "title": "Class RequestMessageBase",
    "keywords": "Class RequestMessageBase Inheritance Object RequestMessageBase ResponseMessage Implements NetworkMessage Namespace : Mirror.Tests.MessageTests Assembly : Mirror.Tests.dll Syntax public abstract class RequestMessageBase : object, NetworkMessage Fields | Improve this Doc View Source responseId Declaration public int responseId Field Value Type Description Int32 Implements NetworkMessage"
  },
  "api/Mirror.Tests.BasicAuthenticatorTest.html": {
    "href": "api/Mirror.Tests.BasicAuthenticatorTest.html",
    "title": "Class BasicAuthenticatorTest",
    "keywords": "Class BasicAuthenticatorTest Inheritance Object BasicAuthenticatorTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class BasicAuthenticatorTest : object Methods | Improve this Doc View Source AuthRequestMessageTest() Declaration public void AuthRequestMessageTest() | Improve this Doc View Source AuthResponseMessageTest() Declaration public void AuthResponseMessageTest()"
  },
  "api/Mirror.Tests.ClientSceneTests.BehaviourWithEvents.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.BehaviourWithEvents.html",
    "title": "Class BehaviourWithEvents",
    "keywords": "Class BehaviourWithEvents Inheritance Object NetworkBehaviour BehaviourWithEvents Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests.ClientSceneTests Assembly : Mirror.Tests.dll Syntax public class BehaviourWithEvents : NetworkBehaviour Methods | Improve this Doc View Source OnStartAuthority() Declaration public override void OnStartAuthority() Overrides NetworkBehaviour.OnStartAuthority() | Improve this Doc View Source OnStartClient() Declaration public override void OnStartClient() Overrides NetworkBehaviour.OnStartClient() | Improve this Doc View Source OnStartLocalPlayer() Declaration public override void OnStartLocalPlayer() Overrides NetworkBehaviour.OnStartLocalPlayer() Events | Improve this Doc View Source OnStartAuthorityCalled Declaration public event Action OnStartAuthorityCalled Event Type Type Description Action | Improve this Doc View Source OnStartClientCalled Declaration public event Action OnStartClientCalled Event Type Type Description Action | Improve this Doc View Source OnStartLocalPlayerCalled Declaration public event Action OnStartLocalPlayerCalled Event Type Type Description Action"
  },
  "api/Mirror.Tests.MessageTests.ResponseMessage.html": {
    "href": "api/Mirror.Tests.MessageTests.ResponseMessage.html",
    "title": "Class ResponseMessage",
    "keywords": "Class ResponseMessage Inheritance Object RequestMessageBase ResponseMessage Implements NetworkMessage Inherited Members RequestMessageBase.responseId Namespace : Mirror.Tests.MessageTests Assembly : Mirror.Tests.dll Syntax public class ResponseMessage : RequestMessageBase, NetworkMessage Fields | Improve this Doc View Source errorCode Declaration public int errorCode Field Value Type Description Int32 | Improve this Doc View Source message Declaration public string message Field Value Type Description String | Improve this Doc View Source state Declaration public int state Field Value Type Description Int32 Implements NetworkMessage"
  },
  "api/Mirror.NetworkBehaviour.html": {
    "href": "api/Mirror.NetworkBehaviour.html",
    "title": "Class NetworkBehaviour",
    "keywords": "Class NetworkBehaviour Base class which should be inherited by scripts which contain networking functionality. Inheritance Object NetworkBehaviour Ball BallManager Player PlayerController RandomColor ShootingTankBehaviour Player MonsterMovement PlayerMovement Player PhysicsCollision PlayerController PlayerScore RandomColor Reward PlayerController PlayerScore RandomColor Reward Ball Player AddForce Projectile Tank NetworkLerpRigidbody NetworkRigidbody NetworkRigidbody2D NetworkTransformBase NetworkAnimator NetworkRoomPlayer NetworkTransformBase NetworkVisibility BehaviourWithEvents PayloadTestBehaviour CommandTestNetworkBehaviour AttributeBehaviour_NetworkBehaviour DataSenderBehaviour NetworkBehaviourDelegateComponent NetworkBehaviourGetSyncVarGameObjectComponent NetworkBehaviourGetSyncVarNetworkIdentityComponent NetworkBehaviourHookGuardTester NetworkBehaviourInitSyncObjectExposed NetworkBehaviourInitSyncObjectTester NetworkBehaviourSendCommandInternalComponent NetworkBehaviourSendRPCInternalComponent NetworkBehaviourSendTargetRPCInternalComponent NetworkBehaviourSetSyncVarGameObjectComponent NetworkBehaviourSetSyncVarNetworkIdentityComponent OnNetworkDestroyComponent OnNetworkDestroyTestNetworkBehaviour OnStartClientComponent OnStartClientTestNetworkBehaviour OnStartLocalPlayerComponent Health RpcTestNetworkBehaviour Namespace : Mirror Assembly : Mirror.dll Syntax public abstract class NetworkBehaviour : MonoBehaviour Remarks This is a MonoBehaviour class so scripts which need to use the networking feature should inherit this class instead of MonoBehaviour. It allows you to invoke networked actions, receive various callbacks, and automatically synchronize state from server-to-client. The NetworkBehaviour component requires a NetworkIdentity on the game object. There can be multiple NetworkBehaviours on a single game object. For an object with sub-components in a hierarchy, the NetworkIdentity must be on the root object, and NetworkBehaviour scripts must also be on the root object. Some of the built-in components of the networking system are derived from NetworkBehaviour, including NetworkTransport, NetworkAnimator and NetworkProximityChecker. Fields | Improve this Doc View Source syncInterval sync interval for OnSerialize (in seconds) Declaration public float syncInterval Field Value Type Description Single | Improve this Doc View Source syncMode sync mode for OnSerialize Declaration public SyncMode syncMode Field Value Type Description SyncMode | Improve this Doc View Source syncObjects objects that can synchronize themselves, such as synclists Declaration protected readonly List<SyncObject> syncObjects Field Value Type Description List < SyncObject > Properties | Improve this Doc View Source ComponentIndex Returns the index of the component on this object Declaration public int ComponentIndex { get; } Property Value Type Description Int32 | Improve this Doc View Source connectionToClient The NetworkConnection associated with this NetworkIdentity This is only valid for player objects on the server. Declaration public NetworkConnection connectionToClient { get; } Property Value Type Description NetworkConnection | Improve this Doc View Source connectionToServer The NetworkConnection associated with this NetworkIdentity This is only valid for player objects on the client. Declaration public NetworkConnection connectionToServer { get; } Property Value Type Description NetworkConnection | Improve this Doc View Source hasAuthority This returns true if this object is the authoritative version of the object in the distributed network application. The hasAuthority value on the NetworkIdentity determines how authority is determined. For most objects, authority is held by the server. For objects with hasAuthority set, authority is held by the client of that player. Declaration public bool hasAuthority { get; } Property Value Type Description Boolean | Improve this Doc View Source isClient Returns true if running as a client and this object was spawned by a server. Declaration public bool isClient { get; } Property Value Type Description Boolean | Improve this Doc View Source isClientOnly True if this object exists on a client that is not also acting as a server Declaration public bool isClientOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source isLocalPlayer This returns true if this object is the one that represents the player on the local machine. In multiplayer games, there are multiple instances of the Player object. The client needs to know which one is for \"themselves\" so that only that player processes input and potentially has a camera attached. The IsLocalPlayer function will return true only for the player instance that belongs to the player on the local machine, so it can be used to filter out input for non-local players. Declaration public bool isLocalPlayer { get; } Property Value Type Description Boolean | Improve this Doc View Source isServer Returns true if this object is active on an active server. This is only true if the object has been spawned. This is different from NetworkServer.active, which is true if the server itself is active rather than this object being active. Declaration public bool isServer { get; } Property Value Type Description Boolean | Improve this Doc View Source isServerOnly True if this object only exists on the server Declaration public bool isServerOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source netId The unique network Id of this object. This is assigned at runtime by the network server and will be unique for all objects for that network session. Declaration public uint netId { get; } Property Value Type Description UInt32 | Improve this Doc View Source netIdentity Returns the NetworkIdentity of this object Declaration public NetworkIdentity netIdentity { get; } Property Value Type Description NetworkIdentity | Improve this Doc View Source syncVarDirtyBits Declaration protected ulong syncVarDirtyBits { get; } Property Value Type Description UInt64 Methods | Improve this Doc View Source ClearAllDirtyBits() This clears all the dirty bits that were set on this script by SetDirtyBits(); This is automatically invoked when an update is sent for this object, but can be called manually as well. Declaration public void ClearAllDirtyBits() | Improve this Doc View Source DeserializeSyncVars(NetworkReader, Boolean) Declaration protected virtual void DeserializeSyncVars(NetworkReader reader, bool initialState) Parameters Type Name Description NetworkReader reader Boolean initialState | Improve this Doc View Source GetSyncVarGameObject(UInt32, ref GameObject) Declaration protected GameObject GetSyncVarGameObject(uint netId, ref GameObject gameObjectField) Parameters Type Name Description UInt32 netId GameObject gameObjectField Returns Type Description GameObject | Improve this Doc View Source getSyncVarHookGuard(UInt64) Declaration protected bool getSyncVarHookGuard(ulong dirtyBit) Parameters Type Name Description UInt64 dirtyBit Returns Type Description Boolean | Improve this Doc View Source GetSyncVarNetworkIdentity(UInt32, ref NetworkIdentity) Declaration protected NetworkIdentity GetSyncVarNetworkIdentity(uint netId, ref NetworkIdentity identityField) Parameters Type Name Description UInt32 netId NetworkIdentity identityField Returns Type Description NetworkIdentity | Improve this Doc View Source InitSyncObject(SyncObject) Declaration protected void InitSyncObject(SyncObject syncObject) Parameters Type Name Description SyncObject syncObject | Improve this Doc View Source IsDirty() Declaration public bool IsDirty() Returns Type Description Boolean | Improve this Doc View Source OnDeserialize(NetworkReader, Boolean) Virtual function to override to receive custom serialization data. The corresponding function to send serialization data is OnSerialize(). Declaration public virtual void OnDeserialize(NetworkReader reader, bool initialState) Parameters Type Name Description NetworkReader reader Reader to read from the stream. Boolean initialState True if being sent initial state. | Improve this Doc View Source OnSerialize(NetworkWriter, Boolean) Virtual function to override to send custom serialization data. The corresponding function to send serialization data is OnDeserialize(). Declaration public virtual bool OnSerialize(NetworkWriter writer, bool initialState) Parameters Type Name Description NetworkWriter writer Writer to use to write to the stream. Boolean initialState If this is being called to send initial state. Returns Type Description Boolean True if data was written. Remarks The initialState flag is useful to differentiate between the first time an object is serialized and when incremental updates can be sent. The first time an object is sent to a client, it must include a full state snapshot, but subsequent updates can save on bandwidth by including only incremental changes. Note that SyncVar hook functions are not called when initialState is true, only for incremental updates. If a class has SyncVars, then an implementation of this function and OnDeserialize() are added automatically to the class. So a class that has SyncVars cannot also have custom serialization functions. The OnSerialize function should return true to indicate that an update should be sent. If it returns true, then the dirty bits for that script are set to zero, if it returns false then the dirty bits are not changed. This allows multiple changes to a script to be accumulated over time and sent when the system is ready, instead of every frame. | Improve this Doc View Source OnStartAuthority() This is invoked on behaviours that have authority, based on context and hasAuthority . This is called after OnStartServer() and before OnStartClient() When AssignClientAuthority(NetworkConnection) is called on the server, this will be called on the client that owns the object. When an object is spawned with Spawn(GameObject, NetworkConnection) with a NetworkConnection parameter included, this will be called on the client that owns the object. Declaration public virtual void OnStartAuthority() | Improve this Doc View Source OnStartClient() Called on every NetworkBehaviour when it is activated on a client. Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client. Declaration public virtual void OnStartClient() | Improve this Doc View Source OnStartLocalPlayer() Called when the local player object has been set up. This happens after OnStartClient(), as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input. Declaration public virtual void OnStartLocalPlayer() | Improve this Doc View Source OnStartServer() This is invoked for NetworkBehaviour objects when they become active on the server. This could be triggered by NetworkServer.Listen() for objects in the scene, or by NetworkServer.Spawn() for objects that are dynamically created. This will be called for objects on a \"host\" as well as for object on a dedicated server. Declaration public virtual void OnStartServer() | Improve this Doc View Source OnStopAuthority() This is invoked on behaviours when authority is removed. When NetworkIdentity.RemoveClientAuthority is called on the server, this will be called on the client that owns the object. Declaration public virtual void OnStopAuthority() | Improve this Doc View Source OnStopClient() This is invoked on clients when the server has caused this object to be destroyed. This can be used as a hook to invoke effects or do client specific cleanup. Declaration public virtual void OnStopClient() | Improve this Doc View Source OnStopServer() Invoked on the server when the object is unspawned Useful for saving object data in persistant storage Declaration public virtual void OnStopServer() | Improve this Doc View Source SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) Declaration protected void SendCommandInternal(Type invokeClass, string cmdName, NetworkWriter writer, int channelId, bool ignoreAuthority = false) Parameters Type Name Description Type invokeClass String cmdName NetworkWriter writer Int32 channelId Boolean ignoreAuthority | Improve this Doc View Source SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) Declaration protected void SendRPCInternal(Type invokeClass, string rpcName, NetworkWriter writer, int channelId, bool excludeOwner) Parameters Type Name Description Type invokeClass String rpcName NetworkWriter writer Int32 channelId Boolean excludeOwner | Improve this Doc View Source SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) Declaration protected void SendTargetRPCInternal(NetworkConnection conn, Type invokeClass, string rpcName, NetworkWriter writer, int channelId) Parameters Type Name Description NetworkConnection conn Type invokeClass String rpcName NetworkWriter writer Int32 channelId | Improve this Doc View Source SerializeObjectsAll(NetworkWriter) Declaration public bool SerializeObjectsAll(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer Returns Type Description Boolean | Improve this Doc View Source SerializeObjectsDelta(NetworkWriter) Declaration public bool SerializeObjectsDelta(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer Returns Type Description Boolean | Improve this Doc View Source SerializeSyncVars(NetworkWriter, Boolean) Declaration protected virtual bool SerializeSyncVars(NetworkWriter writer, bool initialState) Parameters Type Name Description NetworkWriter writer Boolean initialState Returns Type Description Boolean | Improve this Doc View Source SetDirtyBit(UInt64) Used to set the behaviour as dirty, so that a network update will be sent for the object. these are masks, not bit numbers, ie. 0x004 not 2 Declaration public void SetDirtyBit(ulong dirtyBit) Parameters Type Name Description UInt64 dirtyBit Bit mask to set. | Improve this Doc View Source SetSyncVar<T>(T, ref T, UInt64) Declaration protected void SetSyncVar<T>(T value, ref T fieldValue, ulong dirtyBit) Parameters Type Name Description T value T fieldValue UInt64 dirtyBit Type Parameters Name Description T | Improve this Doc View Source SetSyncVarGameObject(GameObject, ref GameObject, UInt64, ref UInt32) Declaration protected void SetSyncVarGameObject(GameObject newGameObject, ref GameObject gameObjectField, ulong dirtyBit, ref uint netIdField) Parameters Type Name Description GameObject newGameObject GameObject gameObjectField UInt64 dirtyBit UInt32 netIdField | Improve this Doc View Source setSyncVarHookGuard(UInt64, Boolean) Declaration protected void setSyncVarHookGuard(ulong dirtyBit, bool value) Parameters Type Name Description UInt64 dirtyBit Boolean value | Improve this Doc View Source SetSyncVarNetworkIdentity(NetworkIdentity, ref NetworkIdentity, UInt64, ref UInt32) Declaration protected void SetSyncVarNetworkIdentity(NetworkIdentity newIdentity, ref NetworkIdentity identityField, ulong dirtyBit, ref uint netIdField) Parameters Type Name Description NetworkIdentity newIdentity NetworkIdentity identityField UInt64 dirtyBit UInt32 netIdField | Improve this Doc View Source SyncVarEqual<T>(T, ref T) Declaration protected bool SyncVarEqual<T>(T value, ref T fieldValue) Parameters Type Name Description T value T fieldValue Returns Type Description Boolean Type Parameters Name Description T | Improve this Doc View Source SyncVarGameObjectEqual(GameObject, UInt32) Declaration protected bool SyncVarGameObjectEqual(GameObject newGameObject, uint netIdField) Parameters Type Name Description GameObject newGameObject UInt32 netIdField Returns Type Description Boolean | Improve this Doc View Source SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) Declaration protected bool SyncVarNetworkIdentityEqual(NetworkIdentity newIdentity, uint netIdField) Parameters Type Name Description NetworkIdentity newIdentity UInt32 netIdField Returns Type Description Boolean"
  },
  "api/Mirror.Weaver.Tests.WeaverClientRpcTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverClientRpcTests.html",
    "title": "Class WeaverClientRpcTests",
    "keywords": "Class WeaverClientRpcTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverClientRpcTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverClientRpcTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source AbstractClientRpc() Declaration public void AbstractClientRpc() | Improve this Doc View Source ClientRpcCantBeStatic() Declaration public void ClientRpcCantBeStatic() | Improve this Doc View Source ClientRpcThatExcludesOwner() Declaration public void ClientRpcThatExcludesOwner() | Improve this Doc View Source ClientRpcValid() Declaration public void ClientRpcValid() | Improve this Doc View Source OverrideAbstractClientRpc() Declaration public void OverrideAbstractClientRpc() | Improve this Doc View Source OverrideVirtualClientRpc() Declaration public void OverrideVirtualClientRpc() | Improve this Doc View Source VirtualClientRpc() Declaration public void VirtualClientRpc()"
  },
  "api/Mirror.Experimental.NetworkLerpRigidbody.html": {
    "href": "api/Mirror.Experimental.NetworkLerpRigidbody.html",
    "title": "Class NetworkLerpRigidbody",
    "keywords": "Class NetworkLerpRigidbody Inheritance Object NetworkBehaviour NetworkLerpRigidbody Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Experimental Assembly : Mirror.Components.dll Syntax public class NetworkLerpRigidbody : NetworkBehaviour"
  },
  "api/Mirror.Tests.BasicAuthenticatorTest.AuthRequestMessage.html": {
    "href": "api/Mirror.Tests.BasicAuthenticatorTest.AuthRequestMessage.html",
    "title": "Struct BasicAuthenticatorTest.AuthRequestMessage",
    "keywords": "Struct BasicAuthenticatorTest.AuthRequestMessage Implements NetworkMessage Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public struct AuthRequestMessage : NetworkMessage Fields | Improve this Doc View Source authPassword Declaration public string authPassword Field Value Type Description String | Improve this Doc View Source authUsername Declaration public string authUsername Field Value Type Description String Implements NetworkMessage"
  },
  "api/Mirror.Channels.html": {
    "href": "api/Mirror.Channels.html",
    "title": "Class Channels",
    "keywords": "Class Channels Inheritance Object Channels Namespace : Mirror Assembly : Mirror.dll Syntax public static class Channels : object Fields | Improve this Doc View Source DefaultReliable Declaration public const int DefaultReliable = null Field Value Type Description Int32 | Improve this Doc View Source DefaultUnreliable Declaration public const int DefaultUnreliable = null Field Value Type Description Int32"
  },
  "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_GetPrefab.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_GetPrefab.html",
    "title": "Class ClientSceneTests_GetPrefab",
    "keywords": "Class ClientSceneTests_GetPrefab Inheritance Object ClientSceneTestsBase ClientSceneTests_GetPrefab Inherited Members ClientSceneTestsBase.ValidPrefabAssetGuid ClientSceneTestsBase.PrefabWithChildrenAssetGuid ClientSceneTestsBase.InvalidPrefabAssetGuid ClientSceneTestsBase.AnotherGuidString ClientSceneTestsBase.validPrefab ClientSceneTestsBase.validPrefabNetworkIdentity ClientSceneTestsBase.prefabWithChildren ClientSceneTestsBase.invalidPrefab ClientSceneTestsBase.validPrefabGuid ClientSceneTestsBase.anotherGuid ClientSceneTestsBase._createdObjects ClientSceneTestsBase.prefabs ClientSceneTestsBase.spawnHandlers ClientSceneTestsBase.unspawnHandlers ClientSceneTestsBase.spawnableObjects ClientSceneTestsBase.OneTimeSetUp() ClientSceneTestsBase.TearDown() ClientSceneTestsBase.OneTimeTearDown() Namespace : Mirror.Tests.ClientSceneTests Assembly : Mirror.Tests.dll Syntax public class ClientSceneTests_GetPrefab : ClientSceneTestsBase Methods | Improve this Doc View Source HasOutPrefabWithCorrectGuid() Declaration public void HasOutPrefabWithCorrectGuid() | Improve this Doc View Source ReturnsFalseForEmptyGuid() Declaration public void ReturnsFalseForEmptyGuid() | Improve this Doc View Source ReturnsFalseForPrefabIsNull() Declaration public void ReturnsFalseForPrefabIsNull() | Improve this Doc View Source ReturnsFalseForPrefabNotFound() Declaration public void ReturnsFalseForPrefabNotFound() | Improve this Doc View Source ReturnsTrueWhenPrefabIsFound() Declaration public void ReturnsTrueWhenPrefabIsFound()"
  },
  "api/Mirror.Tests.OnStartClientComponent.html": {
    "href": "api/Mirror.Tests.OnStartClientComponent.html",
    "title": "Class OnStartClientComponent",
    "keywords": "Class OnStartClientComponent Inheritance Object NetworkBehaviour OnStartClientComponent Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class OnStartClientComponent : NetworkBehaviour Fields | Improve this Doc View Source called Declaration public int called Field Value Type Description Int32 Methods | Improve this Doc View Source OnStartClient() Declaration public override void OnStartClient() Overrides NetworkBehaviour.OnStartClient()"
  },
  "api/Mirror.Weaver.Tests.Extra.ReadWrite.html": {
    "href": "api/Mirror.Weaver.Tests.Extra.ReadWrite.html",
    "title": "Class ReadWrite",
    "keywords": "Class ReadWrite Inheritance Object ReadWrite Namespace : Mirror.Weaver.Tests.Extra Assembly : WeaverTestExtraAssembly.dll Syntax public static class ReadWrite : object Methods | Improve this Doc View Source ReadSomeData(NetworkReader) Declaration public static SomeDataWithWriter ReadSomeData(this NetworkReader reader) Parameters Type Name Description NetworkReader reader Returns Type Description SomeDataWithWriter | Improve this Doc View Source WriteSomeData(NetworkWriter, SomeDataWithWriter) Declaration public static void WriteSomeData(this NetworkWriter writer, SomeDataWithWriter itemData) Parameters Type Name Description NetworkWriter writer SomeDataWithWriter itemData"
  },
  "api/Mirror.SyncListDrawer.html": {
    "href": "api/Mirror.SyncListDrawer.html",
    "title": "Class SyncListDrawer",
    "keywords": "Class SyncListDrawer Inheritance Object SyncListDrawer Namespace : Mirror Assembly : Mirror.Editor.dll Syntax public class SyncListDrawer : object Constructors | Improve this Doc View Source SyncListDrawer(UnityEngine.Object) Declaration public SyncListDrawer(UnityEngine.Object targetObject) Parameters Type Name Description UnityEngine.Object targetObject Methods | Improve this Doc View Source Draw() Declaration public void Draw()"
  },
  "api/Mirror.FallbackTransport.html": {
    "href": "api/Mirror.FallbackTransport.html",
    "title": "Class FallbackTransport",
    "keywords": "Class FallbackTransport Inheritance Object Transport FallbackTransport Inherited Members Transport.activeTransport Transport.OnClientConnected Transport.OnClientDataReceived Transport.OnClientError Transport.OnClientDisconnected Transport.OnServerConnected Transport.OnServerDataReceived Transport.OnServerError Transport.OnServerDisconnected Transport.Update() Transport.OnApplicationQuit() Namespace : Mirror Assembly : Mirror.dll Syntax public class FallbackTransport : Transport Fields | Improve this Doc View Source transports Declaration public Transport[] transports Field Value Type Description Transport [] Methods | Improve this Doc View Source Available() Declaration public override bool Available() Returns Type Description Boolean Overrides Transport.Available() | Improve this Doc View Source Awake() Declaration public void Awake() | Improve this Doc View Source ClientConnect(String) Declaration public override void ClientConnect(string address) Parameters Type Name Description String address Overrides Transport.ClientConnect(String) | Improve this Doc View Source ClientConnect(Uri) Declaration public override void ClientConnect(Uri uri) Parameters Type Name Description Uri uri Overrides Transport.ClientConnect(Uri) | Improve this Doc View Source ClientConnected() Declaration public override bool ClientConnected() Returns Type Description Boolean Overrides Transport.ClientConnected() | Improve this Doc View Source ClientDisconnect() Declaration public override void ClientDisconnect() Overrides Transport.ClientDisconnect() | Improve this Doc View Source ClientSend(Int32, ArraySegment<Byte>) Declaration public override void ClientSend(int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 channelId ArraySegment < Byte > segment Overrides Transport.ClientSend(Int32, ArraySegment<Byte>) | Improve this Doc View Source GetMaxPacketSize(Int32) Declaration public override int GetMaxPacketSize(int channelId = 0) Parameters Type Name Description Int32 channelId Returns Type Description Int32 Overrides Transport.GetMaxPacketSize(Int32) | Improve this Doc View Source ServerActive() Declaration public override bool ServerActive() Returns Type Description Boolean Overrides Transport.ServerActive() | Improve this Doc View Source ServerDisconnect(Int32) Declaration public override bool ServerDisconnect(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description Boolean Overrides Transport.ServerDisconnect(Int32) | Improve this Doc View Source ServerGetClientAddress(Int32) Declaration public override string ServerGetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description String Overrides Transport.ServerGetClientAddress(Int32) | Improve this Doc View Source ServerSend(Int32, Int32, ArraySegment<Byte>) Declaration public override void ServerSend(int connectionId, int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 connectionId Int32 channelId ArraySegment < Byte > segment Overrides Transport.ServerSend(Int32, Int32, ArraySegment<Byte>) | Improve this Doc View Source ServerStart() Declaration public override void ServerStart() Overrides Transport.ServerStart() | Improve this Doc View Source ServerStop() Declaration public override void ServerStop() Overrides Transport.ServerStop() | Improve this Doc View Source ServerUri() Declaration public override Uri ServerUri() Returns Type Description Uri Overrides Transport.ServerUri() | Improve this Doc View Source Shutdown() Declaration public override void Shutdown() Overrides Transport.Shutdown() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/kcp2k.Utils.html": {
    "href": "api/kcp2k.Utils.html",
    "title": "Class Utils",
    "keywords": "Class Utils Inheritance Object Utils Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : kcp2k Assembly : kcp2k.dll Syntax public static class Utils Methods | Improve this Doc View Source Clamp(Int32, Int32, Int32) Declaration public static int Clamp(int value, int min, int max) Parameters Type Name Description Int32 value Int32 min Int32 max Returns Type Description Int32 | Improve this Doc View Source Decode16U(Byte[], Int32, ref UInt16) Declaration public static int Decode16U(byte[] p, int offset, ref ushort c) Parameters Type Name Description Byte [] p Int32 offset UInt16 c Returns Type Description Int32 | Improve this Doc View Source Decode32U(Byte[], Int32, ref UInt32) Declaration public static int Decode32U(byte[] p, int offset, ref uint c) Parameters Type Name Description Byte [] p Int32 offset UInt32 c Returns Type Description Int32 | Improve this Doc View Source Decode8u(Byte[], Int32, ref Byte) Declaration public static int Decode8u(byte[] p, int offset, ref byte c) Parameters Type Name Description Byte [] p Int32 offset Byte c Returns Type Description Int32 | Improve this Doc View Source Encode16U(Byte[], Int32, UInt16) Declaration public static int Encode16U(byte[] p, int offset, ushort w) Parameters Type Name Description Byte [] p Int32 offset UInt16 w Returns Type Description Int32 | Improve this Doc View Source Encode32U(Byte[], Int32, UInt32) Declaration public static int Encode32U(byte[] p, int offset, uint l) Parameters Type Name Description Byte [] p Int32 offset UInt32 l Returns Type Description Int32 | Improve this Doc View Source Encode8u(Byte[], Int32, Byte) Declaration public static int Encode8u(byte[] p, int offset, byte c) Parameters Type Name Description Byte [] p Int32 offset Byte c Returns Type Description Int32 | Improve this Doc View Source SegmentsEqual(ArraySegment<Byte>, ArraySegment<Byte>) Declaration public static bool SegmentsEqual(ArraySegment<byte> a, ArraySegment<byte> b) Parameters Type Name Description ArraySegment < Byte > a ArraySegment < Byte > b Returns Type Description Boolean | Improve this Doc View Source TimeDiff(UInt32, UInt32) Declaration public static int TimeDiff(uint later, uint earlier) Parameters Type Name Description UInt32 later UInt32 earlier Returns Type Description Int32"
  },
  "api/Mirror.SyncIDictionary-2.Operation.html": {
    "href": "api/Mirror.SyncIDictionary-2.Operation.html",
    "title": "Enum SyncIDictionary<TKey, TValue>.Operation",
    "keywords": "Enum SyncIDictionary<TKey, TValue>.Operation Namespace : Mirror Assembly : Mirror.dll Syntax public enum Operation : byte Fields Name Description OP_ADD OP_CLEAR OP_REMOVE OP_SET"
  },
  "api/Mirror.Tests.Performance.Health.html": {
    "href": "api/Mirror.Tests.Performance.Health.html",
    "title": "Class Health",
    "keywords": "Class Health Inheritance Object NetworkBehaviour Health Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests.Performance Assembly : Mirror.Tests.Performance.Editor.dll Syntax public class Health : NetworkBehaviour Fields | Improve this Doc View Source health Declaration public int health Field Value Type Description Int32 Methods | Improve this Doc View Source Update() Declaration public void Update()"
  },
  "api/Mirror.ClientRpcAttribute.html": {
    "href": "api/Mirror.ClientRpcAttribute.html",
    "title": "Class ClientRpcAttribute",
    "keywords": "Class ClientRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on clients. Inheritance Object ClientRpcAttribute Namespace : Mirror Assembly : Mirror.dll Syntax public class ClientRpcAttribute : Attribute Fields | Improve this Doc View Source channel Declaration public int channel Field Value Type Description Int32 | Improve this Doc View Source excludeOwner Declaration public bool excludeOwner Field Value Type Description Boolean"
  },
  "api/Mirror.TelepathyTransport.html": {
    "href": "api/Mirror.TelepathyTransport.html",
    "title": "Class TelepathyTransport",
    "keywords": "Class TelepathyTransport Inheritance Object Transport TelepathyTransport Inherited Members Transport.activeTransport Transport.OnClientConnected Transport.OnClientDataReceived Transport.OnClientError Transport.OnClientDisconnected Transport.OnServerConnected Transport.OnServerDataReceived Transport.OnServerError Transport.OnServerDisconnected Transport.Update() Transport.OnApplicationQuit() Namespace : Mirror Assembly : Mirror.dll Syntax public class TelepathyTransport : Transport Fields | Improve this Doc View Source client Declaration protected Client client Field Value Type Description Client | Improve this Doc View Source clientMaxMessageSize Declaration public int clientMaxMessageSize Field Value Type Description Int32 | Improve this Doc View Source clientMaxReceivesPerTick Declaration public int clientMaxReceivesPerTick Field Value Type Description Int32 | Improve this Doc View Source NoDelay Declaration public bool NoDelay Field Value Type Description Boolean | Improve this Doc View Source port Declaration public ushort port Field Value Type Description UInt16 | Improve this Doc View Source Scheme Declaration public const string Scheme = null Field Value Type Description String | Improve this Doc View Source server Declaration protected Server server Field Value Type Description Server | Improve this Doc View Source serverMaxMessageSize Declaration public int serverMaxMessageSize Field Value Type Description Int32 | Improve this Doc View Source serverMaxReceivesPerTick Declaration public int serverMaxReceivesPerTick Field Value Type Description Int32 Methods | Improve this Doc View Source Available() Declaration public override bool Available() Returns Type Description Boolean Overrides Transport.Available() | Improve this Doc View Source ClientConnect(String) Declaration public override void ClientConnect(string address) Parameters Type Name Description String address Overrides Transport.ClientConnect(String) | Improve this Doc View Source ClientConnect(Uri) Declaration public override void ClientConnect(Uri uri) Parameters Type Name Description Uri uri Overrides Transport.ClientConnect(Uri) | Improve this Doc View Source ClientConnected() Declaration public override bool ClientConnected() Returns Type Description Boolean Overrides Transport.ClientConnected() | Improve this Doc View Source ClientDisconnect() Declaration public override void ClientDisconnect() Overrides Transport.ClientDisconnect() | Improve this Doc View Source ClientSend(Int32, ArraySegment<Byte>) Declaration public override void ClientSend(int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 channelId ArraySegment < Byte > segment Overrides Transport.ClientSend(Int32, ArraySegment<Byte>) | Improve this Doc View Source GetMaxPacketSize(Int32) Declaration public override int GetMaxPacketSize(int channelId) Parameters Type Name Description Int32 channelId Returns Type Description Int32 Overrides Transport.GetMaxPacketSize(Int32) | Improve this Doc View Source LateUpdate() Declaration public void LateUpdate() | Improve this Doc View Source ProcessServerMessage() Declaration public bool ProcessServerMessage() Returns Type Description Boolean | Improve this Doc View Source ServerActive() Declaration public override bool ServerActive() Returns Type Description Boolean Overrides Transport.ServerActive() | Improve this Doc View Source ServerDisconnect(Int32) Declaration public override bool ServerDisconnect(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description Boolean Overrides Transport.ServerDisconnect(Int32) | Improve this Doc View Source ServerGetClientAddress(Int32) Declaration public override string ServerGetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description String Overrides Transport.ServerGetClientAddress(Int32) | Improve this Doc View Source ServerSend(Int32, Int32, ArraySegment<Byte>) Declaration public override void ServerSend(int connectionId, int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 connectionId Int32 channelId ArraySegment < Byte > segment Overrides Transport.ServerSend(Int32, Int32, ArraySegment<Byte>) | Improve this Doc View Source ServerStart() Declaration public override void ServerStart() Overrides Transport.ServerStart() | Improve this Doc View Source ServerStop() Declaration public override void ServerStop() Overrides Transport.ServerStop() | Improve this Doc View Source ServerUri() Declaration public override Uri ServerUri() Returns Type Description Uri Overrides Transport.ServerUri() | Improve this Doc View Source Shutdown() Declaration public override void Shutdown() Overrides Transport.Shutdown() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Mirror.NetworkReaderPool.html": {
    "href": "api/Mirror.NetworkReaderPool.html",
    "title": "Class NetworkReaderPool",
    "keywords": "Class NetworkReaderPool Pool of NetworkReaders Use this pool instead of NetworkReader to reduce memory allocation Inheritance Object NetworkReaderPool Namespace : Mirror Assembly : Mirror.dll Syntax public static class NetworkReaderPool : object Methods | Improve this Doc View Source GetReader(ArraySegment<Byte>) Get the next reader in the pool If pool is empty, creates a new Reader Declaration public static PooledNetworkReader GetReader(ArraySegment<byte> segment) Parameters Type Name Description ArraySegment < Byte > segment Returns Type Description PooledNetworkReader | Improve this Doc View Source GetReader(Byte[]) Get the next reader in the pool If pool is empty, creates a new Reader Declaration public static PooledNetworkReader GetReader(byte[] bytes) Parameters Type Name Description Byte [] bytes Returns Type Description PooledNetworkReader | Improve this Doc View Source Recycle(PooledNetworkReader) Puts reader back into pool When pool is full, the extra reader is left for the GC Declaration public static void Recycle(PooledNetworkReader reader) Parameters Type Name Description PooledNetworkReader reader"
  },
  "api/Mirror.SyncIDictionary-2.SyncDictionaryChanged.html": {
    "href": "api/Mirror.SyncIDictionary-2.SyncDictionaryChanged.html",
    "title": "Delegate SyncIDictionary<TKey, TValue>.SyncDictionaryChanged",
    "keywords": "Delegate SyncIDictionary<TKey, TValue>.SyncDictionaryChanged Namespace : Mirror Assembly : Mirror.dll Syntax public delegate void SyncDictionaryChanged(SyncIDictionary<TKey, TValue>.Operation op, TKey key, TValue item); Parameters Type Name Description SyncIDictionary.Operation <> op TKey key TValue item"
  },
  "api/Mirror.SceneDrawer.html": {
    "href": "api/Mirror.SceneDrawer.html",
    "title": "Class SceneDrawer",
    "keywords": "Class SceneDrawer Inheritance Object SceneDrawer Namespace : Mirror Assembly : Mirror.Editor.dll Syntax public class SceneDrawer : PropertyDrawer Methods | Improve this Doc View Source GetBuildSettingsSceneObject(String) Declaration protected SceneAsset GetBuildSettingsSceneObject(string sceneName) Parameters Type Name Description String sceneName Returns Type Description SceneAsset | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Mirror.EditorScripts.Logging.LogSettingsEditor.html": {
    "href": "api/Mirror.EditorScripts.Logging.LogSettingsEditor.html",
    "title": "Class LogSettingsEditor",
    "keywords": "Class LogSettingsEditor Inheritance Object LogSettingsEditor Namespace : Mirror.EditorScripts.Logging Assembly : Mirror.Editor.dll Syntax public class LogSettingsEditor : Editor Methods | Improve this Doc View Source CurrentScriptField() Declaration public void CurrentScriptField() | Improve this Doc View Source OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Mirror.NetworkScenePostProcess.html": {
    "href": "api/Mirror.NetworkScenePostProcess.html",
    "title": "Class NetworkScenePostProcess",
    "keywords": "Class NetworkScenePostProcess Inheritance Object NetworkScenePostProcess Namespace : Mirror Assembly : Mirror.Editor.dll Syntax public class NetworkScenePostProcess : MonoBehaviour Methods | Improve this Doc View Source OnPostProcessScene() Declaration public static void OnPostProcessScene()"
  },
  "api/Mirror.Weaver.SyncObjectProcessor.html": {
    "href": "api/Mirror.Weaver.SyncObjectProcessor.html",
    "title": "Class SyncObjectProcessor",
    "keywords": "Class SyncObjectProcessor Inheritance Object SyncObjectProcessor Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class SyncObjectProcessor : object Methods | Improve this Doc View Source FindSyncObjectsFields(TypeDefinition) Finds SyncObjects fields in a type Type should be a NetworkBehaviour Declaration public static List<FieldDefinition> FindSyncObjectsFields(TypeDefinition td) Parameters Type Name Description TypeDefinition td Returns Type Description List < FieldDefinition >"
  },
  "api/Mirror.Tests.MyCustomEnumReadWrite.html": {
    "href": "api/Mirror.Tests.MyCustomEnumReadWrite.html",
    "title": "Class MyCustomEnumReadWrite",
    "keywords": "Class MyCustomEnumReadWrite Inheritance Object MyCustomEnumReadWrite Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public static class MyCustomEnumReadWrite : object Methods | Improve this Doc View Source ReadMyCustomEnum(NetworkReader) Declaration public static EnumReadWriteTests.MyCustomEnum ReadMyCustomEnum(this NetworkReader networkReader) Parameters Type Name Description NetworkReader networkReader Returns Type Description EnumReadWriteTests.MyCustomEnum | Improve this Doc View Source WriteMyCustomEnum(NetworkWriter, EnumReadWriteTests.MyCustomEnum) Declaration public static void WriteMyCustomEnum(this NetworkWriter networkWriter, EnumReadWriteTests.MyCustomEnum customEnum) Parameters Type Name Description NetworkWriter networkWriter EnumReadWriteTests.MyCustomEnum customEnum"
  },
  "api/Mirror.Tests.Generated.Attributes.AttributeTest_MonoBehaviour.html": {
    "href": "api/Mirror.Tests.Generated.Attributes.AttributeTest_MonoBehaviour.html",
    "title": "Class AttributeTest_MonoBehaviour",
    "keywords": "Class AttributeTest_MonoBehaviour Inheritance Object AttributeTest_MonoBehaviour Namespace : Mirror.Tests.Generated.Attributes Assembly : Mirror.Tests.dll Syntax public class AttributeTest_MonoBehaviour : object Methods | Improve this Doc View Source Client_bool_returnsValue(Boolean) Declaration public void Client_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_bool_setsOutValue(Boolean) Declaration public void Client_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_byte_returnsValue(Boolean) Declaration public void Client_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_byte_setsOutValue(Boolean) Declaration public void Client_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_char_returnsValue(Boolean) Declaration public void Client_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_char_setsOutValue(Boolean) Declaration public void Client_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithConstructor_returnsValue(Boolean) Declaration public void Client_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithConstructor_setsOutValue(Boolean) Declaration public void Client_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void Client_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void Client_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_double_returnsValue(Boolean) Declaration public void Client_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_double_setsOutValue(Boolean) Declaration public void Client_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_float_returnsValue(Boolean) Declaration public void Client_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_float_setsOutValue(Boolean) Declaration public void Client_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_int_returnsValue(Boolean) Declaration public void Client_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_int_setsOutValue(Boolean) Declaration public void Client_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_long_returnsValue(Boolean) Declaration public void Client_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_long_setsOutValue(Boolean) Declaration public void Client_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ulong_returnsValue(Boolean) Declaration public void Client_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ulong_setsOutValue(Boolean) Declaration public void Client_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_Vector3_returnsValue(Boolean) Declaration public void Client_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_Vector3_setsOutValue(Boolean) Declaration public void Client_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_bool_returnsValue(Boolean) Declaration public void ClientCallback_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_bool_setsOutValue(Boolean) Declaration public void ClientCallback_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_byte_returnsValue(Boolean) Declaration public void ClientCallback_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_byte_setsOutValue(Boolean) Declaration public void ClientCallback_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_char_returnsValue(Boolean) Declaration public void ClientCallback_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_char_setsOutValue(Boolean) Declaration public void ClientCallback_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithConstructor_returnsValue(Boolean) Declaration public void ClientCallback_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithConstructor_setsOutValue(Boolean) Declaration public void ClientCallback_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void ClientCallback_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void ClientCallback_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_double_returnsValue(Boolean) Declaration public void ClientCallback_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_double_setsOutValue(Boolean) Declaration public void ClientCallback_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_float_returnsValue(Boolean) Declaration public void ClientCallback_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_float_setsOutValue(Boolean) Declaration public void ClientCallback_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_int_returnsValue(Boolean) Declaration public void ClientCallback_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_int_setsOutValue(Boolean) Declaration public void ClientCallback_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_long_returnsValue(Boolean) Declaration public void ClientCallback_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_long_setsOutValue(Boolean) Declaration public void ClientCallback_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ulong_returnsValue(Boolean) Declaration public void ClientCallback_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ulong_setsOutValue(Boolean) Declaration public void ClientCallback_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_Vector3_returnsValue(Boolean) Declaration public void ClientCallback_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_Vector3_setsOutValue(Boolean) Declaration public void ClientCallback_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_bool_returnsValue(Boolean) Declaration public void Server_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_bool_setsOutValue(Boolean) Declaration public void Server_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_byte_returnsValue(Boolean) Declaration public void Server_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_byte_setsOutValue(Boolean) Declaration public void Server_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_char_returnsValue(Boolean) Declaration public void Server_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_char_setsOutValue(Boolean) Declaration public void Server_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithConstructor_returnsValue(Boolean) Declaration public void Server_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithConstructor_setsOutValue(Boolean) Declaration public void Server_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void Server_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void Server_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_double_returnsValue(Boolean) Declaration public void Server_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_double_setsOutValue(Boolean) Declaration public void Server_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_float_returnsValue(Boolean) Declaration public void Server_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_float_setsOutValue(Boolean) Declaration public void Server_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_int_returnsValue(Boolean) Declaration public void Server_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_int_setsOutValue(Boolean) Declaration public void Server_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_long_returnsValue(Boolean) Declaration public void Server_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_long_setsOutValue(Boolean) Declaration public void Server_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ulong_returnsValue(Boolean) Declaration public void Server_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ulong_setsOutValue(Boolean) Declaration public void Server_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_Vector3_returnsValue(Boolean) Declaration public void Server_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_Vector3_setsOutValue(Boolean) Declaration public void Server_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_bool_returnsValue(Boolean) Declaration public void ServerCallback_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_bool_setsOutValue(Boolean) Declaration public void ServerCallback_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_byte_returnsValue(Boolean) Declaration public void ServerCallback_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_byte_setsOutValue(Boolean) Declaration public void ServerCallback_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_char_returnsValue(Boolean) Declaration public void ServerCallback_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_char_setsOutValue(Boolean) Declaration public void ServerCallback_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithConstructor_returnsValue(Boolean) Declaration public void ServerCallback_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithConstructor_setsOutValue(Boolean) Declaration public void ServerCallback_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void ServerCallback_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void ServerCallback_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_double_returnsValue(Boolean) Declaration public void ServerCallback_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_double_setsOutValue(Boolean) Declaration public void ServerCallback_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_float_returnsValue(Boolean) Declaration public void ServerCallback_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_float_setsOutValue(Boolean) Declaration public void ServerCallback_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_int_returnsValue(Boolean) Declaration public void ServerCallback_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_int_setsOutValue(Boolean) Declaration public void ServerCallback_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_long_returnsValue(Boolean) Declaration public void ServerCallback_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_long_setsOutValue(Boolean) Declaration public void ServerCallback_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ulong_returnsValue(Boolean) Declaration public void ServerCallback_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ulong_setsOutValue(Boolean) Declaration public void ServerCallback_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_Vector3_returnsValue(Boolean) Declaration public void ServerCallback_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_Vector3_setsOutValue(Boolean) Declaration public void ServerCallback_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.SyncHashSet-1.html": {
    "href": "api/Mirror.SyncHashSet-1.html",
    "title": "Class SyncHashSet<T>",
    "keywords": "Class SyncHashSet<T> Inheritance Object SyncSet <T> SyncHashSet<T> SyncSetTest.SyncSetString Implements SyncObject Inherited Members SyncSet<T>.objects SyncSet<T>.Count SyncSet<T>.IsReadOnly SyncSet<T>.Callback SyncSet<T>.Reset() SyncSet<T>.IsDirty SyncSet<T>.Flush() SyncSet<T>.OnSerializeAll(NetworkWriter) SyncSet<T>.OnSerializeDelta(NetworkWriter) SyncSet<T>.OnDeserializeAll(NetworkReader) SyncSet<T>.OnDeserializeDelta(NetworkReader) SyncSet<T>.Add(T) SyncSet<T>.Clear() SyncSet<T>.Contains(T) SyncSet<T>.CopyTo(T[], Int32) SyncSet<T>.Remove(T) SyncSet<T>.ExceptWith(IEnumerable<T>) SyncSet<T>.IntersectWith(IEnumerable<T>) SyncSet<T>.IsProperSubsetOf(IEnumerable<T>) SyncSet<T>.IsProperSupersetOf(IEnumerable<T>) SyncSet<T>.IsSubsetOf(IEnumerable<T>) SyncSet<T>.IsSupersetOf(IEnumerable<T>) SyncSet<T>.Overlaps(IEnumerable<T>) SyncSet<T>.SetEquals(IEnumerable<T>) SyncSet<T>.SymmetricExceptWith(IEnumerable<T>) SyncSet<T>.UnionWith(IEnumerable<T>) Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncHashSet<T> : SyncSet<T>, SyncObject Type Parameters Name Description T Constructors | Improve this Doc View Source SyncHashSet() Declaration public SyncHashSet() | Improve this Doc View Source SyncHashSet(IEqualityComparer<T>) Declaration public SyncHashSet(IEqualityComparer<T> comparer) Parameters Type Name Description IEqualityComparer <T> comparer Methods | Improve this Doc View Source GetEnumerator() Declaration public HashSet<T>.Enumerator GetEnumerator() Returns Type Description HashSet.Enumerator <> Implements SyncObject"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.Array_ClassWithNoConstructor_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.Array_ClassWithNoConstructor_Test.html",
    "title": "Class Array_ClassWithNoConstructor_Test",
    "keywords": "Class Array_ClassWithNoConstructor_Test Inheritance Object Array_ClassWithNoConstructor_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class Array_ClassWithNoConstructor_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.Weaver.Readers.html": {
    "href": "api/Mirror.Weaver.Readers.html",
    "title": "Class Readers",
    "keywords": "Class Readers Inheritance Object Readers Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class Readers : object Methods | Improve this Doc View Source GetReadFunc(TypeReference) Finds existing reader for type, if non exists trys to create one This method is recursive Declaration public static MethodReference GetReadFunc(TypeReference variable) Parameters Type Name Description TypeReference variable Returns Type Description MethodReference Returns or null | Improve this Doc View Source Init() Declaration public static void Init()"
  },
  "api/Mirror.EditorScripts.Logging.LogLevelsGUI.html": {
    "href": "api/Mirror.EditorScripts.Logging.LogLevelsGUI.html",
    "title": "Class LogLevelsGUI",
    "keywords": "Class LogLevelsGUI Inheritance Object LogLevelsGUI Namespace : Mirror.EditorScripts.Logging Assembly : Mirror.Editor.dll Syntax public static class LogLevelsGUI : object Methods | Improve this Doc View Source DrawCreateNewButton() Declaration public static LogSettings DrawCreateNewButton() Returns Type Description LogSettings | Improve this Doc View Source DrawLogFactoryDictionary(LogSettings) Declaration public static void DrawLogFactoryDictionary(LogSettings settings) Parameters Type Name Description LogSettings settings"
  },
  "api/Mirror.SyncIDictionary-2.html": {
    "href": "api/Mirror.SyncIDictionary-2.html",
    "title": "Class SyncIDictionary<TKey, TValue>",
    "keywords": "Class SyncIDictionary<TKey, TValue> Inheritance Object SyncIDictionary<TKey, TValue> SyncDictionary<TKey, TValue> Implements SyncObject IReadOnlyDictionary <TKey, TValue> Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncIDictionary<TKey, TValue> : IDictionary<TKey, TValue>, SyncObject, IReadOnlyDictionary<TKey, TValue> Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source SyncIDictionary(IDictionary<TKey, TValue>) Declaration public SyncIDictionary(IDictionary<TKey, TValue> objects) Parameters Type Name Description IDictionary <TKey, TValue> objects Fields | Improve this Doc View Source objects Declaration protected readonly IDictionary<TKey, TValue> objects Field Value Type Description IDictionary <TKey, TValue> Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsDirty Declaration public bool IsDirty { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[TKey] Declaration public TValue this[TKey i] { get; set; } Parameters Type Name Description TKey i Property Value Type Description TValue | Improve this Doc View Source Keys Declaration public ICollection<TKey> Keys { get; } Property Value Type Description ICollection <TKey> | Improve this Doc View Source Values Declaration public ICollection<TValue> Values { get; } Property Value Type Description ICollection <TValue> Methods | Improve this Doc View Source Add(TKey, TValue) Declaration public void Add(TKey key, TValue value) Parameters Type Name Description TKey key TValue value | Improve this Doc View Source Add(KeyValuePair<TKey, TValue>) Declaration public void Add(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair <TKey, TValue> item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(KeyValuePair<TKey, TValue>) Declaration public bool Contains(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair <TKey, TValue> item Returns Type Description Boolean | Improve this Doc View Source ContainsKey(TKey) Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key Returns Type Description Boolean | Improve this Doc View Source CopyTo(KeyValuePair<TKey, TValue>[], Int32) Declaration public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair <TKey, TValue>[] array Int32 arrayIndex | Improve this Doc View Source Flush() Declaration public void Flush() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair <TKey, TValue>> | Improve this Doc View Source OnDeserializeAll(NetworkReader) Declaration public void OnDeserializeAll(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnDeserializeDelta(NetworkReader) Declaration public void OnDeserializeDelta(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnSerializeAll(NetworkWriter) Declaration public void OnSerializeAll(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source OnSerializeDelta(NetworkWriter) Declaration public void OnSerializeDelta(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source Remove(TKey) Declaration public bool Remove(TKey key) Parameters Type Name Description TKey key Returns Type Description Boolean | Improve this Doc View Source Remove(KeyValuePair<TKey, TValue>) Declaration public bool Remove(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair <TKey, TValue> item Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() | Improve this Doc View Source TryGetValue(TKey, out TValue) Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key TValue value Returns Type Description Boolean Events | Improve this Doc View Source Callback Declaration public event SyncIDictionary<TKey, TValue>.SyncDictionaryChanged Callback Event Type Type Description SyncIDictionary.SyncDictionaryChanged <> Implements SyncObject IReadOnlyDictionary<, >"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_ClassWithNoConstructor_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_ClassWithNoConstructor_Test.Message.html",
    "title": "Struct ArraySegment_ClassWithNoConstructor_Test.Message",
    "keywords": "Struct ArraySegment_ClassWithNoConstructor_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public ArraySegment<ClassWithNoConstructor> collection Field Value Type Description ArraySegment < ClassWithNoConstructor > Implements NetworkMessage"
  },
  "api/Mirror.Examples.Tanks.html": {
    "href": "api/Mirror.Examples.Tanks.html",
    "title": "Namespace Mirror.Examples.Tanks",
    "keywords": "Namespace Mirror.Examples.Tanks Classes Projectile Tank"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.Array_string_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.Array_string_Test.html",
    "title": "Class Array_string_Test",
    "keywords": "Class Array_string_Test Inheritance Object Array_string_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class Array_string_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.Cloud.Extensions.html": {
    "href": "api/Mirror.Cloud.Extensions.html",
    "title": "Class Extensions",
    "keywords": "Class Extensions Inheritance Object Extensions Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public static class Extensions : object Methods | Improve this Doc View Source IsOk(UnityWebRequest) Declaration public static bool IsOk(this UnityWebRequest webRequest) Parameters Type Name Description UnityWebRequest webRequest Returns Type Description Boolean"
  },
  "api/Mirror.Cloud.ListServerService.IListServerClientApi.html": {
    "href": "api/Mirror.Cloud.ListServerService.IListServerClientApi.html",
    "title": "Interface IListServerClientApi",
    "keywords": "Interface IListServerClientApi Inherited Members IBaseApi.Shutdown() Namespace : Mirror.Cloud.ListServerService Assembly : Mirror.Cloud.dll Syntax public interface IListServerClientApi : IBaseApi Methods | Improve this Doc View Source GetServerList() Get the server list once Declaration void GetServerList() | Improve this Doc View Source StartGetServerListRepeat(Int32) Start getting the server list every interval Declaration void StartGetServerListRepeat(int interval) Parameters Type Name Description Int32 interval | Improve this Doc View Source StopGetServerListRepeat() Stop getting the server list Declaration void StopGetServerListRepeat() Events | Improve this Doc View Source onServerListUpdated Called when the server list is updated Declaration event UnityAction<ServerCollectionJson> onServerListUpdated Event Type Type Description UnityAction < ServerCollectionJson >"
  },
  "api/Mirror.NetworkTransformChild.html": {
    "href": "api/Mirror.NetworkTransformChild.html",
    "title": "Class NetworkTransformChild",
    "keywords": "Class NetworkTransformChild A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values. Inheritance Object NetworkBehaviour NetworkTransformBase NetworkTransformChild Inherited Members NetworkTransformBase.clientAuthority NetworkTransformBase.localPositionSensitivity NetworkTransformBase.localRotationSensitivity NetworkTransformBase.localScaleSensitivity NetworkTransformBase.SerializeIntoWriter(NetworkWriter, Vector3, Quaternion, Vector3) NetworkTransformBase.OnSerialize(NetworkWriter, Boolean) NetworkTransformBase.OnDeserialize(NetworkReader, Boolean) NetworkTransformBase.ServerTeleport(Vector3) NetworkTransformBase.ServerTeleport(Vector3, Quaternion) NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class NetworkTransformChild : NetworkTransformBase Fields | Improve this Doc View Source target Declaration public Transform target Field Value Type Description Transform Properties | Improve this Doc View Source targetComponent Declaration protected override Transform targetComponent { get; } Property Value Type Description Transform Overrides NetworkTransformBase.targetComponent"
  },
  "api/Mirror.ShowInInspectorAttribute.html": {
    "href": "api/Mirror.ShowInInspectorAttribute.html",
    "title": "Class ShowInInspectorAttribute",
    "keywords": "Class ShowInInspectorAttribute Used to show private SyncList in the inspector, Use instead of SerializeField for non Serializable types Inheritance Object ShowInInspectorAttribute Namespace : Mirror Assembly : Mirror.dll Syntax public class ShowInInspectorAttribute : Attribute"
  },
  "api/Mirror.Tests.NetworkClientTests.html": {
    "href": "api/Mirror.Tests.NetworkClientTests.html",
    "title": "Class NetworkClientTests",
    "keywords": "Class NetworkClientTests Inheritance Object NetworkClientTests Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkClientTests : object Methods | Improve this Doc View Source ConnectUri() Declaration public void ConnectUri() | Improve this Doc View Source DisconnectInHostMode() Declaration public void DisconnectInHostMode() | Improve this Doc View Source isConnected() Declaration public void isConnected() | Improve this Doc View Source Send() Declaration public void Send() | Improve this Doc View Source serverIp() Declaration public void serverIp() | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.Tests.LocalConnectionTest.html": {
    "href": "api/Mirror.Tests.LocalConnectionTest.html",
    "title": "Class LocalConnectionTest",
    "keywords": "Class LocalConnectionTest Inheritance Object LocalConnectionTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class LocalConnectionTest : object Methods | Improve this Doc View Source Disconnect() Declaration public void Disconnect() | Improve this Doc View Source SetUpConnections() Declaration public void SetUpConnections()"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.List_ClassWithNoConstructor_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.List_ClassWithNoConstructor_Test.Message.html",
    "title": "Struct List_ClassWithNoConstructor_Test.Message",
    "keywords": "Struct List_ClassWithNoConstructor_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public List<ClassWithNoConstructor> collection Field Value Type Description List < ClassWithNoConstructor > Implements NetworkMessage"
  },
  "api/Mirror.Tests.SyncSetTest.SyncSetString.html": {
    "href": "api/Mirror.Tests.SyncSetTest.SyncSetString.html",
    "title": "Class SyncSetTest.SyncSetString",
    "keywords": "Class SyncSetTest.SyncSetString Inheritance Object SyncSet < String > SyncHashSet < String > SyncSetTest.SyncSetString Implements SyncObject Inherited Members SyncHashSet<String>.GetEnumerator() SyncSet<String>.objects SyncSet<String>.Count SyncSet<String>.IsReadOnly SyncSet<String>.Callback SyncSet<String>.Reset() SyncSet<String>.IsDirty SyncSet<String>.Flush() SyncSet<String>.OnSerializeAll(NetworkWriter) SyncSet<String>.OnSerializeDelta(NetworkWriter) SyncSet<String>.OnDeserializeAll(NetworkReader) SyncSet<String>.OnDeserializeDelta(NetworkReader) SyncSet<String>.Add(String) SyncSet<String>.Clear() SyncSet<String>.Contains(String) SyncSet<String>.CopyTo(String[], Int32) SyncSet<String>.Remove(String) SyncSet<String>.ExceptWith(IEnumerable<>) SyncSet<String>.IntersectWith(IEnumerable<>) SyncSet<String>.IsProperSubsetOf(IEnumerable<>) SyncSet<String>.IsProperSupersetOf(IEnumerable<>) SyncSet<String>.IsSubsetOf(IEnumerable<>) SyncSet<String>.IsSupersetOf(IEnumerable<>) SyncSet<String>.Overlaps(IEnumerable<>) SyncSet<String>.SetEquals(IEnumerable<>) SyncSet<String>.SymmetricExceptWith(IEnumerable<>) SyncSet<String>.UnionWith(IEnumerable<>) Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class SyncSetString : SyncHashSet<string>, SyncObject Implements SyncObject"
  },
  "api/Mirror.NetworkPingMessage.html": {
    "href": "api/Mirror.NetworkPingMessage.html",
    "title": "Struct NetworkPingMessage",
    "keywords": "Struct NetworkPingMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct NetworkPingMessage : NetworkMessage Constructors | Improve this Doc View Source NetworkPingMessage(Double) Declaration public NetworkPingMessage(double value) Parameters Type Name Description Double value Fields | Improve this Doc View Source clientTime Declaration public double clientTime Field Value Type Description Double Implements NetworkMessage"
  },
  "api/Mirror.Tests.Performance.FakeNetworkConnection.html": {
    "href": "api/Mirror.Tests.Performance.FakeNetworkConnection.html",
    "title": "Class FakeNetworkConnection",
    "keywords": "Class FakeNetworkConnection Inheritance Object NetworkConnection NetworkConnectionToClient FakeNetworkConnection Inherited Members NetworkConnection.LocalConnectionId NetworkConnection.connectionId NetworkConnection.isAuthenticated NetworkConnection.authenticationData NetworkConnection.isReady NetworkConnection.lastMessageTime NetworkConnection.identity NetworkConnection.clientOwnedObjects NetworkConnection.Send<T>(T, Int32) Mirror.NetworkConnection.ValidatePacketSize(ArraySegment<>, System.Int32) NetworkConnection.ToString() NetworkConnection.InvokeHandler<T>(T, Int32) Namespace : Mirror.Tests.Performance Assembly : Mirror.Tests.Performance.Editor.dll Syntax public class FakeNetworkConnection : NetworkConnectionToClient Constructors | Improve this Doc View Source FakeNetworkConnection(Int32) Declaration public FakeNetworkConnection(int networkConnectionId) Parameters Type Name Description Int32 networkConnectionId Properties | Improve this Doc View Source address Declaration public override string address { get; } Property Value Type Description String Overrides NetworkConnectionToClient.address Methods | Improve this Doc View Source Disconnect() Declaration public override void Disconnect() Overrides NetworkConnectionToClient.Disconnect()"
  },
  "api/Mirror.Tests.Performance.NetworkIdentityPerformance.html": {
    "href": "api/Mirror.Tests.Performance.NetworkIdentityPerformance.html",
    "title": "Class NetworkIdentityPerformance",
    "keywords": "Class NetworkIdentityPerformance Inheritance Object NetworkIdentityPerformance Namespace : Mirror.Tests.Performance Assembly : Mirror.Tests.Performance.Editor.dll Syntax public class NetworkIdentityPerformance : object Methods | Improve this Doc View Source NetworkIdentityServerUpdateIsDirty() Declaration public void NetworkIdentityServerUpdateIsDirty() | Improve this Doc View Source NetworkIdentityServerUpdateNotDirty() Declaration public void NetworkIdentityServerUpdateNotDirty() | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.LLAPITransport.html": {
    "href": "api/Mirror.LLAPITransport.html",
    "title": "Class LLAPITransport",
    "keywords": "Class LLAPITransport Inheritance Object Transport LLAPITransport Inherited Members Transport.activeTransport Transport.OnClientConnected Transport.OnClientDataReceived Transport.OnClientError Transport.OnClientDisconnected Transport.OnServerConnected Transport.OnServerDataReceived Transport.OnServerError Transport.OnServerDisconnected Transport.Update() Transport.OnApplicationQuit() Namespace : Mirror Assembly : Mirror.dll Syntax public class LLAPITransport : Transport Fields | Improve this Doc View Source connectionConfig Declaration public ConnectionConfig connectionConfig Field Value Type Description ConnectionConfig | Improve this Doc View Source globalConfig Declaration public GlobalConfig globalConfig Field Value Type Description GlobalConfig | Improve this Doc View Source port Declaration public ushort port Field Value Type Description UInt16 | Improve this Doc View Source Scheme Declaration public const string Scheme = null Field Value Type Description String | Improve this Doc View Source useWebsockets Declaration public bool useWebsockets Field Value Type Description Boolean Methods | Improve this Doc View Source Available() Declaration public override bool Available() Returns Type Description Boolean Overrides Transport.Available() | Improve this Doc View Source ClientConnect(String) Declaration public override void ClientConnect(string address) Parameters Type Name Description String address Overrides Transport.ClientConnect(String) | Improve this Doc View Source ClientConnect(Uri) Declaration public override void ClientConnect(Uri uri) Parameters Type Name Description Uri uri Overrides Transport.ClientConnect(Uri) | Improve this Doc View Source ClientConnected() Declaration public override bool ClientConnected() Returns Type Description Boolean Overrides Transport.ClientConnected() | Improve this Doc View Source ClientDisconnect() Declaration public override void ClientDisconnect() Overrides Transport.ClientDisconnect() | Improve this Doc View Source ClientGetAddress() Declaration public string ClientGetAddress() Returns Type Description String | Improve this Doc View Source ClientSend(Int32, ArraySegment<Byte>) Declaration public override void ClientSend(int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 channelId ArraySegment < Byte > segment Overrides Transport.ClientSend(Int32, ArraySegment<Byte>) | Improve this Doc View Source GetMaxPacketSize(Int32) Declaration public override int GetMaxPacketSize(int channelId) Parameters Type Name Description Int32 channelId Returns Type Description Int32 Overrides Transport.GetMaxPacketSize(Int32) | Improve this Doc View Source LateUpdate() Declaration public void LateUpdate() | Improve this Doc View Source ProcessClientMessage() Declaration public bool ProcessClientMessage() Returns Type Description Boolean | Improve this Doc View Source ProcessServerMessage() Declaration public bool ProcessServerMessage() Returns Type Description Boolean | Improve this Doc View Source ServerActive() Declaration public override bool ServerActive() Returns Type Description Boolean Overrides Transport.ServerActive() | Improve this Doc View Source ServerDisconnect(Int32) Declaration public override bool ServerDisconnect(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description Boolean Overrides Transport.ServerDisconnect(Int32) | Improve this Doc View Source ServerGetClientAddress(Int32) Declaration public override string ServerGetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description String Overrides Transport.ServerGetClientAddress(Int32) | Improve this Doc View Source ServerSend(Int32, Int32, ArraySegment<Byte>) Declaration public override void ServerSend(int connectionId, int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 connectionId Int32 channelId ArraySegment < Byte > segment Overrides Transport.ServerSend(Int32, Int32, ArraySegment<Byte>) | Improve this Doc View Source ServerStart() Declaration public override void ServerStart() Overrides Transport.ServerStart() | Improve this Doc View Source ServerStop() Declaration public override void ServerStop() Overrides Transport.ServerStop() | Improve this Doc View Source ServerUri() Declaration public override Uri ServerUri() Returns Type Description Uri Overrides Transport.ServerUri() | Improve this Doc View Source Shutdown() Declaration public override void Shutdown() Overrides Transport.Shutdown() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Mirror.NetworkLobbyPlayer.html": {
    "href": "api/Mirror.NetworkLobbyPlayer.html",
    "title": "Class NetworkLobbyPlayer",
    "keywords": "Class NetworkLobbyPlayer This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system. The LobbyPrefab object of the NetworkLobbyManager must have this component on it. This component holds basic lobby player data required for the lobby to function. Game specific data for lobby players can be put in other components on the LobbyPrefab or in scripts derived from NetworkLobbyPlayer. Inheritance Object NetworkBehaviour NetworkRoomPlayer NetworkLobbyPlayer Inherited Members NetworkRoomPlayer.showRoomGUI NetworkRoomPlayer.readyToBegin NetworkRoomPlayer.index NetworkRoomPlayer.Start() NetworkRoomPlayer.OnDisable() NetworkRoomPlayer.CmdChangeReadyState(Boolean) NetworkRoomPlayer.IndexChanged(Int32, Int32) NetworkRoomPlayer.ReadyStateChanged(Boolean, Boolean) NetworkRoomPlayer.OnClientEnterRoom() NetworkRoomPlayer.OnClientExitRoom() NetworkRoomPlayer.OnGUI() NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class NetworkLobbyPlayer : NetworkRoomPlayer"
  },
  "api/Mirror.Examples.Benchmark.BenchmarkNetworkManager.html": {
    "href": "api/Mirror.Examples.Benchmark.BenchmarkNetworkManager.html",
    "title": "Class BenchmarkNetworkManager",
    "keywords": "Class BenchmarkNetworkManager Inheritance Object NetworkManager BenchmarkNetworkManager Inherited Members NetworkManager.dontDestroyOnLoad NetworkManager.runInBackground NetworkManager.autoStartServerBuild NetworkManager.showDebugMessages NetworkManager.serverTickRate NetworkManager.offlineScene NetworkManager.onlineScene NetworkManager.transport NetworkManager.networkAddress NetworkManager.maxConnections NetworkManager.disconnectInactiveConnections NetworkManager.disconnectInactiveTimeout NetworkManager.authenticator NetworkManager.playerPrefab NetworkManager.autoCreatePlayer NetworkManager.playerSpawnMethod NetworkManager.spawnPrefabs NetworkManager.singleton NetworkManager.numPlayers NetworkManager.isNetworkActive NetworkManager.clientLoadedScene NetworkManager.mode NetworkManager.OnValidate() NetworkManager.Awake() NetworkManager.Start() NetworkManager.LateUpdate() NetworkManager.IsSceneActive(String) NetworkManager.StartServer() NetworkManager.StartClient() NetworkManager.StartClient(Uri) NetworkManager.StartHost() NetworkManager.StopHost() NetworkManager.StopServer() NetworkManager.StopClient() NetworkManager.OnApplicationQuit() NetworkManager.ConfigureServerFrameRate() NetworkManager.Shutdown() NetworkManager.OnDestroy() NetworkManager.networkSceneName NetworkManager.loadingSceneAsync NetworkManager.ServerChangeScene(String) NetworkManager.startPositionIndex NetworkManager.startPositions NetworkManager.RegisterStartPosition(Transform) NetworkManager.UnRegisterStartPosition(Transform) NetworkManager.GetStartPosition() NetworkManager.OnServerConnect(NetworkConnection) NetworkManager.OnServerDisconnect(NetworkConnection) NetworkManager.OnServerReady(NetworkConnection) NetworkManager.OnServerAddPlayer(NetworkConnection) NetworkManager.OnServerError(NetworkConnection, Int32) NetworkManager.OnServerChangeScene(String) NetworkManager.OnServerSceneChanged(String) NetworkManager.OnClientConnect(NetworkConnection) NetworkManager.OnClientDisconnect(NetworkConnection) NetworkManager.OnClientError(NetworkConnection, Int32) NetworkManager.OnClientNotReady(NetworkConnection) NetworkManager.OnClientChangeScene(String, SceneOperation, Boolean) NetworkManager.OnClientSceneChanged(NetworkConnection) NetworkManager.OnStartHost() NetworkManager.OnStartClient() NetworkManager.OnStopServer() NetworkManager.OnStopClient() NetworkManager.OnStopHost() Namespace : Mirror.Examples.Benchmark Assembly : Mirror.Examples.dll Syntax public class BenchmarkNetworkManager : NetworkManager Fields | Improve this Doc View Source interleave Declaration public float interleave Field Value Type Description Single | Improve this Doc View Source spawnAmount Declaration public int spawnAmount Field Value Type Description Int32 | Improve this Doc View Source spawnPrefab Declaration public GameObject spawnPrefab Field Value Type Description GameObject Methods | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkManager.OnStartServer()"
  },
  "api/Mirror.Weaver.RemoteCallType.html": {
    "href": "api/Mirror.Weaver.RemoteCallType.html",
    "title": "Enum RemoteCallType",
    "keywords": "Enum RemoteCallType Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public enum RemoteCallType : int Fields Name Description ClientRpc Command TargetRpc"
  },
  "api/Mirror.Experimental.NetworkRigidbody.ClientSyncState.html": {
    "href": "api/Mirror.Experimental.NetworkRigidbody.ClientSyncState.html",
    "title": "Class NetworkRigidbody.ClientSyncState",
    "keywords": "Class NetworkRigidbody.ClientSyncState holds previously synced values Inheritance Object NetworkRigidbody.ClientSyncState Namespace : Mirror.Experimental Assembly : Mirror.Components.dll Syntax public class ClientSyncState : object Fields | Improve this Doc View Source angularDrag Declaration public float angularDrag Field Value Type Description Single | Improve this Doc View Source angularVelocity Declaration public Vector3 angularVelocity Field Value Type Description Vector3 | Improve this Doc View Source drag Declaration public float drag Field Value Type Description Single | Improve this Doc View Source isKinematic Declaration public bool isKinematic Field Value Type Description Boolean | Improve this Doc View Source nextSyncTime Next sync time that velocity will be synced, based on syncInterval. Declaration public float nextSyncTime Field Value Type Description Single | Improve this Doc View Source useGravity Declaration public bool useGravity Field Value Type Description Boolean | Improve this Doc View Source velocity Declaration public Vector3 velocity Field Value Type Description Vector3"
  },
  "api/Mirror.DisconnectMessage.html": {
    "href": "api/Mirror.DisconnectMessage.html",
    "title": "Struct DisconnectMessage",
    "keywords": "Struct DisconnectMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct DisconnectMessage : NetworkMessage Implements NetworkMessage"
  },
  "api/Mirror.PooledNetworkWriter.html": {
    "href": "api/Mirror.PooledNetworkWriter.html",
    "title": "Class PooledNetworkWriter",
    "keywords": "Class PooledNetworkWriter NetworkWriter to be used with NetworkWriterPool Inheritance Object NetworkWriter PooledNetworkWriter Implements IDisposable Inherited Members NetworkWriter.MaxStringLength NetworkWriter.Length NetworkWriter.Position NetworkWriter.Reset() NetworkWriter.SetLength(Int32) NetworkWriter.ToArray() NetworkWriter.ToArraySegment() NetworkWriter.WriteBlittable<T>(T) NetworkWriter.WriteBytes(Byte[], Int32, Int32) NetworkWriter.Write<T>(T) Namespace : Mirror Assembly : Mirror.dll Syntax public class PooledNetworkWriter : NetworkWriter, IDisposable Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IDisposable Extension Methods ReadWrite.WriteSomeData(NetworkWriter, SomeDataWithWriter) MockQuestReaderWriter.WriteQuest(NetworkWriter, MockQuest) MyCustomEnumReadWrite.WriteMyCustomEnum(NetworkWriter, EnumReadWriteTests.MyCustomEnum) NetworkWriterExtensions.WriteByte(NetworkWriter, Byte) NetworkWriterExtensions.WriteSByte(NetworkWriter, SByte) NetworkWriterExtensions.WriteChar(NetworkWriter, Char) NetworkWriterExtensions.WriteBoolean(NetworkWriter, Boolean) NetworkWriterExtensions.WriteUInt16(NetworkWriter, UInt16) NetworkWriterExtensions.WriteInt16(NetworkWriter, Int16) NetworkWriterExtensions.WriteUInt32(NetworkWriter, UInt32) NetworkWriterExtensions.WriteInt32(NetworkWriter, Int32) NetworkWriterExtensions.WriteUInt64(NetworkWriter, UInt64) NetworkWriterExtensions.WriteInt64(NetworkWriter, Int64) NetworkWriterExtensions.WriteSingle(NetworkWriter, Single) NetworkWriterExtensions.WriteDouble(NetworkWriter, Double) NetworkWriterExtensions.WriteDecimal(NetworkWriter, Decimal) NetworkWriterExtensions.WriteString(NetworkWriter, String) NetworkWriterExtensions.WriteBytesAndSize(NetworkWriter, Byte[], Int32, Int32) NetworkWriterExtensions.WriteBytesAndSize(NetworkWriter, Byte[]) NetworkWriterExtensions.WriteBytesAndSizeSegment(NetworkWriter, ArraySegment<Byte>) NetworkWriterExtensions.WriteVector2(NetworkWriter, Vector2) NetworkWriterExtensions.WriteVector3(NetworkWriter, Vector3) NetworkWriterExtensions.WriteVector4(NetworkWriter, Vector4) NetworkWriterExtensions.WriteVector2Int(NetworkWriter, Vector2Int) NetworkWriterExtensions.WriteVector3Int(NetworkWriter, Vector3Int) NetworkWriterExtensions.WriteColor(NetworkWriter, Color) NetworkWriterExtensions.WriteColor32(NetworkWriter, Color32) NetworkWriterExtensions.WriteQuaternion(NetworkWriter, Quaternion) NetworkWriterExtensions.WriteRect(NetworkWriter, Rect) NetworkWriterExtensions.WritePlane(NetworkWriter, Plane) NetworkWriterExtensions.WriteRay(NetworkWriter, Ray) NetworkWriterExtensions.WriteMatrix4x4(NetworkWriter, Matrix4x4) NetworkWriterExtensions.WriteGuid(NetworkWriter, Guid) NetworkWriterExtensions.WriteNetworkIdentity(NetworkWriter, NetworkIdentity) NetworkWriterExtensions.WriteTransform(NetworkWriter, Transform) NetworkWriterExtensions.WriteGameObject(NetworkWriter, GameObject) NetworkWriterExtensions.WriteUri(NetworkWriter, Uri) NetworkWriterExtensions.WriteList<T>(NetworkWriter, List<T>) NetworkWriterExtensions.WriteArray<T>(NetworkWriter, T[]) NetworkWriterExtensions.WriteArraySegment<T>(NetworkWriter, ArraySegment<T>)"
  },
  "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_RegisterSpawnHandler.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_RegisterSpawnHandler.html",
    "title": "Class ClientSceneTests_RegisterSpawnHandler",
    "keywords": "Class ClientSceneTests_RegisterSpawnHandler Inheritance Object ClientSceneTestsBase ClientSceneTests_RegisterSpawnHandler Inherited Members ClientSceneTestsBase.ValidPrefabAssetGuid ClientSceneTestsBase.PrefabWithChildrenAssetGuid ClientSceneTestsBase.InvalidPrefabAssetGuid ClientSceneTestsBase.AnotherGuidString ClientSceneTestsBase.validPrefab ClientSceneTestsBase.validPrefabNetworkIdentity ClientSceneTestsBase.prefabWithChildren ClientSceneTestsBase.invalidPrefab ClientSceneTestsBase.validPrefabGuid ClientSceneTestsBase.anotherGuid ClientSceneTestsBase._createdObjects ClientSceneTestsBase.prefabs ClientSceneTestsBase.spawnHandlers ClientSceneTestsBase.unspawnHandlers ClientSceneTestsBase.spawnableObjects ClientSceneTestsBase.OneTimeSetUp() ClientSceneTestsBase.TearDown() ClientSceneTestsBase.OneTimeTearDown() Namespace : Mirror.Tests.ClientSceneTests Assembly : Mirror.Tests.dll Syntax public class ClientSceneTests_RegisterSpawnHandler : ClientSceneTestsBase Methods | Improve this Doc View Source SpawnDelegate_AddsHandlerToSpawnHandlers() Declaration public void SpawnDelegate_AddsHandlerToSpawnHandlers() | Improve this Doc View Source SpawnDelegate_AddsHandlerToSpawnHandlersWithCorrectArguments() Declaration public void SpawnDelegate_AddsHandlerToSpawnHandlersWithCorrectArguments() | Improve this Doc View Source SpawnDelegate_AddsHandlerToUnSpawnHandlers() Declaration public void SpawnDelegate_AddsHandlerToUnSpawnHandlers() | Improve this Doc View Source SpawnDelegate_ErrorWhenAssetIdIsEmpty() Declaration public void SpawnDelegate_ErrorWhenAssetIdIsEmpty() | Improve this Doc View Source SpawnDelegate_ErrorWhenHandlerForGuidAlreadyExistsInPrefabDictionary() Declaration public void SpawnDelegate_ErrorWhenHandlerForGuidAlreadyExistsInPrefabDictionary() | Improve this Doc View Source SpawnDelegate_ErrorWhenSpawnHandlerIsNull() Declaration public void SpawnDelegate_ErrorWhenSpawnHandlerIsNull() | Improve this Doc View Source SpawnDelegate_ErrorWhenUnSpawnHandlerIsNull() Declaration public void SpawnDelegate_ErrorWhenUnSpawnHandlerIsNull() | Improve this Doc View Source SpawnDelegate_WarningWhenHandlerForGuidAlreadyExistsInHandlerDictionary() Declaration public void SpawnDelegate_WarningWhenHandlerForGuidAlreadyExistsInHandlerDictionary() | Improve this Doc View Source SpawnHandlerDelegate_AddsHandlerToSpawnHandlers() Declaration public void SpawnHandlerDelegate_AddsHandlerToSpawnHandlers() | Improve this Doc View Source SpawnHandlerDelegate_AddsHandlerToUnSpawnHandlers() Declaration public void SpawnHandlerDelegate_AddsHandlerToUnSpawnHandlers() | Improve this Doc View Source SpawnHandlerDelegate_ErrorWhenAssetIdIsEmpty() Declaration public void SpawnHandlerDelegate_ErrorWhenAssetIdIsEmpty() | Improve this Doc View Source SpawnHandlerDelegate_ErrorWhenHandlerForGuidAlreadyExistsInPrefabDictionary() Declaration public void SpawnHandlerDelegate_ErrorWhenHandlerForGuidAlreadyExistsInPrefabDictionary() | Improve this Doc View Source SpawnHandlerDelegate_ErrorWhenSpawnHandlerIsNull() Declaration public void SpawnHandlerDelegate_ErrorWhenSpawnHandlerIsNull() | Improve this Doc View Source SpawnHandlerDelegate_ErrorWhenUnSpawnHandlerIsNull() Declaration public void SpawnHandlerDelegate_ErrorWhenUnSpawnHandlerIsNull() | Improve this Doc View Source SpawnHandlerDelegate_WarningWhenHandlerForGuidAlreadyExistsInHandlerDictionary() Declaration public void SpawnHandlerDelegate_WarningWhenHandlerForGuidAlreadyExistsInHandlerDictionary()"
  },
  "api/Mirror.Tests.TestItem.html": {
    "href": "api/Mirror.Tests.TestItem.html",
    "title": "Struct TestItem",
    "keywords": "Struct TestItem Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public struct TestItem Fields | Improve this Doc View Source price Declaration public float price Field Value Type Description Single"
  },
  "api/Mirror.Tests.NetworkReaderWriterTest.html": {
    "href": "api/Mirror.Tests.NetworkReaderWriterTest.html",
    "title": "Class NetworkReaderWriterTest",
    "keywords": "Class NetworkReaderWriterTest Inheritance Object NetworkReaderWriterTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkReaderWriterTest : object Methods | Improve this Doc View Source TestAccessingCustomWriterAndReader() Declaration public void TestAccessingCustomWriterAndReader() | Improve this Doc View Source TestIntReaderNotNull() Declaration public void TestIntReaderNotNull() | Improve this Doc View Source TestIntWriterNotNull() Declaration public void TestIntWriterNotNull()"
  },
  "api/Mirror.NetworkDiagnostics.html": {
    "href": "api/Mirror.NetworkDiagnostics.html",
    "title": "Class NetworkDiagnostics",
    "keywords": "Class NetworkDiagnostics Provides profiling information from mirror A profiler can subscribe to these events and present the data in a friendly way to the user Inheritance Object NetworkDiagnostics Namespace : Mirror Assembly : Mirror.dll Syntax public static class NetworkDiagnostics : object Events | Improve this Doc View Source InMessageEvent Event that gets raised when Mirror receives a message Subscribe to this if you want to profile the network Declaration public static event Action<NetworkDiagnostics.MessageInfo> InMessageEvent Event Type Type Description Action < NetworkDiagnostics.MessageInfo > | Improve this Doc View Source OutMessageEvent Event that gets raised when Mirror sends a message Subscribe to this if you want to diagnose the network Declaration public static event Action<NetworkDiagnostics.MessageInfo> OutMessageEvent Event Type Type Description Action < NetworkDiagnostics.MessageInfo >"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.Array_int_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.Array_int_Test.html",
    "title": "Class Array_int_Test",
    "keywords": "Class Array_int_Test Inheritance Object Array_int_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class Array_int_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.SyncListInt.html": {
    "href": "api/Mirror.SyncListInt.html",
    "title": "Class SyncListInt",
    "keywords": "Class SyncListInt Inheritance Object SyncList < Int32 > SyncListInt Implements IReadOnlyList < Int32 > SyncObject Inherited Members SyncList<Int32>.Count SyncList<Int32>.IsReadOnly SyncList<Int32>.Callback SyncList<Int32>.IsDirty SyncList<Int32>.Flush() SyncList<Int32>.Reset() SyncList<Int32>.OnSerializeAll(NetworkWriter) SyncList<Int32>.OnSerializeDelta(NetworkWriter) SyncList<Int32>.OnDeserializeAll(NetworkReader) SyncList<Int32>.OnDeserializeDelta(NetworkReader) SyncList<Int32>.Add(Int32) SyncList<Int32>.AddRange(IEnumerable<Int32>) SyncList<Int32>.Clear() SyncList<Int32>.Contains(Int32) SyncList<Int32>.CopyTo(Int32[], Int32) SyncList<Int32>.IndexOf(Int32) SyncList<Int32>.FindIndex(Predicate<Int32>) SyncList<Int32>.Find(Predicate<Int32>) SyncList<Int32>.FindAll(Predicate<Int32>) SyncList<Int32>.Insert(Int32, Int32) SyncList<Int32>.InsertRange(Int32, IEnumerable<Int32>) SyncList<Int32>.Remove(Int32) SyncList<Int32>.RemoveAt(Int32) SyncList<Int32>.RemoveAll(Predicate<Int32>) SyncList<Int32>.Item[Int32] SyncList<Int32>.GetEnumerator() Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncListInt : SyncList<int>, IReadOnlyList<int>, SyncObject Implements IReadOnlyList<> SyncObject"
  },
  "api/Mirror.Discovery.NetworkDiscoveryHUD.html": {
    "href": "api/Mirror.Discovery.NetworkDiscoveryHUD.html",
    "title": "Class NetworkDiscoveryHUD",
    "keywords": "Class NetworkDiscoveryHUD Inheritance Object NetworkDiscoveryHUD Namespace : Mirror.Discovery Assembly : Mirror.Components.dll Syntax public class NetworkDiscoveryHUD : MonoBehaviour Fields | Improve this Doc View Source networkDiscovery Declaration public NetworkDiscovery networkDiscovery Field Value Type Description NetworkDiscovery Methods | Improve this Doc View Source OnDiscoveredServer(ServerResponse) Declaration public void OnDiscoveredServer(ServerResponse info) Parameters Type Name Description ServerResponse info"
  },
  "api/Mirror.Cloud.ApiConnector.html": {
    "href": "api/Mirror.Cloud.ApiConnector.html",
    "title": "Class ApiConnector",
    "keywords": "Class ApiConnector Used to requests and responses from the mirror api Inheritance Object ApiConnector Implements IApiConnector ICoroutineRunner IUnityEqualCheck Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public class ApiConnector : MonoBehaviour, IApiConnector, ICoroutineRunner, IUnityEqualCheck Properties | Improve this Doc View Source ListServer Declaration public ListServer ListServer { get; } Property Value Type Description ListServer Methods | Improve this Doc View Source OnDestroy() Declaration public void OnDestroy() Implements IApiConnector ICoroutineRunner IUnityEqualCheck Extension Methods UnityEqualCheckExtension.IsNull(IUnityEqualCheck) UnityEqualCheckExtension.IsNotNull(IUnityEqualCheck)"
  },
  "api/Mirror.NetworkRoomPlayer.html": {
    "href": "api/Mirror.NetworkRoomPlayer.html",
    "title": "Class NetworkRoomPlayer",
    "keywords": "Class NetworkRoomPlayer This component works in conjunction with the NetworkRoomManager to make up the multiplayer room system. The RoomPrefab object of the NetworkRoomManager must have this component on it. This component holds basic room player data required for the room to function. Game specific data for room players can be put in other components on the RoomPrefab or in scripts derived from NetworkRoomPlayer. Inheritance Object NetworkBehaviour NetworkRoomPlayer NetworkRoomPlayerExt NetworkLobbyPlayer Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class NetworkRoomPlayer : NetworkBehaviour Fields | Improve this Doc View Source index Diagnostic index of the player, e.g. Player1, Player2, etc. Declaration public int index Field Value Type Description Int32 | Improve this Doc View Source readyToBegin Declaration public bool readyToBegin Field Value Type Description Boolean | Improve this Doc View Source showRoomGUI This flag controls whether the default UI is shown for the room player. As this UI is rendered using the old GUI system, it is only recommended for testing purposes. Declaration public bool showRoomGUI Field Value Type Description Boolean Methods | Improve this Doc View Source CmdChangeReadyState(Boolean) Declaration public void CmdChangeReadyState(bool readyState) Parameters Type Name Description Boolean readyState | Improve this Doc View Source IndexChanged(Int32, Int32) This is a hook that is invoked on clients when the index changes. Declaration public virtual void IndexChanged(int oldIndex, int newIndex) Parameters Type Name Description Int32 oldIndex The old index value Int32 newIndex The new index value | Improve this Doc View Source OnClientEnterRoom() This is a hook that is invoked on clients for all room player objects when entering the room. Note: isLocalPlayer is not guaranteed to be set until OnStartLocalPlayer is called. Declaration public virtual void OnClientEnterRoom() | Improve this Doc View Source OnClientExitRoom() This is a hook that is invoked on clients for all room player objects when exiting the room. Declaration public virtual void OnClientExitRoom() | Improve this Doc View Source OnDisable() Declaration public virtual void OnDisable() | Improve this Doc View Source OnGUI() Render a UI for the room. Override to provide your on UI Declaration public virtual void OnGUI() | Improve this Doc View Source ReadyStateChanged(Boolean, Boolean) This is a hook that is invoked on clients when a RoomPlayer switches between ready or not ready. This function is called when the a client player calls CmdChangeReadyState. Declaration public virtual void ReadyStateChanged(bool oldReadyState, bool newReadyState) Parameters Type Name Description Boolean oldReadyState Boolean newReadyState New Ready State | Improve this Doc View Source Start() Do not use Start - Override OnStartrHost / OnStartClient instead! Declaration public void Start()"
  },
  "api/Mirror.Tests.MessagePackerTest.EmptyMessage.html": {
    "href": "api/Mirror.Tests.MessagePackerTest.EmptyMessage.html",
    "title": "Struct MessagePackerTest.EmptyMessage",
    "keywords": "Struct MessagePackerTest.EmptyMessage Implements NetworkMessage Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public struct EmptyMessage : NetworkMessage Implements NetworkMessage"
  },
  "api/Mirror.Tests.Performance.NetworkWriterPerformance.html": {
    "href": "api/Mirror.Tests.Performance.NetworkWriterPerformance.html",
    "title": "Class NetworkWriterPerformance",
    "keywords": "Class NetworkWriterPerformance Inheritance Object NetworkWriterPerformance Namespace : Mirror.Tests.Performance Assembly : Mirror.Tests.Performance.Editor.dll Syntax public class NetworkWriterPerformance : object Methods | Improve this Doc View Source RunWriteInt32() Declaration public void RunWriteInt32() | Improve this Doc View Source RunWriteQuaternion() Declaration public void RunWriteQuaternion()"
  },
  "api/Mirror.Tests.RemoteAttrributeTest.ClientRpcOverrideTest.html": {
    "href": "api/Mirror.Tests.RemoteAttrributeTest.ClientRpcOverrideTest.html",
    "title": "Class ClientRpcOverrideTest",
    "keywords": "Class ClientRpcOverrideTest Inheritance Object RemoteTestBase ClientRpcOverrideTest Inherited Members RemoteTestBase.spawned RemoteTestBase.Setup() RemoteTestBase.TearDown() RemoteTestBase.CreateHostObject<T>(Boolean) RemoteTestBase.ProcessMessages() Namespace : Mirror.Tests.RemoteAttrributeTest Assembly : Mirror.Tests.dll Syntax public class ClientRpcOverrideTest : RemoteTestBase Methods | Improve this Doc View Source OverrideVirtualRpcIsCalled() Declaration public void OverrideVirtualRpcIsCalled() | Improve this Doc View Source OverrideVirtualWithBaseCallsBothVirtualAndBase() Declaration public void OverrideVirtualWithBaseCallsBothVirtualAndBase() | Improve this Doc View Source VirtualCommandWithNoOverrideIsCalled() Declaration public void VirtualCommandWithNoOverrideIsCalled() | Improve this Doc View Source VirtualRpcIsCalled() Declaration public void VirtualRpcIsCalled()"
  },
  "api/Mirror.Tests.Runtime.SceneObjectSpawningTests.html": {
    "href": "api/Mirror.Tests.Runtime.SceneObjectSpawningTests.html",
    "title": "Class SceneObjectSpawningTests",
    "keywords": "Class SceneObjectSpawningTests Inheritance Object SceneObjectSpawningTests Namespace : Mirror.Tests.Runtime Assembly : Mirror.Tests.Runtime.dll Syntax public class SceneObjectSpawningTests : object Methods | Improve this Doc View Source CallingInstantiateOnASceneObjectGivesAHelpfulError() Declaration public IEnumerator CallingInstantiateOnASceneObjectGivesAHelpfulError() Returns Type Description IEnumerator | Improve this Doc View Source CallingInstantiateOnASceneObjectMutlipleTimesGivesAHelpfulErrorEachTime() Declaration public IEnumerator CallingInstantiateOnASceneObjectMutlipleTimesGivesAHelpfulErrorEachTime() Returns Type Description IEnumerator | Improve this Doc View Source Setup() Declaration public IEnumerator Setup() Returns Type Description IEnumerator | Improve this Doc View Source TearDown() Declaration public IEnumerator TearDown() Returns Type Description IEnumerator"
  },
  "api/Mirror.Cloud.Example.ServerListManager.html": {
    "href": "api/Mirror.Cloud.Example.ServerListManager.html",
    "title": "Class ServerListManager",
    "keywords": "Class ServerListManager Uses the ApiConnector on NetworkManager to update the Server list Inheritance Object ServerListManager Namespace : Mirror.Cloud.Example Assembly : Mirror.Examples.Cloud.GUI.dll Syntax public class ServerListManager : MonoBehaviour Methods | Improve this Doc View Source RefreshButtonHandler() Declaration public void RefreshButtonHandler() | Improve this Doc View Source StartServerButtonHandler() Declaration public void StartServerButtonHandler()"
  },
  "api/Mirror.Cloud.MatchFoundEvent.html": {
    "href": "api/Mirror.Cloud.MatchFoundEvent.html",
    "title": "Class MatchFoundEvent",
    "keywords": "Class MatchFoundEvent Inheritance Object MatchFoundEvent Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public class MatchFoundEvent : UnityEvent<ServerJson>"
  },
  "api/Mirror.Cloud.Examples.Pong.Player.html": {
    "href": "api/Mirror.Cloud.Examples.Pong.Player.html",
    "title": "Class Player",
    "keywords": "Class Player Inheritance Object NetworkBehaviour Player Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Cloud.Examples.Pong Assembly : Mirror.Examples.Cloud.Pong.dll Syntax public class Player : NetworkBehaviour Fields | Improve this Doc View Source rigidbody2d Declaration public Rigidbody2D rigidbody2d Field Value Type Description Rigidbody2D | Improve this Doc View Source speed Declaration public float speed Field Value Type Description Single"
  },
  "api/Mirror.NetworkTime.html": {
    "href": "api/Mirror.NetworkTime.html",
    "title": "Class NetworkTime",
    "keywords": "Class NetworkTime Synchronize time between the server and the clients Inheritance Object NetworkTime Namespace : Mirror Assembly : Mirror.dll Syntax public static class NetworkTime : object Fields | Improve this Doc View Source PingFrequency how often are we sending ping messages used to calculate network time and RTT Declaration public static float PingFrequency Field Value Type Description Single | Improve this Doc View Source PingWindowSize average out the last few results from Ping Declaration public static int PingWindowSize Field Value Type Description Int32 Properties | Improve this Doc View Source offset Clock difference in seconds between the client and the server Declaration public static double offset { get; } Property Value Type Description Double Remarks Note this value is always 0 at the server | Improve this Doc View Source rtt how long in seconds does it take for a message to go to the server and come back Declaration public static double rtt { get; } Property Value Type Description Double | Improve this Doc View Source rttSd Measure the standard deviation of rtt the higher the number, the less accurate rtt is Declaration public static double rttSd { get; } Property Value Type Description Double | Improve this Doc View Source rttVar measure variance of rtt the higher the number, the less accurate rtt is Declaration public static double rttVar { get; } Property Value Type Description Double | Improve this Doc View Source time The time in seconds since the server started. Declaration public static double time { get; } Property Value Type Description Double | Improve this Doc View Source timeSd standard deviation of time. The higher the variance, the less accurate the time is Declaration public static double timeSd { get; } Property Value Type Description Double | Improve this Doc View Source timeVar Measurement of the variance of time. The higher the variance, the less accurate the time is Declaration public static double timeVar { get; } Property Value Type Description Double Methods | Improve this Doc View Source Reset() Declaration public static void Reset()"
  },
  "api/Mirror.Discovery.html": {
    "href": "api/Mirror.Discovery.html",
    "title": "Namespace Mirror.Discovery",
    "keywords": "Namespace Mirror.Discovery Classes NetworkDiscovery NetworkDiscoveryBase<Request, Response> Base implementation for Network Discovery. Extend this component to provide custom discovery with game specific data NetworkDiscovery for a sample implementation NetworkDiscoveryHUD ServerFoundUnityEvent Structs ServerRequest ServerResponse"
  },
  "api/Mirror.NetworkConnection.html": {
    "href": "api/Mirror.NetworkConnection.html",
    "title": "Class NetworkConnection",
    "keywords": "Class NetworkConnection A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. Inheritance Object NetworkConnection NetworkConnectionToClient NetworkConnectionToServer Namespace : Mirror Assembly : Mirror.dll Syntax public abstract class NetworkConnection : object Remarks A NetworkConnection corresponds to a specific connection for a host in the transport layer. It has a connectionId that is assigned by the transport layer and passed to the Initialize function. A NetworkClient has one NetworkConnection. A NetworkServerSimple manages multiple NetworkConnections. The NetworkServer has multiple \"remote\" connections and a \"local\" connection for the local client. The NetworkConnection class provides message sending and handling facilities. For sending data over a network, there are methods to send message objects, byte arrays, and NetworkWriter objects. To handle data arriving from the network, handler functions can be registered for message Ids, byte arrays can be processed by HandleBytes(), and NetworkReader object can be processed by HandleReader(). NetworkConnection objects also act as observers for networked objects. When a connection is an observer of a networked object with a NetworkIdentity, then the object will be visible to corresponding client for the connection, and incremental state changes will be sent to the client. There are many virtual functions on NetworkConnection that allow its behaviour to be customized. NetworkClient and NetworkServer can both be made to instantiate custom classes derived from NetworkConnection by setting their networkConnectionClass member variable. Fields | Improve this Doc View Source authenticationData General purpose object to hold authentication data, character selection, tokens, etc. associated with the connection for reference after Authentication completes. Declaration public object authenticationData Field Value Type Description Object | Improve this Doc View Source clientOwnedObjects A list of the NetworkIdentity objects owned by this connection. This list is read-only. This includes the player object for the connection - if it has localPlayerAutority set, and any objects spawned with local authority or set with AssignLocalAuthority. This list can be used to validate messages from clients, to ensure that clients are only trying to control objects that they own. Declaration public readonly HashSet<NetworkIdentity> clientOwnedObjects Field Value Type Description HashSet < NetworkIdentity > | Improve this Doc View Source connectionId Unique identifier for this connection that is assigned by the transport layer. Declaration public readonly int connectionId Field Value Type Description Int32 Remarks On a server, this Id is unique for every connection on the server. On a client this Id is local to the client, it is not the same as the Id on the server for this connection. Transport layers connections begin at one. So on a client with a single connection to a server, the connectionId of that connection will be one. In NetworkServer, the connectionId of the local connection is zero. Clients do not know their connectionId on the server, and do not know the connectionId of other clients on the server. | Improve this Doc View Source isAuthenticated Flag that indicates the client has been authenticated. Declaration public bool isAuthenticated Field Value Type Description Boolean | Improve this Doc View Source isReady Flag that tells if the connection has been marked as \"ready\" by a client calling ClientScene.Ready(). This property is read-only. It is set by the system on the client when ClientScene.Ready() is called, and set by the system on the server when a ready message is received from a client. A client that is ready is sent spawned objects by the server and updates to the state of spawned objects. A client that is not ready is not sent spawned objects. Declaration public bool isReady Field Value Type Description Boolean | Improve this Doc View Source lastMessageTime The last time that a message was received on this connection. This includes internal system messages (such as Commands and ClientRpc calls) and user messages. Declaration public float lastMessageTime Field Value Type Description Single | Improve this Doc View Source LocalConnectionId Declaration public const int LocalConnectionId = null Field Value Type Description Int32 Properties | Improve this Doc View Source address The IP address / URL / FQDN associated with the connection. Can be useful for a game master to do IP Bans etc. Declaration public abstract string address { get; } Property Value Type Description String | Improve this Doc View Source identity The NetworkIdentity for this connection. Declaration public NetworkIdentity identity { get; } Property Value Type Description NetworkIdentity Methods | Improve this Doc View Source Disconnect() Disconnects this connection. Declaration public abstract void Disconnect() | Improve this Doc View Source InvokeHandler<T>(T, Int32) This function invokes the registered handler function for a message. Network connections used by the NetworkClient and NetworkServer use this function for handling network messages. Declaration public bool InvokeHandler<T>(T msg, int channelId) where T : struct, NetworkMessage Parameters Type Name Description T msg The message object to process. Int32 channelId Returns Type Description Boolean Returns true if the handler was successfully invoked Type Parameters Name Description T The message type to unregister. | Improve this Doc View Source Send<T>(T, Int32) This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel. Declaration public void Send<T>(T msg, int channelId = null) where T : struct, NetworkMessage Parameters Type Name Description T msg The message to send. Int32 channelId The transport layer channel to send on. Type Parameters Name Description T The message type to unregister. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source ValidatePacketSize(ArraySegment<Byte>, Int32) Declaration protected static bool ValidatePacketSize(ArraySegment<byte> segment, int channelId) Parameters Type Name Description ArraySegment < Byte > segment Int32 channelId Returns Type Description Boolean"
  },
  "api/Mirror.Weaver.GenerateWriterException.html": {
    "href": "api/Mirror.Weaver.GenerateWriterException.html",
    "title": "Class GenerateWriterException",
    "keywords": "Class GenerateWriterException Inheritance Object WeaverException GenerateWriterException Inherited Members WeaverException.MemberReference Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public class GenerateWriterException : WeaverException Constructors | Improve this Doc View Source GenerateWriterException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Declaration protected GenerateWriterException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo serializationInfo System.Runtime.Serialization.StreamingContext streamingContext | Improve this Doc View Source GenerateWriterException(String, MemberReference) Declaration public GenerateWriterException(string message, MemberReference member) Parameters Type Name Description String message MemberReference member"
  },
  "api/Mirror.Tests.ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload.html": {
    "href": "api/Mirror.Tests.ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload.html",
    "title": "Enum ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload",
    "keywords": "Enum ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload Allows TestCases to call different overloads for RegisterPrefab. Without this we would need duplicate tests for each overload Namespace : Mirror.Tests Assembly : Mirror.Tests.Common.dll Syntax public enum RegisterPrefabOverload : int Fields Name Description Prefab Prefab_NewAssetId Prefab_SpawnDelegate Prefab_SpawnDelegate_NewAssetId Prefab_SpawnHandlerDelegate Prefab_SpawnHandlerDelegate_NewAssetId WithAssetId WithHandler"
  },
  "api/Mirror.Cloud.Logger.html": {
    "href": "api/Mirror.Cloud.Logger.html",
    "title": "Class Logger",
    "keywords": "Class Logger Inheritance Object Logger Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public static class Logger : object Fields | Improve this Doc View Source VerboseLogging Declaration public static bool VerboseLogging Field Value Type Description Boolean Methods | Improve this Doc View Source LogRequest(String, String, Boolean, String) Declaration public static void LogRequest(string page, string method, bool hasJson, string json) Parameters Type Name Description String page String method Boolean hasJson String json | Improve this Doc View Source LogResponse(UnityWebRequest) Declaration public static void LogResponse(UnityWebRequest statusRequest) Parameters Type Name Description UnityWebRequest statusRequest"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_string_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_string_Test.html",
    "title": "Class ArraySegment_string_Test",
    "keywords": "Class ArraySegment_string_Test Inheritance Object ArraySegment_string_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class ArraySegment_string_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Telepathy.Common.html": {
    "href": "api/Telepathy.Common.html",
    "title": "Class Common",
    "keywords": "Class Common Inheritance Object Common Client Server Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Telepathy Assembly : Telepathy.dll Syntax public abstract class Common Fields | Improve this Doc View Source MaxMessageSize Declaration public int MaxMessageSize Field Value Type Description Int32 | Improve this Doc View Source messageQueueSizeWarning Declaration public static int messageQueueSizeWarning Field Value Type Description Int32 | Improve this Doc View Source NoDelay Declaration public bool NoDelay Field Value Type Description Boolean | Improve this Doc View Source receiveQueue Declaration protected ConcurrentQueue<Message> receiveQueue Field Value Type Description ConcurrentQueue < Message > | Improve this Doc View Source SendTimeout Declaration public int SendTimeout Field Value Type Description Int32 Properties | Improve this Doc View Source ReceiveQueueCount Declaration public int ReceiveQueueCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetNextMessage(out Message) Declaration public bool GetNextMessage(out Message message) Parameters Type Name Description Message message Returns Type Description Boolean | Improve this Doc View Source ReadMessageBlocking(NetworkStream, Int32, out Byte[]) Declaration protected static bool ReadMessageBlocking(NetworkStream stream, int MaxMessageSize, out byte[] content) Parameters Type Name Description NetworkStream stream Int32 MaxMessageSize Byte [] content Returns Type Description Boolean | Improve this Doc View Source ReceiveLoop(Int32, TcpClient, ConcurrentQueue<Message>, Int32) Declaration protected static void ReceiveLoop(int connectionId, TcpClient client, ConcurrentQueue<Message> receiveQueue, int MaxMessageSize) Parameters Type Name Description Int32 connectionId TcpClient client ConcurrentQueue < Message > receiveQueue Int32 MaxMessageSize | Improve this Doc View Source SendLoop(Int32, TcpClient, SafeQueue<Byte[]>, ManualResetEvent) Declaration protected static void SendLoop(int connectionId, TcpClient client, SafeQueue<byte[]> sendQueue, ManualResetEvent sendPending) Parameters Type Name Description Int32 connectionId TcpClient client SafeQueue < Byte []> sendQueue ManualResetEvent sendPending | Improve this Doc View Source SendMessagesBlocking(NetworkStream, Byte[][]) Declaration protected static bool SendMessagesBlocking(NetworkStream stream, byte[][] messages) Parameters Type Name Description NetworkStream stream Byte [][] messages Returns Type Description Boolean"
  },
  "api/Mirror.Cloud.Examples.Pong.BallManager.html": {
    "href": "api/Mirror.Cloud.Examples.Pong.BallManager.html",
    "title": "Class BallManager",
    "keywords": "Class BallManager Inheritance Object NetworkBehaviour BallManager Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Cloud.Examples.Pong Assembly : Mirror.Examples.Cloud.Pong.dll Syntax public class BallManager : NetworkBehaviour Methods | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer() | Improve this Doc View Source OnStopServer() Declaration public override void OnStopServer() Overrides NetworkBehaviour.OnStopServer()"
  },
  "api/Mirror.Tests.CustomAttrributeTest.html": {
    "href": "api/Mirror.Tests.CustomAttrributeTest.html",
    "title": "Class CustomAttrributeTest",
    "keywords": "Class CustomAttrributeTest Inheritance Object CustomAttrributeTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class CustomAttrributeTest : object Methods | Improve this Doc View Source ClientRPCAttributeTest() Declaration public void ClientRPCAttributeTest() | Improve this Doc View Source CommandAttributeTest() Declaration public void CommandAttributeTest() | Improve this Doc View Source SyncVarAttributeTest() Declaration public void SyncVarAttributeTest() | Improve this Doc View Source TargetRPCAttributeTest() Declaration public void TargetRPCAttributeTest()"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.Array_ClassWithNoConstructor_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.Array_ClassWithNoConstructor_Test.Message.html",
    "title": "Struct Array_ClassWithNoConstructor_Test.Message",
    "keywords": "Struct Array_ClassWithNoConstructor_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public ClassWithNoConstructor[] collection Field Value Type Description ClassWithNoConstructor [] Implements NetworkMessage"
  },
  "api/Mirror.Tests.Generated.Attributes.AttributeBehaviour_NetworkBehaviour.html": {
    "href": "api/Mirror.Tests.Generated.Attributes.AttributeBehaviour_NetworkBehaviour.html",
    "title": "Class AttributeBehaviour_NetworkBehaviour",
    "keywords": "Class AttributeBehaviour_NetworkBehaviour Inheritance Object NetworkBehaviour AttributeBehaviour_NetworkBehaviour Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests.Generated.Attributes Assembly : Mirror.Tests.dll Syntax public class AttributeBehaviour_NetworkBehaviour : NetworkBehaviour Fields | Improve this Doc View Source Expected_bool Declaration public static readonly bool Expected_bool Field Value Type Description Boolean | Improve this Doc View Source Expected_byte Declaration public static readonly byte Expected_byte Field Value Type Description Byte | Improve this Doc View Source Expected_char Declaration public static readonly char Expected_char Field Value Type Description Char | Improve this Doc View Source Expected_ClassWithConstructor Declaration public static readonly ClassWithConstructor Expected_ClassWithConstructor Field Value Type Description ClassWithConstructor | Improve this Doc View Source Expected_ClassWithNoConstructor Declaration public static readonly ClassWithNoConstructor Expected_ClassWithNoConstructor Field Value Type Description ClassWithNoConstructor | Improve this Doc View Source Expected_double Declaration public static readonly double Expected_double Field Value Type Description Double | Improve this Doc View Source Expected_float Declaration public static readonly float Expected_float Field Value Type Description Single | Improve this Doc View Source Expected_int Declaration public static readonly int Expected_int Field Value Type Description Int32 | Improve this Doc View Source Expected_long Declaration public static readonly long Expected_long Field Value Type Description Int64 | Improve this Doc View Source Expected_ulong Declaration public static readonly ulong Expected_ulong Field Value Type Description UInt64 | Improve this Doc View Source Expected_Vector3 Declaration public static readonly Vector3 Expected_Vector3 Field Value Type Description Vector3 Methods | Improve this Doc View Source Client_bool_Function() Declaration public bool Client_bool_Function() Returns Type Description Boolean | Improve this Doc View Source Client_bool_out_Function(out Boolean) Declaration public void Client_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source Client_byte_Function() Declaration public byte Client_byte_Function() Returns Type Description Byte | Improve this Doc View Source Client_byte_out_Function(out Byte) Declaration public void Client_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source Client_char_Function() Declaration public char Client_char_Function() Returns Type Description Char | Improve this Doc View Source Client_char_out_Function(out Char) Declaration public void Client_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source Client_ClassWithConstructor_Function() Declaration public ClassWithConstructor Client_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source Client_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void Client_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source Client_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor Client_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source Client_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void Client_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source Client_double_Function() Declaration public double Client_double_Function() Returns Type Description Double | Improve this Doc View Source Client_double_out_Function(out Double) Declaration public void Client_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source Client_float_Function() Declaration public float Client_float_Function() Returns Type Description Single | Improve this Doc View Source Client_float_out_Function(out Single) Declaration public void Client_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source Client_int_Function() Declaration public int Client_int_Function() Returns Type Description Int32 | Improve this Doc View Source Client_int_out_Function(out Int32) Declaration public void Client_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source Client_long_Function() Declaration public long Client_long_Function() Returns Type Description Int64 | Improve this Doc View Source Client_long_out_Function(out Int64) Declaration public void Client_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source Client_ulong_Function() Declaration public ulong Client_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source Client_ulong_out_Function(out UInt64) Declaration public void Client_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source Client_Vector3_Function() Declaration public Vector3 Client_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source Client_Vector3_out_Function(out Vector3) Declaration public void Client_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value | Improve this Doc View Source ClientCallback_bool_Function() Declaration public bool ClientCallback_bool_Function() Returns Type Description Boolean | Improve this Doc View Source ClientCallback_bool_out_Function(out Boolean) Declaration public void ClientCallback_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source ClientCallback_byte_Function() Declaration public byte ClientCallback_byte_Function() Returns Type Description Byte | Improve this Doc View Source ClientCallback_byte_out_Function(out Byte) Declaration public void ClientCallback_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source ClientCallback_char_Function() Declaration public char ClientCallback_char_Function() Returns Type Description Char | Improve this Doc View Source ClientCallback_char_out_Function(out Char) Declaration public void ClientCallback_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source ClientCallback_ClassWithConstructor_Function() Declaration public ClassWithConstructor ClientCallback_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source ClientCallback_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void ClientCallback_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor ClientCallback_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void ClientCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source ClientCallback_double_Function() Declaration public double ClientCallback_double_Function() Returns Type Description Double | Improve this Doc View Source ClientCallback_double_out_Function(out Double) Declaration public void ClientCallback_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source ClientCallback_float_Function() Declaration public float ClientCallback_float_Function() Returns Type Description Single | Improve this Doc View Source ClientCallback_float_out_Function(out Single) Declaration public void ClientCallback_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source ClientCallback_int_Function() Declaration public int ClientCallback_int_Function() Returns Type Description Int32 | Improve this Doc View Source ClientCallback_int_out_Function(out Int32) Declaration public void ClientCallback_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source ClientCallback_long_Function() Declaration public long ClientCallback_long_Function() Returns Type Description Int64 | Improve this Doc View Source ClientCallback_long_out_Function(out Int64) Declaration public void ClientCallback_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source ClientCallback_ulong_Function() Declaration public ulong ClientCallback_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source ClientCallback_ulong_out_Function(out UInt64) Declaration public void ClientCallback_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source ClientCallback_Vector3_Function() Declaration public Vector3 ClientCallback_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source ClientCallback_Vector3_out_Function(out Vector3) Declaration public void ClientCallback_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value | Improve this Doc View Source Server_bool_Function() Declaration public bool Server_bool_Function() Returns Type Description Boolean | Improve this Doc View Source Server_bool_out_Function(out Boolean) Declaration public void Server_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source Server_byte_Function() Declaration public byte Server_byte_Function() Returns Type Description Byte | Improve this Doc View Source Server_byte_out_Function(out Byte) Declaration public void Server_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source Server_char_Function() Declaration public char Server_char_Function() Returns Type Description Char | Improve this Doc View Source Server_char_out_Function(out Char) Declaration public void Server_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source Server_ClassWithConstructor_Function() Declaration public ClassWithConstructor Server_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source Server_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void Server_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source Server_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor Server_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source Server_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void Server_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source Server_double_Function() Declaration public double Server_double_Function() Returns Type Description Double | Improve this Doc View Source Server_double_out_Function(out Double) Declaration public void Server_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source Server_float_Function() Declaration public float Server_float_Function() Returns Type Description Single | Improve this Doc View Source Server_float_out_Function(out Single) Declaration public void Server_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source Server_int_Function() Declaration public int Server_int_Function() Returns Type Description Int32 | Improve this Doc View Source Server_int_out_Function(out Int32) Declaration public void Server_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source Server_long_Function() Declaration public long Server_long_Function() Returns Type Description Int64 | Improve this Doc View Source Server_long_out_Function(out Int64) Declaration public void Server_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source Server_ulong_Function() Declaration public ulong Server_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source Server_ulong_out_Function(out UInt64) Declaration public void Server_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source Server_Vector3_Function() Declaration public Vector3 Server_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source Server_Vector3_out_Function(out Vector3) Declaration public void Server_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value | Improve this Doc View Source ServerCallback_bool_Function() Declaration public bool ServerCallback_bool_Function() Returns Type Description Boolean | Improve this Doc View Source ServerCallback_bool_out_Function(out Boolean) Declaration public void ServerCallback_bool_out_Function(out bool value) Parameters Type Name Description Boolean value | Improve this Doc View Source ServerCallback_byte_Function() Declaration public byte ServerCallback_byte_Function() Returns Type Description Byte | Improve this Doc View Source ServerCallback_byte_out_Function(out Byte) Declaration public void ServerCallback_byte_out_Function(out byte value) Parameters Type Name Description Byte value | Improve this Doc View Source ServerCallback_char_Function() Declaration public char ServerCallback_char_Function() Returns Type Description Char | Improve this Doc View Source ServerCallback_char_out_Function(out Char) Declaration public void ServerCallback_char_out_Function(out char value) Parameters Type Name Description Char value | Improve this Doc View Source ServerCallback_ClassWithConstructor_Function() Declaration public ClassWithConstructor ServerCallback_ClassWithConstructor_Function() Returns Type Description ClassWithConstructor | Improve this Doc View Source ServerCallback_ClassWithConstructor_out_Function(out ClassWithConstructor) Declaration public void ServerCallback_ClassWithConstructor_out_Function(out ClassWithConstructor value) Parameters Type Name Description ClassWithConstructor value | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_Function() Declaration public ClassWithNoConstructor ServerCallback_ClassWithNoConstructor_Function() Returns Type Description ClassWithNoConstructor | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor) Declaration public void ServerCallback_ClassWithNoConstructor_out_Function(out ClassWithNoConstructor value) Parameters Type Name Description ClassWithNoConstructor value | Improve this Doc View Source ServerCallback_double_Function() Declaration public double ServerCallback_double_Function() Returns Type Description Double | Improve this Doc View Source ServerCallback_double_out_Function(out Double) Declaration public void ServerCallback_double_out_Function(out double value) Parameters Type Name Description Double value | Improve this Doc View Source ServerCallback_float_Function() Declaration public float ServerCallback_float_Function() Returns Type Description Single | Improve this Doc View Source ServerCallback_float_out_Function(out Single) Declaration public void ServerCallback_float_out_Function(out float value) Parameters Type Name Description Single value | Improve this Doc View Source ServerCallback_int_Function() Declaration public int ServerCallback_int_Function() Returns Type Description Int32 | Improve this Doc View Source ServerCallback_int_out_Function(out Int32) Declaration public void ServerCallback_int_out_Function(out int value) Parameters Type Name Description Int32 value | Improve this Doc View Source ServerCallback_long_Function() Declaration public long ServerCallback_long_Function() Returns Type Description Int64 | Improve this Doc View Source ServerCallback_long_out_Function(out Int64) Declaration public void ServerCallback_long_out_Function(out long value) Parameters Type Name Description Int64 value | Improve this Doc View Source ServerCallback_ulong_Function() Declaration public ulong ServerCallback_ulong_Function() Returns Type Description UInt64 | Improve this Doc View Source ServerCallback_ulong_out_Function(out UInt64) Declaration public void ServerCallback_ulong_out_Function(out ulong value) Parameters Type Name Description UInt64 value | Improve this Doc View Source ServerCallback_Vector3_Function() Declaration public Vector3 ServerCallback_Vector3_Function() Returns Type Description Vector3 | Improve this Doc View Source ServerCallback_Vector3_out_Function(out Vector3) Declaration public void ServerCallback_Vector3_out_Function(out Vector3 value) Parameters Type Name Description Vector3 value"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.Array_string_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.Array_string_Test.Message.html",
    "title": "Struct Array_string_Test.Message",
    "keywords": "Struct Array_string_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public string[] collection Field Value Type Description String [] Implements NetworkMessage"
  },
  "api/Mirror.Tests.Generated.Attributes.AttributeTest_ClassWithNoConstructor.html": {
    "href": "api/Mirror.Tests.Generated.Attributes.AttributeTest_ClassWithNoConstructor.html",
    "title": "Class AttributeTest_ClassWithNoConstructor",
    "keywords": "Class AttributeTest_ClassWithNoConstructor Inheritance Object AttributeTest_ClassWithNoConstructor Namespace : Mirror.Tests.Generated.Attributes Assembly : Mirror.Tests.dll Syntax public class AttributeTest_ClassWithNoConstructor : object Methods | Improve this Doc View Source Client_bool_returnsValue(Boolean) Declaration public void Client_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_bool_setsOutValue(Boolean) Declaration public void Client_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_byte_returnsValue(Boolean) Declaration public void Client_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_byte_setsOutValue(Boolean) Declaration public void Client_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_char_returnsValue(Boolean) Declaration public void Client_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_char_setsOutValue(Boolean) Declaration public void Client_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithConstructor_returnsValue(Boolean) Declaration public void Client_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithConstructor_setsOutValue(Boolean) Declaration public void Client_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void Client_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void Client_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_double_returnsValue(Boolean) Declaration public void Client_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_double_setsOutValue(Boolean) Declaration public void Client_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_float_returnsValue(Boolean) Declaration public void Client_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_float_setsOutValue(Boolean) Declaration public void Client_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_int_returnsValue(Boolean) Declaration public void Client_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_int_setsOutValue(Boolean) Declaration public void Client_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_long_returnsValue(Boolean) Declaration public void Client_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_long_setsOutValue(Boolean) Declaration public void Client_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ulong_returnsValue(Boolean) Declaration public void Client_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_ulong_setsOutValue(Boolean) Declaration public void Client_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_Vector3_returnsValue(Boolean) Declaration public void Client_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Client_Vector3_setsOutValue(Boolean) Declaration public void Client_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_bool_returnsValue(Boolean) Declaration public void ClientCallback_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_bool_setsOutValue(Boolean) Declaration public void ClientCallback_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_byte_returnsValue(Boolean) Declaration public void ClientCallback_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_byte_setsOutValue(Boolean) Declaration public void ClientCallback_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_char_returnsValue(Boolean) Declaration public void ClientCallback_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_char_setsOutValue(Boolean) Declaration public void ClientCallback_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithConstructor_returnsValue(Boolean) Declaration public void ClientCallback_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithConstructor_setsOutValue(Boolean) Declaration public void ClientCallback_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void ClientCallback_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void ClientCallback_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_double_returnsValue(Boolean) Declaration public void ClientCallback_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_double_setsOutValue(Boolean) Declaration public void ClientCallback_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_float_returnsValue(Boolean) Declaration public void ClientCallback_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_float_setsOutValue(Boolean) Declaration public void ClientCallback_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_int_returnsValue(Boolean) Declaration public void ClientCallback_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_int_setsOutValue(Boolean) Declaration public void ClientCallback_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_long_returnsValue(Boolean) Declaration public void ClientCallback_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_long_setsOutValue(Boolean) Declaration public void ClientCallback_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ulong_returnsValue(Boolean) Declaration public void ClientCallback_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_ulong_setsOutValue(Boolean) Declaration public void ClientCallback_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_Vector3_returnsValue(Boolean) Declaration public void ClientCallback_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ClientCallback_Vector3_setsOutValue(Boolean) Declaration public void ClientCallback_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_bool_returnsValue(Boolean) Declaration public void Server_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_bool_setsOutValue(Boolean) Declaration public void Server_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_byte_returnsValue(Boolean) Declaration public void Server_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_byte_setsOutValue(Boolean) Declaration public void Server_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_char_returnsValue(Boolean) Declaration public void Server_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_char_setsOutValue(Boolean) Declaration public void Server_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithConstructor_returnsValue(Boolean) Declaration public void Server_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithConstructor_setsOutValue(Boolean) Declaration public void Server_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void Server_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void Server_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_double_returnsValue(Boolean) Declaration public void Server_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_double_setsOutValue(Boolean) Declaration public void Server_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_float_returnsValue(Boolean) Declaration public void Server_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_float_setsOutValue(Boolean) Declaration public void Server_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_int_returnsValue(Boolean) Declaration public void Server_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_int_setsOutValue(Boolean) Declaration public void Server_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_long_returnsValue(Boolean) Declaration public void Server_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_long_setsOutValue(Boolean) Declaration public void Server_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ulong_returnsValue(Boolean) Declaration public void Server_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_ulong_setsOutValue(Boolean) Declaration public void Server_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_Vector3_returnsValue(Boolean) Declaration public void Server_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source Server_Vector3_setsOutValue(Boolean) Declaration public void Server_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_bool_returnsValue(Boolean) Declaration public void ServerCallback_bool_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_bool_setsOutValue(Boolean) Declaration public void ServerCallback_bool_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_byte_returnsValue(Boolean) Declaration public void ServerCallback_byte_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_byte_setsOutValue(Boolean) Declaration public void ServerCallback_byte_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_char_returnsValue(Boolean) Declaration public void ServerCallback_char_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_char_setsOutValue(Boolean) Declaration public void ServerCallback_char_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithConstructor_returnsValue(Boolean) Declaration public void ServerCallback_ClassWithConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithConstructor_setsOutValue(Boolean) Declaration public void ServerCallback_ClassWithConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_returnsValue(Boolean) Declaration public void ServerCallback_ClassWithNoConstructor_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ClassWithNoConstructor_setsOutValue(Boolean) Declaration public void ServerCallback_ClassWithNoConstructor_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_double_returnsValue(Boolean) Declaration public void ServerCallback_double_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_double_setsOutValue(Boolean) Declaration public void ServerCallback_double_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_float_returnsValue(Boolean) Declaration public void ServerCallback_float_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_float_setsOutValue(Boolean) Declaration public void ServerCallback_float_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_int_returnsValue(Boolean) Declaration public void ServerCallback_int_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_int_setsOutValue(Boolean) Declaration public void ServerCallback_int_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_long_returnsValue(Boolean) Declaration public void ServerCallback_long_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_long_setsOutValue(Boolean) Declaration public void ServerCallback_long_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ulong_returnsValue(Boolean) Declaration public void ServerCallback_ulong_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_ulong_setsOutValue(Boolean) Declaration public void ServerCallback_ulong_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_Vector3_returnsValue(Boolean) Declaration public void ServerCallback_Vector3_returnsValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source ServerCallback_Vector3_setsOutValue(Boolean) Declaration public void ServerCallback_Vector3_setsOutValue(bool active) Parameters Type Name Description Boolean active | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.SyncListString.html": {
    "href": "api/Mirror.SyncListString.html",
    "title": "Class SyncListString",
    "keywords": "Class SyncListString Inheritance Object SyncList < String > SyncListString Implements IReadOnlyList < String > SyncObject Inherited Members SyncList<String>.Count SyncList<String>.IsReadOnly SyncList<String>.Callback SyncList<String>.IsDirty SyncList<String>.Flush() SyncList<String>.Reset() SyncList<String>.OnSerializeAll(NetworkWriter) SyncList<String>.OnSerializeDelta(NetworkWriter) SyncList<String>.OnDeserializeAll(NetworkReader) SyncList<String>.OnDeserializeDelta(NetworkReader) SyncList<String>.Add(String) SyncList<String>.AddRange(IEnumerable<String>) SyncList<String>.Clear() SyncList<String>.Contains(String) SyncList<String>.CopyTo(String[], Int32) SyncList<String>.IndexOf(String) SyncList<String>.FindIndex(Predicate<String>) SyncList<String>.Find(Predicate<String>) SyncList<String>.FindAll(Predicate<String>) SyncList<String>.Insert(Int32, String) SyncList<String>.InsertRange(Int32, IEnumerable<String>) SyncList<String>.Remove(String) SyncList<String>.RemoveAt(Int32) SyncList<String>.RemoveAll(Predicate<String>) SyncList<String>.Item[Int32] SyncList<String>.GetEnumerator() Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncListString : SyncList<string>, IReadOnlyList<string>, SyncObject Implements IReadOnlyList<> SyncObject"
  },
  "api/Mirror.Tests.Runtime.html": {
    "href": "api/Mirror.Tests.Runtime.html",
    "title": "Namespace Mirror.Tests.Runtime",
    "keywords": "Namespace Mirror.Tests.Runtime Classes HostSetup NetworkIdentityTests NetworkManagerTests NetworkServerRuntimeTest NetworkServerWithHostRuntimeTest SceneObjectSpawningTests"
  },
  "api/Mirror.NetworkWriter.html": {
    "href": "api/Mirror.NetworkWriter.html",
    "title": "Class NetworkWriter",
    "keywords": "Class NetworkWriter Binary stream Writer. Supports simple types, buffers, arrays, structs, and nested types Use GetWriter() to reduce memory allocation Inheritance Object NetworkWriter PooledNetworkWriter Namespace : Mirror Assembly : Mirror.dll Syntax public class NetworkWriter : object Fields | Improve this Doc View Source MaxStringLength Declaration public const int MaxStringLength = null Field Value Type Description Int32 Properties | Improve this Doc View Source Length Number of bytes writen to the buffer Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Position Next position to write to the buffer Declaration public int Position { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Reset() Reset both the position and length of the stream Declaration public void Reset() Remarks Leaves the capacity the same so that we can reuse this writer without extra allocations | Improve this Doc View Source SetLength(Int32) Sets length, moves position if it is greater than new length Declaration public void SetLength(int newLength) Parameters Type Name Description Int32 newLength Remarks Zeros out any extra length created by setlength | Improve this Doc View Source ToArray() Copys buffer to new array with the size of Length Declaration public byte[] ToArray() Returns Type Description Byte [] all the data we have written, regardless of the current position | Improve this Doc View Source ToArraySegment() Create an ArraySegment using the buffer and Length Dont modify the NetworkWriter while using the ArraySegment as this can overwrite the bytes Use ToArraySegment instead of ToArray to avoid allocations Declaration public ArraySegment<byte> ToArraySegment() Returns Type Description ArraySegment < Byte > all the data we have written, regardless of the current position | Improve this Doc View Source Write<T>(T) Writes any type that mirror supports Declaration public void Write<T>(T value) Parameters Type Name Description T value Type Parameters Name Description T | Improve this Doc View Source WriteBlittable<T>(T) Copies blittable type to buffer This is extremely fast, but only works for blittable types. Note: WriteBlittable assumes same endianness for server and client. All Unity 2018+ platforms are little endian. => run NetworkWriterTests.BlittableOnThisPlatform() to verify! Declaration public void WriteBlittable<T>(T value) where T : struct Parameters Type Name Description T value Type Parameters Name Description T Needs to be unmanaged, see unmanaged types Remarks See Blittable and Non-Blittable Types for more info. | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Copys bytes from given array to Mirror.NetworkWriter.buffer useful for byte arrays with consistent size, where the reader knows how many to read (like a packet opcode that's always the same) Declaration public void WriteBytes(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Extension Methods ReadWrite.WriteSomeData(NetworkWriter, SomeDataWithWriter) MockQuestReaderWriter.WriteQuest(NetworkWriter, MockQuest) MyCustomEnumReadWrite.WriteMyCustomEnum(NetworkWriter, EnumReadWriteTests.MyCustomEnum) NetworkWriterExtensions.WriteByte(NetworkWriter, Byte) NetworkWriterExtensions.WriteSByte(NetworkWriter, SByte) NetworkWriterExtensions.WriteChar(NetworkWriter, Char) NetworkWriterExtensions.WriteBoolean(NetworkWriter, Boolean) NetworkWriterExtensions.WriteUInt16(NetworkWriter, UInt16) NetworkWriterExtensions.WriteInt16(NetworkWriter, Int16) NetworkWriterExtensions.WriteUInt32(NetworkWriter, UInt32) NetworkWriterExtensions.WriteInt32(NetworkWriter, Int32) NetworkWriterExtensions.WriteUInt64(NetworkWriter, UInt64) NetworkWriterExtensions.WriteInt64(NetworkWriter, Int64) NetworkWriterExtensions.WriteSingle(NetworkWriter, Single) NetworkWriterExtensions.WriteDouble(NetworkWriter, Double) NetworkWriterExtensions.WriteDecimal(NetworkWriter, Decimal) NetworkWriterExtensions.WriteString(NetworkWriter, String) NetworkWriterExtensions.WriteBytesAndSize(NetworkWriter, Byte[], Int32, Int32) NetworkWriterExtensions.WriteBytesAndSize(NetworkWriter, Byte[]) NetworkWriterExtensions.WriteBytesAndSizeSegment(NetworkWriter, ArraySegment<Byte>) NetworkWriterExtensions.WriteVector2(NetworkWriter, Vector2) NetworkWriterExtensions.WriteVector3(NetworkWriter, Vector3) NetworkWriterExtensions.WriteVector4(NetworkWriter, Vector4) NetworkWriterExtensions.WriteVector2Int(NetworkWriter, Vector2Int) NetworkWriterExtensions.WriteVector3Int(NetworkWriter, Vector3Int) NetworkWriterExtensions.WriteColor(NetworkWriter, Color) NetworkWriterExtensions.WriteColor32(NetworkWriter, Color32) NetworkWriterExtensions.WriteQuaternion(NetworkWriter, Quaternion) NetworkWriterExtensions.WriteRect(NetworkWriter, Rect) NetworkWriterExtensions.WritePlane(NetworkWriter, Plane) NetworkWriterExtensions.WriteRay(NetworkWriter, Ray) NetworkWriterExtensions.WriteMatrix4x4(NetworkWriter, Matrix4x4) NetworkWriterExtensions.WriteGuid(NetworkWriter, Guid) NetworkWriterExtensions.WriteNetworkIdentity(NetworkWriter, NetworkIdentity) NetworkWriterExtensions.WriteTransform(NetworkWriter, Transform) NetworkWriterExtensions.WriteGameObject(NetworkWriter, GameObject) NetworkWriterExtensions.WriteUri(NetworkWriter, Uri) NetworkWriterExtensions.WriteList<T>(NetworkWriter, List<T>) NetworkWriterExtensions.WriteArray<T>(NetworkWriter, T[]) NetworkWriterExtensions.WriteArraySegment<T>(NetworkWriter, ArraySegment<T>)"
  },
  "api/Mirror.Cloud.BaseApi.html": {
    "href": "api/Mirror.Cloud.BaseApi.html",
    "title": "Class BaseApi",
    "keywords": "Class BaseApi Inheritance Object BaseApi ListServerBaseApi Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public abstract class BaseApi : object Constructors | Improve this Doc View Source BaseApi(ICoroutineRunner, IRequestCreator) Declaration protected BaseApi(ICoroutineRunner runner, IRequestCreator requestCreator) Parameters Type Name Description ICoroutineRunner runner IRequestCreator requestCreator Fields | Improve this Doc View Source requestCreator Declaration protected readonly IRequestCreator requestCreator Field Value Type Description IRequestCreator | Improve this Doc View Source runner Declaration protected readonly ICoroutineRunner runner Field Value Type Description ICoroutineRunner"
  },
  "api/Mirror.Tests.NetworkServerTest.html": {
    "href": "api/Mirror.Tests.NetworkServerTest.html",
    "title": "Class NetworkServerTest",
    "keywords": "Class NetworkServerTest Inheritance Object NetworkServerTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkServerTest : object Methods | Improve this Doc View Source ActivateHostSceneCallsOnStartClient() Declaration public void ActivateHostSceneCallsOnStartClient() | Improve this Doc View Source AddConnectionTest() Declaration public void AddConnectionTest() | Improve this Doc View Source CommandMessageCallsCommandTest() Declaration public void CommandMessageCallsCommandTest() | Improve this Doc View Source ConnectDuplicateConnectionIdsTest() Declaration public void ConnectDuplicateConnectionIdsTest() | Improve this Doc View Source ConnectionsDictTest() Declaration public void ConnectionsDictTest() | Improve this Doc View Source ConnectMessageHandlerTest() Declaration public void ConnectMessageHandlerTest() | Improve this Doc View Source DisconnectAllConnectionsTest() Declaration public void DisconnectAllConnectionsTest() | Improve this Doc View Source DisconnectAllTest() Declaration public void DisconnectAllTest() | Improve this Doc View Source DisconnectMessageHandlerTest() Declaration public void DisconnectMessageHandlerTest() | Improve this Doc View Source GetNetworkIdentityErrorIfNotFound() Declaration public void GetNetworkIdentityErrorIfNotFound() | Improve this Doc View Source GetNetworkIdentityShouldFindNetworkIdentity() Declaration public void GetNetworkIdentityShouldFindNetworkIdentity() | Improve this Doc View Source HideForConnection() Declaration public void HideForConnection() | Improve this Doc View Source IsActiveTest() Declaration public void IsActiveTest() | Improve this Doc View Source LocalClientActiveTest() Declaration public void LocalClientActiveTest() | Improve this Doc View Source MaxConnectionsTest() Declaration public void MaxConnectionsTest() | Improve this Doc View Source NoConnectionsTest_WithConnections() Declaration public void NoConnectionsTest_WithConnections() | Improve this Doc View Source NoConnectionsTest_WithHostAndConnection() Declaration public void NoConnectionsTest_WithHostAndConnection() | Improve this Doc View Source NoConnectionsTest_WithHostOnly() Declaration public void NoConnectionsTest_WithHostOnly() | Improve this Doc View Source NoConnectionsTest_WithNoConnection() Declaration public void NoConnectionsTest_WithNoConnection() | Improve this Doc View Source OnConnectedOnlyAllowsGreaterZeroConnectionIdsTest() Declaration public void OnConnectedOnlyAllowsGreaterZeroConnectionIdsTest() | Improve this Doc View Source OnDataReceivedInvalidConnectionIdTest() Declaration public void OnDataReceivedInvalidConnectionIdTest() | Improve this Doc View Source OnDataReceivedTest() Declaration public void OnDataReceivedTest() | Improve this Doc View Source ReadyMessageSetsClientReadyTest() Declaration public void ReadyMessageSetsClientReadyTest() | Improve this Doc View Source RegisterUnregisterClearHandlerTest() Declaration public void RegisterUnregisterClearHandlerTest() | Improve this Doc View Source RemoveConnectionTest() Declaration public void RemoveConnectionTest() | Improve this Doc View Source RemoveLocalConnectionTest() Declaration public void RemoveLocalConnectionTest() | Improve this Doc View Source SendCalledWhileNotActive_ShouldGiveWarning(String) Declaration public void SendCalledWhileNotActive_ShouldGiveWarning(string functionName) Parameters Type Name Description String functionName | Improve this Doc View Source SendToAllTest() Declaration public void SendToAllTest() | Improve this Doc View Source SendToClientOfPlayer() Declaration public void SendToClientOfPlayer() | Improve this Doc View Source SetAllClientsNotReadyTest() Declaration public void SetAllClientsNotReadyTest() | Improve this Doc View Source SetClientReadyAndNotReadyTest() Declaration public void SetClientReadyAndNotReadyTest() | Improve this Doc View Source SetLocalConnectionTest() Declaration public void SetLocalConnectionTest() | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source ShowForConnection() Declaration public void ShowForConnection() | Improve this Doc View Source ShutdownCleanupTest() Declaration public void ShutdownCleanupTest() | Improve this Doc View Source SpawnObjects() Declaration public void SpawnObjects() | Improve this Doc View Source TearDown() Declaration public void TearDown() | Improve this Doc View Source UnSpawn() Declaration public void UnSpawn() | Improve this Doc View Source UpdateDetectsDestroyedEntryInSpawned() Declaration public void UpdateDetectsDestroyedEntryInSpawned() | Improve this Doc View Source UpdateDetectsNullEntryInSpawned() Declaration public void UpdateDetectsNullEntryInSpawned() | Improve this Doc View Source ValidateSceneObject() Declaration public void ValidateSceneObject()"
  },
  "api/Mirror.Tests.SyncVarHookTest.html": {
    "href": "api/Mirror.Tests.SyncVarHookTest.html",
    "title": "Class SyncVarHookTest",
    "keywords": "Class SyncVarHookTest Inheritance Object SyncVarHookTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class SyncVarHookTest : object Methods | Improve this Doc View Source AbstractHook_HookCalledWhenSyncingChangedValue(Boolean) Declaration public void AbstractHook_HookCalledWhenSyncingChangedValue(bool intialState) Parameters Type Name Description Boolean intialState | Improve this Doc View Source GameObjectHook_HookCalledWhenSyncingChangedValue(Boolean) Declaration public void GameObjectHook_HookCalledWhenSyncingChangedValue(bool intialState) Parameters Type Name Description Boolean intialState | Improve this Doc View Source Hook_CalledWhenSyncingChangedValue(Boolean) Declaration public void Hook_CalledWhenSyncingChangedValue(bool intialState) Parameters Type Name Description Boolean intialState | Improve this Doc View Source Hook_NotCalledWhenSyncingSameValue(Boolean) Declaration public void Hook_NotCalledWhenSyncingSameValue(bool intialState) Parameters Type Name Description Boolean intialState | Improve this Doc View Source NetworkIdentityHook_HookCalledWhenSyncingChangedValue(Boolean) Declaration public void NetworkIdentityHook_HookCalledWhenSyncingChangedValue(bool intialState) Parameters Type Name Description Boolean intialState | Improve this Doc View Source StaticMethod_HookCalledWhenSyncingChangedValue(Boolean) Declaration public void StaticMethod_HookCalledWhenSyncingChangedValue(bool intialState) Parameters Type Name Description Boolean intialState | Improve this Doc View Source SyncToClient<T>(T, T, Boolean) Declaration public static bool SyncToClient<T>(T serverObject, T clientObject, bool initialState) where T : NetworkBehaviour Parameters Type Name Description T serverObject T clientObject Boolean initialState Returns Type Description Boolean If data was written by OnSerialize Type Parameters Name Description T | Improve this Doc View Source TearDown() Declaration public void TearDown() | Improve this Doc View Source VirtualHook_HookCalledWhenSyncingChangedValue(Boolean) Declaration public void VirtualHook_HookCalledWhenSyncingChangedValue(bool intialState) Parameters Type Name Description Boolean intialState | Improve this Doc View Source VirtualOverrideHook_HookCalledWhenSyncingChangedValue(Boolean) Declaration public void VirtualOverrideHook_HookCalledWhenSyncingChangedValue(bool intialState) Parameters Type Name Description Boolean intialState"
  },
  "api/Mirror.Tests.RemoteAttrributeTest.CommandTest.html": {
    "href": "api/Mirror.Tests.RemoteAttrributeTest.CommandTest.html",
    "title": "Class CommandTest",
    "keywords": "Class CommandTest Inheritance Object RemoteTestBase CommandTest Inherited Members RemoteTestBase.spawned RemoteTestBase.Setup() RemoteTestBase.TearDown() RemoteTestBase.CreateHostObject<T>(Boolean) RemoteTestBase.ProcessMessages() Namespace : Mirror.Tests.RemoteAttrributeTest Assembly : Mirror.Tests.dll Syntax public class CommandTest : RemoteTestBase Methods | Improve this Doc View Source CommandIsSentWithAuthority() Declaration public void CommandIsSentWithAuthority() | Improve this Doc View Source CommandIsSentWithAuthorityWhenIgnoringAuthority() Declaration public void CommandIsSentWithAuthorityWhenIgnoringAuthority() | Improve this Doc View Source CommandIsSentWithoutAuthorityWhenIgnoringAuthority() Declaration public void CommandIsSentWithoutAuthorityWhenIgnoringAuthority() | Improve this Doc View Source CommandThatThrowsShouldBeCaught() Declaration public void CommandThatThrowsShouldBeCaught() | Improve this Doc View Source SenderConnectionIsSetWhenCommandIsRecieved() Declaration public void SenderConnectionIsSetWhenCommandIsRecieved() | Improve this Doc View Source SenderConnectionIsSetWhenCommandIsRecievedWithIgnoreAuthority() Declaration public void SenderConnectionIsSetWhenCommandIsRecievedWithIgnoreAuthority() | Improve this Doc View Source WarningForCommandSentWithoutAuthority() Declaration public void WarningForCommandSentWithoutAuthority()"
  },
  "api/Mirror.Tests.Runtime.TransportEnableTest.html": {
    "href": "api/Mirror.Tests.Runtime.TransportEnableTest.html",
    "title": "Namespace Mirror.Tests.Runtime.TransportEnableTest",
    "keywords": "Namespace Mirror.Tests.Runtime.TransportEnableTest Classes FallbackTransportEnableTest MultiplexTransportEnableTest"
  },
  "api/Mirror.RpcMessage.html": {
    "href": "api/Mirror.RpcMessage.html",
    "title": "Struct RpcMessage",
    "keywords": "Struct RpcMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct RpcMessage : NetworkMessage Fields | Improve this Doc View Source componentIndex Declaration public int componentIndex Field Value Type Description Int32 | Improve this Doc View Source functionHash Declaration public int functionHash Field Value Type Description Int32 | Improve this Doc View Source netId Declaration public uint netId Field Value Type Description UInt32 | Improve this Doc View Source payload Declaration public ArraySegment<byte> payload Field Value Type Description ArraySegment < Byte > Implements NetworkMessage"
  },
  "api/Mirror.Cloud.CreatedIdJson.html": {
    "href": "api/Mirror.Cloud.CreatedIdJson.html",
    "title": "Struct CreatedIdJson",
    "keywords": "Struct CreatedIdJson Implements ICanBeJson Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public struct CreatedIdJson : ICanBeJson Fields | Improve this Doc View Source id Declaration public string id Field Value Type Description String Implements ICanBeJson"
  },
  "api/Mirror.Tests.RemoteAttrributeTest.TargetRpcOverrideTest.html": {
    "href": "api/Mirror.Tests.RemoteAttrributeTest.TargetRpcOverrideTest.html",
    "title": "Class TargetRpcOverrideTest",
    "keywords": "Class TargetRpcOverrideTest Inheritance Object RemoteTestBase TargetRpcOverrideTest Inherited Members RemoteTestBase.spawned RemoteTestBase.Setup() RemoteTestBase.TearDown() RemoteTestBase.CreateHostObject<T>(Boolean) RemoteTestBase.ProcessMessages() Namespace : Mirror.Tests.RemoteAttrributeTest Assembly : Mirror.Tests.dll Syntax public class TargetRpcOverrideTest : RemoteTestBase Methods | Improve this Doc View Source OverrideVirtualRpcIsCalled() Declaration public void OverrideVirtualRpcIsCalled() | Improve this Doc View Source OverrideVirtualWithBaseCallsBothVirtualAndBase() Declaration public void OverrideVirtualWithBaseCallsBothVirtualAndBase() | Improve this Doc View Source VirtualCommandWithNoOverrideIsCalled() Declaration public void VirtualCommandWithNoOverrideIsCalled() | Improve this Doc View Source VirtualRpcIsCalled() Declaration public void VirtualRpcIsCalled()"
  },
  "api/Mirror.Tests.EnumReadWriteTests.ShortMessage.html": {
    "href": "api/Mirror.Tests.EnumReadWriteTests.ShortMessage.html",
    "title": "Struct EnumReadWriteTests.ShortMessage",
    "keywords": "Struct EnumReadWriteTests.ShortMessage Implements NetworkMessage Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public struct ShortMessage : NetworkMessage Fields | Improve this Doc View Source shortEnum Declaration public EnumReadWriteTests.MyShortEnum shortEnum Field Value Type Description EnumReadWriteTests.MyShortEnum Implements NetworkMessage"
  },
  "api/Mirror.Weaver.Tests.WeaverGeneratedReaderWriterAnotherAssemblyTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverGeneratedReaderWriterAnotherAssemblyTests.html",
    "title": "Class WeaverGeneratedReaderWriterAnotherAssemblyTests",
    "keywords": "Class WeaverGeneratedReaderWriterAnotherAssemblyTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverGeneratedReaderWriterAnotherAssemblyTests Inherited Members WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverGeneratedReaderWriterAnotherAssemblyTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source CanUseCustomReadWriteForTypesFromDifferentAssemblies() Declaration public void CanUseCustomReadWriteForTypesFromDifferentAssemblies() | Improve this Doc View Source CreatesForClassFromDifferentAssemblies() Declaration public void CreatesForClassFromDifferentAssemblies() | Improve this Doc View Source CreatesForClassFromDifferentAssembliesWithValidConstructor() Declaration public void CreatesForClassFromDifferentAssembliesWithValidConstructor() | Improve this Doc View Source CreatesForComplexTypeFromDifferentAssemblies() Declaration public void CreatesForComplexTypeFromDifferentAssemblies() | Improve this Doc View Source CreatesForStructFromDifferentAssemblies() Declaration public void CreatesForStructFromDifferentAssemblies() | Improve this Doc View Source CreatesForTypeThatUsesDifferentAssemblies() Declaration public void CreatesForTypeThatUsesDifferentAssemblies() | Improve this Doc View Source TestSetup() Declaration public override void TestSetup() Overrides WeaverTestsBuildFromTestName.TestSetup()"
  },
  "api/Mirror.NetworkVisibility.html": {
    "href": "api/Mirror.NetworkVisibility.html",
    "title": "Class NetworkVisibility",
    "keywords": "Class NetworkVisibility Inheritance Object NetworkBehaviour NetworkVisibility NetworkMatchChecker NetworkProximityChecker NetworkSceneChecker Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror Assembly : Mirror.dll Syntax public abstract class NetworkVisibility : NetworkBehaviour Methods | Improve this Doc View Source OnCheckObserver(NetworkConnection) Callback used by the visibility system to determine if an observer (player) can see this object. If this function returns true, the network connection will be added as an observer. Declaration public abstract bool OnCheckObserver(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Network connection of a player. Returns Type Description Boolean True if the player can see this object. | Improve this Doc View Source OnRebuildObservers(HashSet<NetworkConnection>, Boolean) Callback used by the visibility system to (re)construct the set of observers that can see this object. Implementations of this callback should add network connections of players that can see this object to the observers set. Declaration public abstract void OnRebuildObservers(HashSet<NetworkConnection> observers, bool initialize) Parameters Type Name Description HashSet < NetworkConnection > observers The new set of observers for this object. Boolean initialize True if the set of observers is being built for the first time. | Improve this Doc View Source OnSetHostVisibility(Boolean) Callback used by the visibility system for objects on a host. Objects on a host (with a local client) cannot be disabled or destroyed when they are not visible to the local client. So this function is called to allow custom code to hide these objects. A typical implementation will disable renderer components on the object. This is only called on local clients on a host. Declaration public virtual void OnSetHostVisibility(bool visible) Parameters Type Name Description Boolean visible New visibility state."
  },
  "api/Mirror.Tests.GeneratedWriterTests.BaseData.html": {
    "href": "api/Mirror.Tests.GeneratedWriterTests.BaseData.html",
    "title": "Class BaseData",
    "keywords": "Class BaseData Inheritance Object BaseData SomeOtherData Namespace : Mirror.Tests.GeneratedWriterTests Assembly : Mirror.Tests.dll Syntax public class BaseData : object Fields | Improve this Doc View Source toggle Declaration public bool toggle Field Value Type Description Boolean"
  },
  "api/Mirror.Weaver.Tests.Extra.SomeDataClassWithConstructor.html": {
    "href": "api/Mirror.Weaver.Tests.Extra.SomeDataClassWithConstructor.html",
    "title": "Class SomeDataClassWithConstructor",
    "keywords": "Class SomeDataClassWithConstructor Inheritance Object SomeDataClassWithConstructor Namespace : Mirror.Weaver.Tests.Extra Assembly : WeaverTestExtraAssembly.dll Syntax public class SomeDataClassWithConstructor : object Constructors | Improve this Doc View Source SomeDataClassWithConstructor() Declaration public SomeDataClassWithConstructor() Fields | Improve this Doc View Source usefulNumber Declaration public int usefulNumber Field Value Type Description Int32"
  },
  "api/Mirror.NetworkConnectionToClient.html": {
    "href": "api/Mirror.NetworkConnectionToClient.html",
    "title": "Class NetworkConnectionToClient",
    "keywords": "Class NetworkConnectionToClient Inheritance Object NetworkConnection NetworkConnectionToClient FakeNetworkConnection FakeNetworkConnection Inherited Members NetworkConnection.LocalConnectionId NetworkConnection.connectionId NetworkConnection.isAuthenticated NetworkConnection.authenticationData NetworkConnection.isReady NetworkConnection.lastMessageTime NetworkConnection.identity NetworkConnection.clientOwnedObjects NetworkConnection.Send<T>(T, Int32) NetworkConnection.ValidatePacketSize(ArraySegment<Byte>, Int32) NetworkConnection.ToString() NetworkConnection.InvokeHandler<T>(T, Int32) Namespace : Mirror Assembly : Mirror.dll Syntax public class NetworkConnectionToClient : NetworkConnection Constructors | Improve this Doc View Source NetworkConnectionToClient(Int32) Declaration public NetworkConnectionToClient(int networkConnectionId) Parameters Type Name Description Int32 networkConnectionId Properties | Improve this Doc View Source address Declaration public override string address { get; } Property Value Type Description String Overrides NetworkConnection.address Methods | Improve this Doc View Source Disconnect() Disconnects this connection. Declaration public override void Disconnect() Overrides NetworkConnection.Disconnect()"
  },
  "api/Mirror.ReadyMessage.html": {
    "href": "api/Mirror.ReadyMessage.html",
    "title": "Struct ReadyMessage",
    "keywords": "Struct ReadyMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct ReadyMessage : NetworkMessage Implements NetworkMessage"
  },
  "api/Mirror.SyncSet-1.html": {
    "href": "api/Mirror.SyncSet-1.html",
    "title": "Class SyncSet<T>",
    "keywords": "Class SyncSet<T> Inheritance Object SyncSet<T> SyncHashSet<T> SyncSortedSet<T> Implements SyncObject Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncSet<T> : ISet<T>, SyncObject Type Parameters Name Description T Constructors | Improve this Doc View Source SyncSet(ISet<T>) Declaration public SyncSet(ISet<T> objects) Parameters Type Name Description ISet <T> objects Fields | Improve this Doc View Source objects Declaration protected readonly ISet<T> objects Field Value Type Description ISet <T> Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsDirty Declaration public bool IsDirty { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Add(T) Declaration public bool Add(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int index) Parameters Type Name Description T[] array Int32 index | Improve this Doc View Source ExceptWith(IEnumerable<T>) Declaration public void ExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other | Improve this Doc View Source Flush() Declaration public void Flush() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> | Improve this Doc View Source IntersectWith(IEnumerable<T>) Declaration public void IntersectWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other | Improve this Doc View Source IsProperSubsetOf(IEnumerable<T>) Declaration public bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source IsProperSupersetOf(IEnumerable<T>) Declaration public bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source IsSubsetOf(IEnumerable<T>) Declaration public bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source IsSupersetOf(IEnumerable<T>) Declaration public bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source OnDeserializeAll(NetworkReader) Declaration public void OnDeserializeAll(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnDeserializeDelta(NetworkReader) Declaration public void OnDeserializeDelta(NetworkReader reader) Parameters Type Name Description NetworkReader reader | Improve this Doc View Source OnSerializeAll(NetworkWriter) Declaration public void OnSerializeAll(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source OnSerializeDelta(NetworkWriter) Declaration public void OnSerializeDelta(NetworkWriter writer) Parameters Type Name Description NetworkWriter writer | Improve this Doc View Source Overlaps(IEnumerable<T>) Declaration public bool Overlaps(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() | Improve this Doc View Source SetEquals(IEnumerable<T>) Declaration public bool SetEquals(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean | Improve this Doc View Source SymmetricExceptWith(IEnumerable<T>) Declaration public void SymmetricExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other | Improve this Doc View Source UnionWith(IEnumerable<T>) Declaration public void UnionWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Events | Improve this Doc View Source Callback Declaration public event SyncSet<T>.SyncSetChanged Callback Event Type Type Description SyncSet.SyncSetChanged <> Implements SyncObject"
  },
  "api/Mirror.Tests.Runtime.HostSetup.html": {
    "href": "api/Mirror.Tests.Runtime.HostSetup.html",
    "title": "Class HostSetup",
    "keywords": "Class HostSetup Inheritance Object HostSetup ClientSceneTest_LocalPlayer_asHost Namespace : Mirror.Tests.Runtime Assembly : Mirror.Tests.Runtime.dll Syntax public class HostSetup : object Fields | Improve this Doc View Source identity Declaration protected NetworkIdentity identity Field Value Type Description NetworkIdentity | Improve this Doc View Source manager Declaration protected NetworkManager manager Field Value Type Description NetworkManager | Improve this Doc View Source networkManagerGo Declaration protected GameObject networkManagerGo Field Value Type Description GameObject | Improve this Doc View Source playerGO Declaration protected GameObject playerGO Field Value Type Description GameObject | Improve this Doc View Source transport Declaration protected MemoryTransport transport Field Value Type Description MemoryTransport Methods | Improve this Doc View Source SetupHost() Declaration public IEnumerator SetupHost() Returns Type Description IEnumerator | Improve this Doc View Source ShutdownHost() Declaration public void ShutdownHost()"
  },
  "api/Mirror.SimpleWeb.WebSocketServer.html": {
    "href": "api/Mirror.SimpleWeb.WebSocketServer.html",
    "title": "Class WebSocketServer",
    "keywords": "Class WebSocketServer Inheritance Object WebSocketServer Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public class WebSocketServer : object Constructors | Improve this Doc View Source WebSocketServer(TcpConfig, Int32, Int32, SslConfig, BufferPool) Declaration public WebSocketServer(TcpConfig tcpConfig, int maxMessageSize, int handshakeMaxSize, SslConfig sslConfig, BufferPool bufferPool) Parameters Type Name Description TcpConfig tcpConfig Int32 maxMessageSize Int32 handshakeMaxSize SslConfig sslConfig BufferPool bufferPool Fields | Improve this Doc View Source receiveQueue Declaration public readonly ConcurrentQueue<Message> receiveQueue Field Value Type Description ConcurrentQueue < Message > Methods | Improve this Doc View Source CloseConnection(Int32) Declaration public bool CloseConnection(int id) Parameters Type Name Description Int32 id Returns Type Description Boolean | Improve this Doc View Source GetClientAddress(Int32) Declaration public string GetClientAddress(int id) Parameters Type Name Description Int32 id Returns Type Description String | Improve this Doc View Source Listen(Int32) Declaration public void Listen(int port) Parameters Type Name Description Int32 port | Improve this Doc View Source Send(Int32, ArrayBuffer) Declaration public void Send(int id, ArrayBuffer buffer) Parameters Type Name Description Int32 id ArrayBuffer buffer | Improve this Doc View Source Stop() Declaration public void Stop()"
  },
  "api/Mirror.Authenticators.BasicAuthenticator.html": {
    "href": "api/Mirror.Authenticators.BasicAuthenticator.html",
    "title": "Class BasicAuthenticator",
    "keywords": "Class BasicAuthenticator Inheritance Object NetworkAuthenticator BasicAuthenticator Inherited Members NetworkAuthenticator.OnServerAuthenticated NetworkAuthenticator.OnClientAuthenticated NetworkAuthenticator.ServerAccept(NetworkConnection) NetworkAuthenticator.ServerReject(NetworkConnection) NetworkAuthenticator.ClientAccept(NetworkConnection) NetworkAuthenticator.ClientReject(NetworkConnection) Namespace : Mirror.Authenticators Assembly : Mirror.Authenticators.dll Syntax public class BasicAuthenticator : NetworkAuthenticator Fields | Improve this Doc View Source password Declaration public string password Field Value Type Description String | Improve this Doc View Source username Declaration public string username Field Value Type Description String Methods | Improve this Doc View Source OnAuthRequestMessage(NetworkConnection, BasicAuthenticator.AuthRequestMessage) Called on server when the client's AuthRequestMessage arrives Declaration public void OnAuthRequestMessage(NetworkConnection conn, BasicAuthenticator.AuthRequestMessage msg) Parameters Type Name Description NetworkConnection conn Connection to client. BasicAuthenticator.AuthRequestMessage msg The message payload | Improve this Doc View Source OnAuthResponseMessage(NetworkConnection, BasicAuthenticator.AuthResponseMessage) Called on client when the server's AuthResponseMessage arrives Declaration public void OnAuthResponseMessage(NetworkConnection conn, BasicAuthenticator.AuthResponseMessage msg) Parameters Type Name Description NetworkConnection conn Connection to client. BasicAuthenticator.AuthResponseMessage msg The message payload | Improve this Doc View Source OnClientAuthenticate(NetworkConnection) Called on client from OnClientAuthenticateInternal when a client needs to authenticate Declaration public override void OnClientAuthenticate(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection of the client. Overrides NetworkAuthenticator.OnClientAuthenticate(NetworkConnection) | Improve this Doc View Source OnServerAuthenticate(NetworkConnection) Called on server from OnServerAuthenticateInternal when a client needs to authenticate Declaration public override void OnServerAuthenticate(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection to client. Overrides NetworkAuthenticator.OnServerAuthenticate(NetworkConnection) | Improve this Doc View Source OnStartClient() Called on client from StartClient to initialize the Authenticator Client message handlers should be registered in this method. Declaration public override void OnStartClient() Overrides NetworkAuthenticator.OnStartClient() | Improve this Doc View Source OnStartServer() Called on server from StartServer to initialize the Authenticator Server message handlers should be registered in this method. Declaration public override void OnStartServer() Overrides NetworkAuthenticator.OnStartServer() | Improve this Doc View Source OnStopClient() Called on client from StopClient to reset the Authenticator Client message handlers should be unregistered in this method. Declaration public override void OnStopClient() Overrides NetworkAuthenticator.OnStopClient() | Improve this Doc View Source OnStopServer() Called on server from StopServer to reset the Authenticator Server message handlers should be registered in this method. Declaration public override void OnStopServer() Overrides NetworkAuthenticator.OnStopServer()"
  },
  "api/Mirror.Tests.ClientSceneTests.PayloadTestBehaviour.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.PayloadTestBehaviour.html",
    "title": "Class PayloadTestBehaviour",
    "keywords": "Class PayloadTestBehaviour Inheritance Object NetworkBehaviour PayloadTestBehaviour Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests.ClientSceneTests Assembly : Mirror.Tests.dll Syntax public class PayloadTestBehaviour : NetworkBehaviour Fields | Improve this Doc View Source direction Declaration public Vector3 direction Field Value Type Description Vector3 | Improve this Doc View Source value Declaration public int value Field Value Type Description Int32 Methods | Improve this Doc View Source OnDeserialize(NetworkReader, Boolean) Declaration public override void OnDeserialize(NetworkReader reader, bool initialState) Parameters Type Name Description NetworkReader reader Boolean initialState Overrides NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) | Improve this Doc View Source OnSerialize(NetworkWriter, Boolean) Declaration public override bool OnSerialize(NetworkWriter writer, bool initialState) Parameters Type Name Description NetworkWriter writer Boolean initialState Returns Type Description Boolean Overrides NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) Events | Improve this Doc View Source OnDeserializeCalled Declaration public event Action OnDeserializeCalled Event Type Type Description Action | Improve this Doc View Source OnSerializeCalled Declaration public event Action OnSerializeCalled Event Type Type Description Action"
  },
  "api/Mirror.Experimental.NetworkTransformChild.html": {
    "href": "api/Mirror.Experimental.NetworkTransformChild.html",
    "title": "Class NetworkTransformChild",
    "keywords": "Class NetworkTransformChild A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values. Inheritance Object NetworkBehaviour NetworkTransformBase NetworkTransformChild Inherited Members NetworkTransformBase.clientAuthority NetworkTransformBase.excludeOwnerUpdate NetworkTransformBase.syncPosition NetworkTransformBase.syncRotation NetworkTransformBase.syncScale NetworkTransformBase.interpolatePosition NetworkTransformBase.interpolateRotation NetworkTransformBase.interpolateScale NetworkTransformBase.localPositionSensitivity NetworkTransformBase.localRotationSensitivity NetworkTransformBase.localScaleSensitivity NetworkTransformBase.lastPosition NetworkTransformBase.lastRotation NetworkTransformBase.lastScale NetworkTransformBase.start NetworkTransformBase.goal NetworkTransformBase.ServerTeleport(Vector3) NetworkTransformBase.ServerTeleport(Vector3, Quaternion) NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Experimental Assembly : Mirror.Components.dll Syntax public class NetworkTransformChild : NetworkTransformBase Fields | Improve this Doc View Source target Declaration public Transform target Field Value Type Description Transform Properties | Improve this Doc View Source targetTransform Declaration protected override Transform targetTransform { get; } Property Value Type Description Transform Overrides NetworkTransformBase.targetTransform"
  },
  "api/Mirror.Weaver.Tests.WeaverSyncVarHookTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverSyncVarHookTests.html",
    "title": "Class WeaverSyncVarHookTests",
    "keywords": "Class WeaverSyncVarHookTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverSyncVarHookTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverSyncVarHookTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source ErrorForWrongTypeNewParameter() Declaration public void ErrorForWrongTypeNewParameter() | Improve this Doc View Source ErrorForWrongTypeOldParameter() Declaration public void ErrorForWrongTypeOldParameter() | Improve this Doc View Source ErrorWhenNoHookFound() Declaration public void ErrorWhenNoHookFound() | Improve this Doc View Source ErrorWhenNoHookWithCorrectParametersFound() Declaration public void ErrorWhenNoHookWithCorrectParametersFound() | Improve this Doc View Source FindsHookWithGameObjects() Declaration public void FindsHookWithGameObjects() | Improve this Doc View Source FindsHookWithNetworkIdentity() Declaration public void FindsHookWithNetworkIdentity() | Improve this Doc View Source FindsHookWithOtherOverloadsInOrder() Declaration public void FindsHookWithOtherOverloadsInOrder() | Improve this Doc View Source FindsHookWithOtherOverloadsInReverseOrder() Declaration public void FindsHookWithOtherOverloadsInReverseOrder() | Improve this Doc View Source FindsPrivateHook() Declaration public void FindsPrivateHook() | Improve this Doc View Source FindsPublicHook() Declaration public void FindsPublicHook() | Improve this Doc View Source FindsStaticHook() Declaration public void FindsStaticHook()"
  },
  "api/Mirror.Experimental.html": {
    "href": "api/Mirror.Experimental.html",
    "title": "Namespace Mirror.Experimental",
    "keywords": "Namespace Mirror.Experimental Classes NetworkLerpRigidbody NetworkRigidbody NetworkRigidbody.ClientSyncState holds previously synced values NetworkRigidbody2D NetworkRigidbody2D.ClientSyncState holds previously synced values NetworkTransform NetworkTransformBase NetworkTransformChild A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values. Structs NetworkTransformBase.DataPoint"
  },
  "api/Mirror.ServerAttribute.html": {
    "href": "api/Mirror.ServerAttribute.html",
    "title": "Class ServerAttribute",
    "keywords": "Class ServerAttribute Prevents clients from running this method. Prints a warning if a client tries to execute this method. Inheritance Object ServerAttribute Namespace : Mirror Assembly : Mirror.dll Syntax public class ServerAttribute : Attribute"
  },
  "api/Mirror.Weaver.Tests.Extra.AnotherData.html": {
    "href": "api/Mirror.Weaver.Tests.Extra.AnotherData.html",
    "title": "Struct AnotherData",
    "keywords": "Struct AnotherData Namespace : Mirror.Weaver.Tests.Extra Assembly : WeaverTestExtraAssembly.dll Syntax public struct AnotherData Fields | Improve this Doc View Source a Declaration public float a Field Value Type Description Single | Improve this Doc View Source b Declaration public float b Field Value Type Description Single | Improve this Doc View Source c Declaration public float c Field Value Type Description Single"
  },
  "api/Mirror.Tests.Generated.Attributes.html": {
    "href": "api/Mirror.Tests.Generated.Attributes.html",
    "title": "Namespace Mirror.Tests.Generated.Attributes",
    "keywords": "Namespace Mirror.Tests.Generated.Attributes Classes AttributeBehaviour_ClassWithNoConstructor AttributeBehaviour_MonoBehaviour AttributeBehaviour_NetworkBehaviour AttributeTest_ClassWithNoConstructor AttributeTest_MonoBehaviour AttributeTest_NetworkBehaviour"
  },
  "api/Telepathy.Utils.html": {
    "href": "api/Telepathy.Utils.html",
    "title": "Class Utils",
    "keywords": "Class Utils Inheritance Object Utils Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Telepathy Assembly : Telepathy.dll Syntax public static class Utils Methods | Improve this Doc View Source BytesToIntBigEndian(Byte[]) Declaration public static int BytesToIntBigEndian(byte[] bytes) Parameters Type Name Description Byte [] bytes Returns Type Description Int32 | Improve this Doc View Source IntToBytesBigEndian(Int32) Declaration public static byte[] IntToBytesBigEndian(int value) Parameters Type Name Description Int32 value Returns Type Description Byte [] | Improve this Doc View Source IntToBytesBigEndianNonAlloc(Int32, Byte[]) Declaration public static void IntToBytesBigEndianNonAlloc(int value, byte[] bytes) Parameters Type Name Description Int32 value Byte [] bytes"
  },
  "api/Mirror.Compression.html": {
    "href": "api/Mirror.Compression.html",
    "title": "Class Compression",
    "keywords": "Class Compression Functions to Compress Quaternions and Floats Inheritance Object Compression Namespace : Mirror Assembly : Mirror.dll Syntax public static class Compression : object Remarks Uncompressed Quaternion = 32 * 4 = 128 bits => send 16 bytes Quaternion is always normalized so we drop largest value and re-calculate it. We can encode which one is the largest using 2 bits x^2 + y^2 + z^2 + w^2 = 1 2nd largest value has max size of 1/sqrt(2) We can encode the smallest three components in [-1/sqrt(2),+1/sqrt(2)] instead of [-1,+1] c^2 + c^2 + 0 + 0 = 1 Sign of largest value doesnt matter Q * vec3 == (-Q) * vec3 RotationPrecision 2/sqrt(2) / (2^bitCount - 1) rotation precision +-0.00138 in range [-1,+1] 10 bits per value 2 + 10 * 3 = 32 bits => send 4 bytes Links for more info: GDC Talk Post on Snapshot Compression Methods | Improve this Doc View Source CompressQuaternion(Quaternion) Used to Compress Quaternion into 4 bytes Declaration public static uint CompressQuaternion(Quaternion value) Parameters Type Name Description Quaternion value Returns Type Description UInt32 | Improve this Doc View Source DecompressQuaternion(UInt32) Used to read a Compressed Quaternion from 4 bytes Quaternion is normalized Declaration public static Quaternion DecompressQuaternion(uint packed) Parameters Type Name Description UInt32 packed Returns Type Description Quaternion | Improve this Doc View Source ScaleFromUInt(UInt32, Single, Single, UInt32, UInt32) Scales uint from minUint->maxUint to minFloat->maxFloat Declaration public static float ScaleFromUInt(uint value, float minFloat, float maxFloat, uint minUint, uint maxUint) Parameters Type Name Description UInt32 value Single minFloat Single maxFloat UInt32 minUint UInt32 maxUint Returns Type Description Single | Improve this Doc View Source ScaleToUInt(Single, Single, Single, UInt32, UInt32) Scales float from minFloat->maxFloat to minUint->maxUint values out side of minFloat/maxFloat will return either 0 or maxUint Declaration public static uint ScaleToUInt(float value, float minFloat, float maxFloat, uint minUint, uint maxUint) Parameters Type Name Description Single value Single minFloat Single maxFloat UInt32 minUint UInt32 maxUint Returns Type Description UInt32"
  },
  "api/Mirror.Cloud.Examples.InstantiateNetworkManager.html": {
    "href": "api/Mirror.Cloud.Examples.InstantiateNetworkManager.html",
    "title": "Class InstantiateNetworkManager",
    "keywords": "Class InstantiateNetworkManager Instantiate a new NetworkManager if one does not already exist Inheritance Object InstantiateNetworkManager Namespace : Mirror.Cloud.Examples Assembly : Mirror.Examples.Cloud.GUI.dll Syntax public class InstantiateNetworkManager : MonoBehaviour Fields | Improve this Doc View Source prefab Declaration public GameObject prefab Field Value Type Description GameObject"
  },
  "api/Mirror.Examples.NetworkRoom.PlayerController.html": {
    "href": "api/Mirror.Examples.NetworkRoom.PlayerController.html",
    "title": "Class PlayerController",
    "keywords": "Class PlayerController Inheritance Object NetworkBehaviour PlayerController Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.NetworkRoom Assembly : Mirror.Examples.dll Syntax public class PlayerController : NetworkBehaviour Fields | Improve this Doc View Source capsuleCollider Declaration public CapsuleCollider capsuleCollider Field Value Type Description CapsuleCollider | Improve this Doc View Source characterController Declaration public CharacterController characterController Field Value Type Description CharacterController | Improve this Doc View Source horizontal Declaration public float horizontal Field Value Type Description Single | Improve this Doc View Source isFalling Declaration public bool isFalling Field Value Type Description Boolean | Improve this Doc View Source isGrounded Declaration public bool isGrounded Field Value Type Description Boolean | Improve this Doc View Source jumpSpeed Declaration public float jumpSpeed Field Value Type Description Single | Improve this Doc View Source maxTurnSpeed Declaration public float maxTurnSpeed Field Value Type Description Single | Improve this Doc View Source moveSpeed Declaration public float moveSpeed Field Value Type Description Single | Improve this Doc View Source turn Declaration public float turn Field Value Type Description Single | Improve this Doc View Source turnSensitivity Declaration public float turnSensitivity Field Value Type Description Single | Improve this Doc View Source velocity Declaration public Vector3 velocity Field Value Type Description Vector3 | Improve this Doc View Source vertical Declaration public float vertical Field Value Type Description Single Methods | Improve this Doc View Source OnStartLocalPlayer() Declaration public override void OnStartLocalPlayer() Overrides NetworkBehaviour.OnStartLocalPlayer()"
  },
  "api/Mirror.Examples.Benchmark.PlayerMovement.html": {
    "href": "api/Mirror.Examples.Benchmark.PlayerMovement.html",
    "title": "Class PlayerMovement",
    "keywords": "Class PlayerMovement Inheritance Object NetworkBehaviour PlayerMovement Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.Benchmark Assembly : Mirror.Examples.dll Syntax public class PlayerMovement : NetworkBehaviour Fields | Improve this Doc View Source speed Declaration public float speed Field Value Type Description Single"
  },
  "api/Mirror.Weaver.Tests.WeaverGeneralTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverGeneralTests.html",
    "title": "Class WeaverGeneralTests",
    "keywords": "Class WeaverGeneralTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverGeneralTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverGeneralTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source RecursionCount() Declaration public void RecursionCount() | Improve this Doc View Source TestingScriptableObjectArraySerialization() Declaration public void TestingScriptableObjectArraySerialization()"
  },
  "api/Mirror.Tests.CustomRWTest.html": {
    "href": "api/Mirror.Tests.CustomRWTest.html",
    "title": "Class CustomRWTest",
    "keywords": "Class CustomRWTest Inheritance Object CustomRWTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class CustomRWTest : object Methods | Improve this Doc View Source TestCustomRW() Declaration public void TestCustomRW()"
  },
  "api/Telepathy.Logger.html": {
    "href": "api/Telepathy.Logger.html",
    "title": "Class Logger",
    "keywords": "Class Logger Inheritance Object Logger Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Telepathy Assembly : Telepathy.dll Syntax public static class Logger Fields | Improve this Doc View Source Log Declaration public static Action<string> Log Field Value Type Description Action < String > | Improve this Doc View Source LogError Declaration public static Action<string> LogError Field Value Type Description Action < String > | Improve this Doc View Source LogWarning Declaration public static Action<string> LogWarning Field Value Type Description Action < String >"
  },
  "api/Mirror.Discovery.ServerRequest.html": {
    "href": "api/Mirror.Discovery.ServerRequest.html",
    "title": "Struct ServerRequest",
    "keywords": "Struct ServerRequest Implements NetworkMessage Namespace : Mirror.Discovery Assembly : Mirror.Components.dll Syntax public struct ServerRequest : NetworkMessage Implements NetworkMessage"
  },
  "api/Mirror.Tests.CompressionQuaternionTest.html": {
    "href": "api/Mirror.Tests.CompressionQuaternionTest.html",
    "title": "Class CompressionQuaternionTest",
    "keywords": "Class CompressionQuaternionTest Inheritance Object CompressionQuaternionTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class CompressionQuaternionTest : object Methods | Improve this Doc View Source FindLargestIndexWork(Quaternion, Int32) Declaration public void FindLargestIndexWork(Quaternion quaternion, int expected) Parameters Type Name Description Quaternion quaternion Int32 expected | Improve this Doc View Source QuaternionCompressIsWithinPrecision(Quaternion) Declaration public void QuaternionCompressIsWithinPrecision(Quaternion inRot) Parameters Type Name Description Quaternion inRot | Improve this Doc View Source RotationIsWithinPrecision(Quaternion) Declaration public void RotationIsWithinPrecision(Quaternion rotationIn) Parameters Type Name Description Quaternion rotationIn"
  },
  "api/Mirror.Tests.MessageTests.RequestMessageBaseReverse.html": {
    "href": "api/Mirror.Tests.MessageTests.RequestMessageBaseReverse.html",
    "title": "Class RequestMessageBaseReverse",
    "keywords": "Class RequestMessageBaseReverse Inheritance Object RequestMessageBaseReverse ResponseMessageReverse Implements NetworkMessage Namespace : Mirror.Tests.MessageTests Assembly : Mirror.Tests.dll Syntax public abstract class RequestMessageBaseReverse : object, NetworkMessage Fields | Improve this Doc View Source responseId Declaration public int responseId Field Value Type Description Int32 Implements NetworkMessage"
  },
  "api/kcp2k.Kcp.html": {
    "href": "api/kcp2k.Kcp.html",
    "title": "Class Kcp",
    "keywords": "Class Kcp Inheritance Object Kcp Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : kcp2k Assembly : kcp2k.dll Syntax public class Kcp Constructors | Improve this Doc View Source Kcp(UInt32, Action<Byte[], Int32>) Declaration public Kcp(uint conv, Action<byte[], int> output) Parameters Type Name Description UInt32 conv Action < Byte [], Int32 > output Fields | Improve this Doc View Source ACK_FAST Declaration public const int ACK_FAST = 3 Field Value Type Description Int32 | Improve this Doc View Source ASK_SEND Declaration public const int ASK_SEND = 1 Field Value Type Description Int32 | Improve this Doc View Source ASK_TELL Declaration public const int ASK_TELL = 2 Field Value Type Description Int32 | Improve this Doc View Source CMD_ACK Declaration public const int CMD_ACK = 82 Field Value Type Description Int32 | Improve this Doc View Source CMD_PUSH Declaration public const int CMD_PUSH = 81 Field Value Type Description Int32 | Improve this Doc View Source CMD_WASK Declaration public const int CMD_WASK = 83 Field Value Type Description Int32 | Improve this Doc View Source CMD_WINS Declaration public const int CMD_WINS = 84 Field Value Type Description Int32 | Improve this Doc View Source DEADLINK Declaration public const int DEADLINK = 20 Field Value Type Description Int32 | Improve this Doc View Source FASTACK_LIMIT Declaration public const int FASTACK_LIMIT = 5 Field Value Type Description Int32 | Improve this Doc View Source INTERVAL Declaration public const int INTERVAL = 100 Field Value Type Description Int32 | Improve this Doc View Source MTU_DEF Declaration public const int MTU_DEF = 1200 Field Value Type Description Int32 | Improve this Doc View Source OVERHEAD Declaration public const int OVERHEAD = 24 Field Value Type Description Int32 | Improve this Doc View Source PROBE_INIT Declaration public const int PROBE_INIT = 7000 Field Value Type Description Int32 | Improve this Doc View Source PROBE_LIMIT Declaration public const int PROBE_LIMIT = 120000 Field Value Type Description Int32 | Improve this Doc View Source RTO_DEF Declaration public const int RTO_DEF = 200 Field Value Type Description Int32 | Improve this Doc View Source RTO_MAX Declaration public const int RTO_MAX = 60000 Field Value Type Description Int32 | Improve this Doc View Source RTO_MIN Declaration public const int RTO_MIN = 100 Field Value Type Description Int32 | Improve this Doc View Source RTO_NDL Declaration public const int RTO_NDL = 30 Field Value Type Description Int32 | Improve this Doc View Source THRESH_INIT Declaration public const int THRESH_INIT = 2 Field Value Type Description Int32 | Improve this Doc View Source THRESH_MIN Declaration public const int THRESH_MIN = 2 Field Value Type Description Int32 | Improve this Doc View Source WND_RCV Declaration public const int WND_RCV = 128 Field Value Type Description Int32 | Improve this Doc View Source WND_SND Declaration public const int WND_SND = 32 Field Value Type Description Int32 Properties | Improve this Doc View Source WaitSnd Declaration public int WaitSnd { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Check(UInt32) Declaration public uint Check(uint current_) Parameters Type Name Description UInt32 current_ Returns Type Description UInt32 | Improve this Doc View Source Flush() Declaration public void Flush() | Improve this Doc View Source Input(Byte[], Int32) Declaration public int Input(byte[] data, int size) Parameters Type Name Description Byte [] data Int32 size Returns Type Description Int32 | Improve this Doc View Source PeekSize() Declaration public int PeekSize() Returns Type Description Int32 | Improve this Doc View Source Receive(Byte[], Int32) Declaration public int Receive(byte[] buffer, int len) Parameters Type Name Description Byte [] buffer Int32 len Returns Type Description Int32 | Improve this Doc View Source Send(Byte[], Int32, Int32) Declaration public int Send(byte[] buffer, int offset, int len) Parameters Type Name Description Byte [] buffer Int32 offset Int32 len Returns Type Description Int32 | Improve this Doc View Source SetInterval(UInt32) Declaration public void SetInterval(uint interval) Parameters Type Name Description UInt32 interval | Improve this Doc View Source SetNoDelay(UInt32, UInt32, Int32, Boolean) Declaration public void SetNoDelay(uint nodelay, uint interval = 100U, int resend = 0, bool nocwnd = false) Parameters Type Name Description UInt32 nodelay UInt32 interval Int32 resend Boolean nocwnd | Improve this Doc View Source SetWindowSize(UInt32, UInt32) Declaration public void SetWindowSize(uint sendWindow, uint receiveWindow) Parameters Type Name Description UInt32 sendWindow UInt32 receiveWindow | Improve this Doc View Source Update(UInt32) Declaration public void Update(uint currentTimeMilliSeconds) Parameters Type Name Description UInt32 currentTimeMilliSeconds"
  },
  "api/Mirror.Weaver.Tests.Extra.SomeDataWithWriter.html": {
    "href": "api/Mirror.Weaver.Tests.Extra.SomeDataWithWriter.html",
    "title": "Struct SomeDataWithWriter",
    "keywords": "Struct SomeDataWithWriter Namespace : Mirror.Weaver.Tests.Extra Assembly : WeaverTestExtraAssembly.dll Syntax public struct SomeDataWithWriter Fields | Improve this Doc View Source usefulNumber Declaration public int usefulNumber Field Value Type Description Int32"
  },
  "api/Mirror.MultiplexTransport.html": {
    "href": "api/Mirror.MultiplexTransport.html",
    "title": "Class MultiplexTransport",
    "keywords": "Class MultiplexTransport Inheritance Object Transport MultiplexTransport Inherited Members Transport.activeTransport Transport.OnClientConnected Transport.OnClientDataReceived Transport.OnClientError Transport.OnClientDisconnected Transport.OnServerConnected Transport.OnServerDataReceived Transport.OnServerError Transport.OnServerDisconnected Transport.Update() Transport.OnApplicationQuit() Namespace : Mirror Assembly : Mirror.dll Syntax public class MultiplexTransport : Transport Fields | Improve this Doc View Source transports Declaration public Transport[] transports Field Value Type Description Transport [] Methods | Improve this Doc View Source Available() Declaration public override bool Available() Returns Type Description Boolean Overrides Transport.Available() | Improve this Doc View Source Awake() Declaration public void Awake() | Improve this Doc View Source ClientConnect(String) Declaration public override void ClientConnect(string address) Parameters Type Name Description String address Overrides Transport.ClientConnect(String) | Improve this Doc View Source ClientConnect(Uri) Declaration public override void ClientConnect(Uri uri) Parameters Type Name Description Uri uri Overrides Transport.ClientConnect(Uri) | Improve this Doc View Source ClientConnected() Declaration public override bool ClientConnected() Returns Type Description Boolean Overrides Transport.ClientConnected() | Improve this Doc View Source ClientDisconnect() Declaration public override void ClientDisconnect() Overrides Transport.ClientDisconnect() | Improve this Doc View Source ClientSend(Int32, ArraySegment<Byte>) Declaration public override void ClientSend(int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 channelId ArraySegment < Byte > segment Overrides Transport.ClientSend(Int32, ArraySegment<Byte>) | Improve this Doc View Source GetMaxPacketSize(Int32) Declaration public override int GetMaxPacketSize(int channelId = 0) Parameters Type Name Description Int32 channelId Returns Type Description Int32 Overrides Transport.GetMaxPacketSize(Int32) | Improve this Doc View Source ServerActive() Declaration public override bool ServerActive() Returns Type Description Boolean Overrides Transport.ServerActive() | Improve this Doc View Source ServerDisconnect(Int32) Declaration public override bool ServerDisconnect(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description Boolean Overrides Transport.ServerDisconnect(Int32) | Improve this Doc View Source ServerGetClientAddress(Int32) Declaration public override string ServerGetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description String Overrides Transport.ServerGetClientAddress(Int32) | Improve this Doc View Source ServerSend(Int32, Int32, ArraySegment<Byte>) Declaration public override void ServerSend(int connectionId, int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 connectionId Int32 channelId ArraySegment < Byte > segment Overrides Transport.ServerSend(Int32, Int32, ArraySegment<Byte>) | Improve this Doc View Source ServerStart() Declaration public override void ServerStart() Overrides Transport.ServerStart() | Improve this Doc View Source ServerStop() Declaration public override void ServerStop() Overrides Transport.ServerStop() | Improve this Doc View Source ServerUri() Declaration public override Uri ServerUri() Returns Type Description Uri Overrides Transport.ServerUri() | Improve this Doc View Source Shutdown() Declaration public override void Shutdown() Overrides Transport.Shutdown() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Mirror.Reader-1.html": {
    "href": "api/Mirror.Reader-1.html",
    "title": "Class Reader<T>",
    "keywords": "Class Reader<T> a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver Inheritance Object Reader<T> Namespace : Mirror Assembly : Mirror.dll Syntax public static class Reader<T> : object Type Parameters Name Description T Fields | Improve this Doc View Source read Declaration public static Func<NetworkReader, T> read Field Value Type Description Func < NetworkReader , T>"
  },
  "api/Mirror.Examples.Pong.Ball.html": {
    "href": "api/Mirror.Examples.Pong.Ball.html",
    "title": "Class Ball",
    "keywords": "Class Ball Inheritance Object NetworkBehaviour Ball Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.Pong Assembly : Mirror.Examples.dll Syntax public class Ball : NetworkBehaviour Fields | Improve this Doc View Source rigidbody2d Declaration public Rigidbody2D rigidbody2d Field Value Type Description Rigidbody2D | Improve this Doc View Source speed Declaration public float speed Field Value Type Description Single Methods | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer()"
  },
  "api/Mirror.Tests.OnStartClientTestNetworkBehaviour.html": {
    "href": "api/Mirror.Tests.OnStartClientTestNetworkBehaviour.html",
    "title": "Class OnStartClientTestNetworkBehaviour",
    "keywords": "Class OnStartClientTestNetworkBehaviour Inheritance Object NetworkBehaviour OnStartClientTestNetworkBehaviour Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class OnStartClientTestNetworkBehaviour : NetworkBehaviour Fields | Improve this Doc View Source called Declaration public int called Field Value Type Description Int32 Methods | Improve this Doc View Source OnStartClient() Declaration public override void OnStartClient() Overrides NetworkBehaviour.OnStartClient()"
  },
  "api/Mirror.Examples.Tanks.Projectile.html": {
    "href": "api/Mirror.Examples.Tanks.Projectile.html",
    "title": "Class Projectile",
    "keywords": "Class Projectile Inheritance Object NetworkBehaviour Projectile Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.Tanks Assembly : Mirror.Examples.dll Syntax public class Projectile : NetworkBehaviour Fields | Improve this Doc View Source destroyAfter Declaration public float destroyAfter Field Value Type Description Single | Improve this Doc View Source force Declaration public float force Field Value Type Description Single | Improve this Doc View Source rigidBody Declaration public Rigidbody rigidBody Field Value Type Description Rigidbody Methods | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer()"
  },
  "api/Mirror.NetworkTransformBase.DataPoint.html": {
    "href": "api/Mirror.NetworkTransformBase.DataPoint.html",
    "title": "Class NetworkTransformBase.DataPoint",
    "keywords": "Class NetworkTransformBase.DataPoint Inheritance Object NetworkTransformBase.DataPoint Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class DataPoint : object Fields | Improve this Doc View Source localPosition Declaration public Vector3 localPosition Field Value Type Description Vector3 | Improve this Doc View Source localRotation Declaration public Quaternion localRotation Field Value Type Description Quaternion | Improve this Doc View Source localScale Declaration public Vector3 localScale Field Value Type Description Vector3 | Improve this Doc View Source movementSpeed Declaration public float movementSpeed Field Value Type Description Single | Improve this Doc View Source timeStamp Declaration public float timeStamp Field Value Type Description Single"
  },
  "api/Mirror.Examples.Additive.PlayerController.html": {
    "href": "api/Mirror.Examples.Additive.PlayerController.html",
    "title": "Class PlayerController",
    "keywords": "Class PlayerController Inheritance Object NetworkBehaviour PlayerController Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.Additive Assembly : Mirror.Examples.dll Syntax public class PlayerController : NetworkBehaviour Fields | Improve this Doc View Source capsuleCollider Declaration public CapsuleCollider capsuleCollider Field Value Type Description CapsuleCollider | Improve this Doc View Source characterController Declaration public CharacterController characterController Field Value Type Description CharacterController | Improve this Doc View Source horizontal Declaration public float horizontal Field Value Type Description Single | Improve this Doc View Source isFalling Declaration public bool isFalling Field Value Type Description Boolean | Improve this Doc View Source isGrounded Declaration public bool isGrounded Field Value Type Description Boolean | Improve this Doc View Source jumpSpeed Declaration public float jumpSpeed Field Value Type Description Single | Improve this Doc View Source maxTurnSpeed Declaration public float maxTurnSpeed Field Value Type Description Single | Improve this Doc View Source moveSpeed Declaration public float moveSpeed Field Value Type Description Single | Improve this Doc View Source turn Declaration public float turn Field Value Type Description Single | Improve this Doc View Source turnSensitivity Declaration public float turnSensitivity Field Value Type Description Single | Improve this Doc View Source velocity Declaration public Vector3 velocity Field Value Type Description Vector3 | Improve this Doc View Source vertical Declaration public float vertical Field Value Type Description Single Methods | Improve this Doc View Source OnStartLocalPlayer() Declaration public override void OnStartLocalPlayer() Overrides NetworkBehaviour.OnStartLocalPlayer()"
  },
  "api/Mirror.Weaver.Tests.Extra.SomeDataClass.html": {
    "href": "api/Mirror.Weaver.Tests.Extra.SomeDataClass.html",
    "title": "Class SomeDataClass",
    "keywords": "Class SomeDataClass Inheritance Object SomeDataClass Namespace : Mirror.Weaver.Tests.Extra Assembly : WeaverTestExtraAssembly.dll Syntax public class SomeDataClass : object Fields | Improve this Doc View Source usefulNumber Declaration public int usefulNumber Field Value Type Description Int32"
  },
  "api/Mirror.Tests.SyncListStructTest.html": {
    "href": "api/Mirror.Tests.SyncListStructTest.html",
    "title": "Class SyncListStructTest",
    "keywords": "Class SyncListStructTest Inheritance Object SyncListStructTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class SyncListStructTest : object Methods | Improve this Doc View Source ListIsDirtyWhenModifingAndSettingStruct() Declaration public void ListIsDirtyWhenModifingAndSettingStruct() | Improve this Doc View Source OldValueShouldNotBeNewValue() Declaration public void OldValueShouldNotBeNewValue()"
  },
  "api/Mirror.Tests.NetworkBehaviourInitSyncObjectExposed.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourInitSyncObjectExposed.html",
    "title": "Class NetworkBehaviourInitSyncObjectExposed",
    "keywords": "Class NetworkBehaviourInitSyncObjectExposed Inheritance Object NetworkBehaviour NetworkBehaviourInitSyncObjectExposed Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourInitSyncObjectExposed : NetworkBehaviour Methods | Improve this Doc View Source InitSyncObjectExposed(SyncObject) Declaration public void InitSyncObjectExposed(SyncObject obj) Parameters Type Name Description SyncObject obj"
  },
  "api/Mirror.NetworkWriterPool.html": {
    "href": "api/Mirror.NetworkWriterPool.html",
    "title": "Class NetworkWriterPool",
    "keywords": "Class NetworkWriterPool Pool of NetworkWriters Use this pool instead of NetworkWriter to reduce memory allocation Inheritance Object NetworkWriterPool Namespace : Mirror Assembly : Mirror.dll Syntax public static class NetworkWriterPool : object Methods | Improve this Doc View Source GetWriter() Get the next writer in the pool If pool is empty, creates a new Writer Declaration public static PooledNetworkWriter GetWriter() Returns Type Description PooledNetworkWriter | Improve this Doc View Source Recycle(PooledNetworkWriter) Puts writer back into pool When pool is full, the extra writer is left for the GC Declaration public static void Recycle(PooledNetworkWriter writer) Parameters Type Name Description PooledNetworkWriter writer"
  },
  "api/Mirror.MessagePacker.html": {
    "href": "api/Mirror.MessagePacker.html",
    "title": "Class MessagePacker",
    "keywords": "Class MessagePacker Inheritance Object MessagePacker Namespace : Mirror Assembly : Mirror.dll Syntax public static class MessagePacker : object Methods | Improve this Doc View Source GetId<T>() Declaration public static int GetId<T>() where T : struct, NetworkMessage Returns Type Description Int32 Type Parameters Name Description T | Improve this Doc View Source Pack<T>(T, NetworkWriter) Declaration public static void Pack<T>(T message, NetworkWriter writer) where T : struct, NetworkMessage Parameters Type Name Description T message NetworkWriter writer Type Parameters Name Description T | Improve this Doc View Source Unpack(NetworkReader, out Int32) Declaration public static bool Unpack(NetworkReader messageReader, out int msgType) Parameters Type Name Description NetworkReader messageReader Int32 msgType Returns Type Description Boolean | Improve this Doc View Source UnpackMessage(NetworkReader, out Int32) Declaration public static bool UnpackMessage(NetworkReader messageReader, out int msgType) Parameters Type Name Description NetworkReader messageReader Int32 msgType Returns Type Description Boolean"
  },
  "api/Mirror.Tests.Runtime.NetworkManagerTests.html": {
    "href": "api/Mirror.Tests.Runtime.NetworkManagerTests.html",
    "title": "Class NetworkManagerTests",
    "keywords": "Class NetworkManagerTests Inheritance Object NetworkManagerTests Namespace : Mirror.Tests.Runtime Assembly : Mirror.Tests.Runtime.dll Syntax public class NetworkManagerTests : object Methods | Improve this Doc View Source IsActiveSceneIsFalseForEmptyString() Declaration public IEnumerator IsActiveSceneIsFalseForEmptyString() Returns Type Description IEnumerator | Improve this Doc View Source IsActiveSceneIsFalseForScenesWithSameNameButDifferentPath() Declaration public IEnumerator IsActiveSceneIsFalseForScenesWithSameNameButDifferentPath() Returns Type Description IEnumerator | Improve this Doc View Source IsActiveSceneWorksWithSceneName() Declaration public IEnumerator IsActiveSceneWorksWithSceneName() Returns Type Description IEnumerator | Improve this Doc View Source IsActiveSceneWorksWithScenePath() Declaration public IEnumerator IsActiveSceneWorksWithScenePath() Returns Type Description IEnumerator"
  },
  "api/Mirror.Cloud.ErrorJson.html": {
    "href": "api/Mirror.Cloud.ErrorJson.html",
    "title": "Struct ErrorJson",
    "keywords": "Struct ErrorJson Implements ICanBeJson Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public struct ErrorJson : ICanBeJson Fields | Improve this Doc View Source code Declaration public string code Field Value Type Description String | Improve this Doc View Source message Declaration public string message Field Value Type Description String Properties | Improve this Doc View Source HtmlCode Declaration public int HtmlCode { get; } Property Value Type Description Int32 Implements ICanBeJson"
  },
  "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_ClearSpawners.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_ClearSpawners.html",
    "title": "Class ClientSceneTests_ClearSpawners",
    "keywords": "Class ClientSceneTests_ClearSpawners Inheritance Object ClientSceneTestsBase ClientSceneTests_ClearSpawners Inherited Members ClientSceneTestsBase.ValidPrefabAssetGuid ClientSceneTestsBase.PrefabWithChildrenAssetGuid ClientSceneTestsBase.InvalidPrefabAssetGuid ClientSceneTestsBase.AnotherGuidString ClientSceneTestsBase.validPrefab ClientSceneTestsBase.validPrefabNetworkIdentity ClientSceneTestsBase.prefabWithChildren ClientSceneTestsBase.invalidPrefab ClientSceneTestsBase.validPrefabGuid ClientSceneTestsBase.anotherGuid ClientSceneTestsBase._createdObjects ClientSceneTestsBase.prefabs ClientSceneTestsBase.spawnHandlers ClientSceneTestsBase.unspawnHandlers ClientSceneTestsBase.spawnableObjects ClientSceneTestsBase.OneTimeSetUp() ClientSceneTestsBase.TearDown() ClientSceneTestsBase.OneTimeTearDown() Namespace : Mirror.Tests.ClientSceneTests Assembly : Mirror.Tests.dll Syntax public class ClientSceneTests_ClearSpawners : ClientSceneTestsBase Methods | Improve this Doc View Source ClearsAllDictionary() Declaration public void ClearsAllDictionary() | Improve this Doc View Source RemovesAllPrefabsFromDictionary() Declaration public void RemovesAllPrefabsFromDictionary() | Improve this Doc View Source RemovesAllSpawnHandlersFromDictionary() Declaration public void RemovesAllSpawnHandlersFromDictionary() | Improve this Doc View Source RemovesAllUnspawnHandlersFromDictionary() Declaration public void RemovesAllUnspawnHandlersFromDictionary()"
  },
  "api/Mirror.Tests.Runtime.ClientSceneTests.BadBehaviour.html": {
    "href": "api/Mirror.Tests.Runtime.ClientSceneTests.BadBehaviour.html",
    "title": "Class BadBehaviour",
    "keywords": "Class BadBehaviour A network Behaviour that changes NetworkIdentity.spawned in OnDisable Inheritance Object BadBehaviour Namespace : Mirror.Tests.Runtime.ClientSceneTests Assembly : Mirror.Tests.Runtime.dll Syntax public class BadBehaviour : MonoBehaviour Methods | Improve this Doc View Source OnDisable() Declaration public void OnDisable()"
  },
  "api/Mirror.Cloud.Example.NetworkManagerListServerPong.html": {
    "href": "api/Mirror.Cloud.Example.NetworkManagerListServerPong.html",
    "title": "Class NetworkManagerListServerPong",
    "keywords": "Class NetworkManagerListServerPong Inheritance Object NetworkManager NetworkManagerListServer NetworkManagerListServerPong Inherited Members NetworkManagerListServer.onServerStarted NetworkManagerListServer.onServerStopped NetworkManagerListServer.onPlayerListChanged NetworkManagerListServer.OnServerConnect(NetworkConnection) NetworkManagerListServer.OnServerDisconnect(NetworkConnection) NetworkManagerListServer.OnStartServer() NetworkManagerListServer.OnStopServer() NetworkManager.dontDestroyOnLoad NetworkManager.runInBackground NetworkManager.autoStartServerBuild NetworkManager.showDebugMessages NetworkManager.serverTickRate NetworkManager.offlineScene NetworkManager.onlineScene NetworkManager.transport NetworkManager.networkAddress NetworkManager.maxConnections NetworkManager.disconnectInactiveConnections NetworkManager.disconnectInactiveTimeout NetworkManager.authenticator NetworkManager.playerPrefab NetworkManager.autoCreatePlayer NetworkManager.playerSpawnMethod NetworkManager.spawnPrefabs NetworkManager.singleton NetworkManager.numPlayers NetworkManager.isNetworkActive NetworkManager.clientLoadedScene NetworkManager.mode NetworkManager.OnValidate() NetworkManager.Awake() NetworkManager.Start() NetworkManager.LateUpdate() NetworkManager.IsSceneActive(String) NetworkManager.StartServer() NetworkManager.StartClient() NetworkManager.StartClient(Uri) NetworkManager.StartHost() NetworkManager.StopHost() NetworkManager.StopServer() NetworkManager.StopClient() NetworkManager.OnApplicationQuit() NetworkManager.ConfigureServerFrameRate() NetworkManager.Shutdown() NetworkManager.OnDestroy() NetworkManager.networkSceneName NetworkManager.loadingSceneAsync NetworkManager.ServerChangeScene(String) NetworkManager.startPositionIndex NetworkManager.startPositions NetworkManager.RegisterStartPosition(Transform) NetworkManager.UnRegisterStartPosition(Transform) NetworkManager.GetStartPosition() NetworkManager.OnServerReady(NetworkConnection) NetworkManager.OnServerError(NetworkConnection, Int32) NetworkManager.OnServerChangeScene(String) NetworkManager.OnServerSceneChanged(String) NetworkManager.OnClientConnect(NetworkConnection) NetworkManager.OnClientDisconnect(NetworkConnection) NetworkManager.OnClientError(NetworkConnection, Int32) NetworkManager.OnClientNotReady(NetworkConnection) NetworkManager.OnClientChangeScene(String, SceneOperation, Boolean) NetworkManager.OnClientSceneChanged(NetworkConnection) NetworkManager.OnStartHost() NetworkManager.OnStartClient() NetworkManager.OnStopClient() NetworkManager.OnStopHost() Namespace : Mirror.Cloud.Example Assembly : Mirror.Examples.Cloud.Pong.dll Syntax public sealed class NetworkManagerListServerPong : NetworkManagerListServer Methods | Improve this Doc View Source OnServerAddPlayer(NetworkConnection) Declaration public override void OnServerAddPlayer(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Overrides NetworkManager.OnServerAddPlayer(NetworkConnection)"
  },
  "api/kcp2k.KcpTransport.html": {
    "href": "api/kcp2k.KcpTransport.html",
    "title": "Class KcpTransport",
    "keywords": "Class KcpTransport Inheritance Object Transport KcpTransport Inherited Members Transport.activeTransport Transport.OnClientConnected Transport.OnClientDataReceived Transport.OnClientError Transport.OnClientDisconnected Transport.ClientConnect(Uri) Transport.OnServerConnected Transport.OnServerDataReceived Transport.OnServerError Transport.OnServerDisconnected Transport.Update() Transport.OnApplicationQuit() Namespace : kcp2k Assembly : Mirror.dll Syntax public class KcpTransport : Transport Fields | Improve this Doc View Source CongestionWindow Declaration public bool CongestionWindow Field Value Type Description Boolean | Improve this Doc View Source debugGUI Declaration public bool debugGUI Field Value Type Description Boolean | Improve this Doc View Source debugLog Declaration public bool debugLog Field Value Type Description Boolean | Improve this Doc View Source FastResend Declaration public int FastResend Field Value Type Description Int32 | Improve this Doc View Source Interval Declaration public uint Interval Field Value Type Description UInt32 | Improve this Doc View Source NoDelay Declaration public bool NoDelay Field Value Type Description Boolean | Improve this Doc View Source Port Declaration public ushort Port Field Value Type Description UInt16 | Improve this Doc View Source ReceiveWindowSize Declaration public uint ReceiveWindowSize Field Value Type Description UInt32 | Improve this Doc View Source Scheme Declaration public const string Scheme = null Field Value Type Description String | Improve this Doc View Source SendWindowSize Declaration public uint SendWindowSize Field Value Type Description UInt32 Methods | Improve this Doc View Source Available() Declaration public override bool Available() Returns Type Description Boolean Overrides Transport.Available() | Improve this Doc View Source ClientConnect(String) Declaration public override void ClientConnect(string address) Parameters Type Name Description String address Overrides Transport.ClientConnect(String) | Improve this Doc View Source ClientConnected() Declaration public override bool ClientConnected() Returns Type Description Boolean Overrides Transport.ClientConnected() | Improve this Doc View Source ClientDisconnect() Declaration public override void ClientDisconnect() Overrides Transport.ClientDisconnect() | Improve this Doc View Source ClientSend(Int32, ArraySegment<Byte>) Declaration public override void ClientSend(int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 channelId ArraySegment < Byte > segment Overrides Transport.ClientSend(Int32, ArraySegment<Byte>) | Improve this Doc View Source GetMaxPacketSize(Int32) Declaration public override int GetMaxPacketSize(int channelId = null) Parameters Type Name Description Int32 channelId Returns Type Description Int32 Overrides Transport.GetMaxPacketSize(Int32) | Improve this Doc View Source LateUpdate() Declaration public void LateUpdate() | Improve this Doc View Source ServerActive() Declaration public override bool ServerActive() Returns Type Description Boolean Overrides Transport.ServerActive() | Improve this Doc View Source ServerDisconnect(Int32) Declaration public override bool ServerDisconnect(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description Boolean Overrides Transport.ServerDisconnect(Int32) | Improve this Doc View Source ServerGetClientAddress(Int32) Declaration public override string ServerGetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description String Overrides Transport.ServerGetClientAddress(Int32) | Improve this Doc View Source ServerSend(Int32, Int32, ArraySegment<Byte>) Declaration public override void ServerSend(int connectionId, int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 connectionId Int32 channelId ArraySegment < Byte > segment Overrides Transport.ServerSend(Int32, Int32, ArraySegment<Byte>) | Improve this Doc View Source ServerStart() Declaration public override void ServerStart() Overrides Transport.ServerStart() | Improve this Doc View Source ServerStop() Declaration public override void ServerStop() Overrides Transport.ServerStop() | Improve this Doc View Source ServerUri() Declaration public override Uri ServerUri() Returns Type Description Uri Overrides Transport.ServerUri() | Improve this Doc View Source Shutdown() Declaration public override void Shutdown() Overrides Transport.Shutdown() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Mirror.Examples.MultipleAdditiveScenes.PlayerController.html": {
    "href": "api/Mirror.Examples.MultipleAdditiveScenes.PlayerController.html",
    "title": "Class PlayerController",
    "keywords": "Class PlayerController Inheritance Object NetworkBehaviour PlayerController Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.MultipleAdditiveScenes Assembly : Mirror.Examples.dll Syntax public class PlayerController : NetworkBehaviour Fields | Improve this Doc View Source characterController Declaration public CharacterController characterController Field Value Type Description CharacterController | Improve this Doc View Source horizontal Declaration public float horizontal Field Value Type Description Single | Improve this Doc View Source isFalling Declaration public bool isFalling Field Value Type Description Boolean | Improve this Doc View Source isGrounded Declaration public bool isGrounded Field Value Type Description Boolean | Improve this Doc View Source jumpSpeed Declaration public float jumpSpeed Field Value Type Description Single | Improve this Doc View Source maxTurnSpeed Declaration public float maxTurnSpeed Field Value Type Description Single | Improve this Doc View Source moveSpeed Declaration public float moveSpeed Field Value Type Description Single | Improve this Doc View Source turn Declaration public float turn Field Value Type Description Single | Improve this Doc View Source turnSensitivity Declaration public float turnSensitivity Field Value Type Description Single | Improve this Doc View Source velocity Declaration public Vector3 velocity Field Value Type Description Vector3 | Improve this Doc View Source vertical Declaration public float vertical Field Value Type Description Single Methods | Improve this Doc View Source OnStartLocalPlayer() Declaration public override void OnStartLocalPlayer() Overrides NetworkBehaviour.OnStartLocalPlayer()"
  },
  "api/Mirror.Tests.BasicAuthenticatorTest.AuthResponseMessage.html": {
    "href": "api/Mirror.Tests.BasicAuthenticatorTest.AuthResponseMessage.html",
    "title": "Struct BasicAuthenticatorTest.AuthResponseMessage",
    "keywords": "Struct BasicAuthenticatorTest.AuthResponseMessage Implements NetworkMessage Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public struct AuthResponseMessage : NetworkMessage Fields | Improve this Doc View Source code Declaration public byte code Field Value Type Description Byte | Improve this Doc View Source message Declaration public string message Field Value Type Description String Implements NetworkMessage"
  },
  "api/Mirror.Tests.MyMiddleware.html": {
    "href": "api/Mirror.Tests.MyMiddleware.html",
    "title": "Class MyMiddleware",
    "keywords": "Class MyMiddleware Inheritance Object Transport MiddlewareTransport MyMiddleware Inherited Members MiddlewareTransport.inner MiddlewareTransport.Available() MiddlewareTransport.GetMaxPacketSize(Int32) MiddlewareTransport.Shutdown() MiddlewareTransport.ClientConnect(String) MiddlewareTransport.ClientConnected() MiddlewareTransport.ClientDisconnect() Mirror.MiddlewareTransport.ClientSend(System.Int32, ArraySegment<>) MiddlewareTransport.ServerActive() MiddlewareTransport.ServerStart() MiddlewareTransport.ServerStop() Mirror.MiddlewareTransport.ServerSend(System.Int32, System.Int32, ArraySegment<>) MiddlewareTransport.ServerDisconnect(Int32) MiddlewareTransport.ServerGetClientAddress(Int32) MiddlewareTransport.ServerUri() Transport.activeTransport Transport.OnClientConnected Transport.OnClientDataReceived Transport.OnClientError Transport.OnClientDisconnected Transport.ClientConnect(Uri) Transport.OnServerConnected Transport.OnServerDataReceived Transport.OnServerError Transport.OnServerDisconnected Transport.Update() Transport.OnApplicationQuit() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class MyMiddleware : MiddlewareTransport"
  },
  "api/Mirror.Tests.GeneratedWriterTests.FieldsInBaseClasses.html": {
    "href": "api/Mirror.Tests.GeneratedWriterTests.FieldsInBaseClasses.html",
    "title": "Class FieldsInBaseClasses",
    "keywords": "Class FieldsInBaseClasses Inheritance Object RemoteTestBase FieldsInBaseClasses Inherited Members RemoteTestBase.spawned RemoteTestBase.Setup() RemoteTestBase.TearDown() RemoteTestBase.CreateHostObject<T>(Boolean) RemoteTestBase.ProcessMessages() Namespace : Mirror.Tests.GeneratedWriterTests Assembly : Mirror.Tests.dll Syntax public class FieldsInBaseClasses : RemoteTestBase Methods | Improve this Doc View Source WriterShouldIncludeFieldsInBaseClass() Declaration public void WriterShouldIncludeFieldsInBaseClass()"
  },
  "api/Mirror.Tests.Runtime.ClientSceneTests.ClientSceneTest_LocalPlayer_asHost.html": {
    "href": "api/Mirror.Tests.Runtime.ClientSceneTests.ClientSceneTest_LocalPlayer_asHost.html",
    "title": "Class ClientSceneTest_LocalPlayer_asHost",
    "keywords": "Class ClientSceneTest_LocalPlayer_asHost Inheritance Object HostSetup ClientSceneTest_LocalPlayer_asHost Inherited Members HostSetup.networkManagerGo HostSetup.manager HostSetup.transport HostSetup.playerGO HostSetup.identity HostSetup.SetupHost() HostSetup.ShutdownHost() Namespace : Mirror.Tests.Runtime.ClientSceneTests Assembly : Mirror.Tests.Runtime.dll Syntax public class ClientSceneTest_LocalPlayer_asHost : HostSetup Methods | Improve this Doc View Source LocalPlayerIsSetToNullAfterNetworkDestroy() Declaration public IEnumerator LocalPlayerIsSetToNullAfterNetworkDestroy() Returns Type Description IEnumerator | Improve this Doc View Source LocalPlayerIsSetToNullAfterNetworkUnspawn() Declaration public IEnumerator LocalPlayerIsSetToNullAfterNetworkUnspawn() Returns Type Description IEnumerator"
  },
  "api/Mirror.Weaver.Tests.WeaverAssembler.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverAssembler.html",
    "title": "Class WeaverAssembler",
    "keywords": "Class WeaverAssembler Inheritance Object WeaverAssembler Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverAssembler : MonoBehaviour Properties | Improve this Doc View Source AllowUnsafe Declaration public static bool AllowUnsafe { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CompilerErrors Declaration public static bool CompilerErrors { get; } Property Value Type Description Boolean | Improve this Doc View Source CompilerMessages Declaration public static List<CompilerMessage> CompilerMessages { get; } Property Value Type Description List < CompilerMessage > | Improve this Doc View Source DeleteOutputOnClear Declaration public static bool DeleteOutputOnClear { get; set; } Property Value Type Description Boolean | Improve this Doc View Source OutputDirectory Declaration public static string OutputDirectory { get; } Property Value Type Description String | Improve this Doc View Source OutputFile Declaration public static string OutputFile { get; set; } Property Value Type Description String | Improve this Doc View Source ReferenceAssemblies Declaration public static HashSet<string> ReferenceAssemblies { get; } Property Value Type Description HashSet < String > | Improve this Doc View Source SourceFiles Declaration public static HashSet<string> SourceFiles { get; } Property Value Type Description HashSet < String > Methods | Improve this Doc View Source AddReferencesByAssemblyName(String[]) Declaration public static void AddReferencesByAssemblyName(string[] refAsms) Parameters Type Name Description String [] refAsms | Improve this Doc View Source AddReferencesByFullPath(String[]) Declaration public static void AddReferencesByFullPath(string[] refAsms) Parameters Type Name Description String [] refAsms | Improve this Doc View Source AddSourceFiles(String[]) Declaration public static void AddSourceFiles(string[] sourceFiles) Parameters Type Name Description String [] sourceFiles | Improve this Doc View Source Build() Declaration public static void Build() | Improve this Doc View Source Clear() Declaration public static void Clear() | Improve this Doc View Source ClearReferences() Declaration public static void ClearReferences() | Improve this Doc View Source DeleteOutput() Declaration public static void DeleteOutput() | Improve this Doc View Source FindReferenceAssemblyPath(String, out String) Declaration public static bool FindReferenceAssemblyPath(string asmName, out string asmFullPath) Parameters Type Name Description String asmName String asmFullPath Returns Type Description Boolean"
  },
  "api/Mirror.Weaver.MethodProcessor.html": {
    "href": "api/Mirror.Weaver.MethodProcessor.html",
    "title": "Class MethodProcessor",
    "keywords": "Class MethodProcessor Inheritance Object MethodProcessor Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class MethodProcessor : object Methods | Improve this Doc View Source FixRemoteCallToBaseMethod(TypeDefinition, MethodDefinition) Finds and fixes call to base methods within remote calls For example, changes `base.CmdDoSomething` to `base.CallCmdDoSomething` within `this.CallCmdDoSomething` Declaration public static void FixRemoteCallToBaseMethod(TypeDefinition type, MethodDefinition method) Parameters Type Name Description TypeDefinition type MethodDefinition method | Improve this Doc View Source SubstituteMethod(TypeDefinition, MethodDefinition) Declaration public static MethodDefinition SubstituteMethod(TypeDefinition td, MethodDefinition md) Parameters Type Name Description TypeDefinition td MethodDefinition md Returns Type Description MethodDefinition"
  },
  "api/Mirror.Tests.Runtime.TransportEnableTest.FallbackTransportEnableTest.html": {
    "href": "api/Mirror.Tests.Runtime.TransportEnableTest.FallbackTransportEnableTest.html",
    "title": "Class FallbackTransportEnableTest",
    "keywords": "Class FallbackTransportEnableTest Inheritance Object FallbackTransportEnableTest Namespace : Mirror.Tests.Runtime.TransportEnableTest Assembly : Mirror.Tests.Runtime.dll Syntax public class FallbackTransportEnableTest : object Methods | Improve this Doc View Source DisableShouldDisableAvailableTransport() Declaration public void DisableShouldDisableAvailableTransport() | Improve this Doc View Source Setup() Declaration public void Setup() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.Tests.SyncSetTest.html": {
    "href": "api/Mirror.Tests.SyncSetTest.html",
    "title": "Class SyncSetTest",
    "keywords": "Class SyncSetTest Inheritance Object SyncSetTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class SyncSetTest : object Methods | Improve this Doc View Source CallbackRemoveTest() Declaration public void CallbackRemoveTest() | Improve this Doc View Source CallbackTest() Declaration public void CallbackTest() | Improve this Doc View Source CountTest() Declaration public void CountTest() | Improve this Doc View Source ObjectCanBeReusedAfterReset() Declaration public void ObjectCanBeReusedAfterReset() | Improve this Doc View Source ReadOnlyTest() Declaration public void ReadOnlyTest() | Improve this Doc View Source ResetShouldClearChanges() Declaration public void ResetShouldClearChanges() | Improve this Doc View Source ResetShouldClearItems() Declaration public void ResetShouldClearItems() | Improve this Doc View Source ResetShouldSetReadOnlyToFalse() Declaration public void ResetShouldSetReadOnlyToFalse() | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source TestAdd() Declaration public void TestAdd() | Improve this Doc View Source TestClear() Declaration public void TestClear() | Improve this Doc View Source TestExceptWith() Declaration public void TestExceptWith() | Improve this Doc View Source TestExceptWithSelf() Declaration public void TestExceptWithSelf() | Improve this Doc View Source TestInit() Declaration public void TestInit() | Improve this Doc View Source TestIntersectWith() Declaration public void TestIntersectWith() | Improve this Doc View Source TestIntersectWithSet() Declaration public void TestIntersectWithSet() | Improve this Doc View Source TestIsNotProperSubsetOf() Declaration public void TestIsNotProperSubsetOf() | Improve this Doc View Source TestIsProperSubsetOf() Declaration public void TestIsProperSubsetOf() | Improve this Doc View Source TestIsProperSubsetOfSet() Declaration public void TestIsProperSubsetOfSet() | Improve this Doc View Source TestIsProperSuperSetOf() Declaration public void TestIsProperSuperSetOf() | Improve this Doc View Source TestIsSubsetOf() Declaration public void TestIsSubsetOf() | Improve this Doc View Source TestIsSupersetOf() Declaration public void TestIsSupersetOf() | Improve this Doc View Source TestMultSync() Declaration public void TestMultSync() | Improve this Doc View Source TestOverlaps() Declaration public void TestOverlaps() | Improve this Doc View Source TestRemove() Declaration public void TestRemove() | Improve this Doc View Source TestSetEquals() Declaration public void TestSetEquals() | Improve this Doc View Source TestSymmetricExceptWith() Declaration public void TestSymmetricExceptWith() | Improve this Doc View Source TestSymmetricExceptWithSelf() Declaration public void TestSymmetricExceptWithSelf() | Improve this Doc View Source TestUnionWith() Declaration public void TestUnionWith() | Improve this Doc View Source TestUnionWithSelf() Declaration public void TestUnionWithSelf() | Improve this Doc View Source WritingToReadOnlyThrows() Declaration public void WritingToReadOnlyThrows()"
  },
  "api/Mirror.Tests.ClientSceneTests.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.html",
    "title": "Namespace Mirror.Tests.ClientSceneTests",
    "keywords": "Namespace Mirror.Tests.ClientSceneTests Classes BehaviourWithEvents ClientSceneTests_ClearSpawners ClientSceneTests_GetPrefab ClientSceneTests_OnSpawn ClientSceneTests_PrepareToSpawnSceneObjects ClientSceneTests_RegisterPrefab ClientSceneTests_RegisterSpawnHandler ClientSceneTests_UnregisterPrefab ClientSceneTests_UnregisterSpawnHandler PayloadTestBehaviour Enums ClientSceneTests_OnSpawn.SpawnFinishedState"
  },
  "api/Mirror.Weaver.Tests.WeaverSyncDictionaryTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverSyncDictionaryTests.html",
    "title": "Class WeaverSyncDictionaryTests",
    "keywords": "Class WeaverSyncDictionaryTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverSyncDictionaryTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverSyncDictionaryTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source GenericSyncDictionaryCanBeUsed() Declaration public void GenericSyncDictionaryCanBeUsed() | Improve this Doc View Source SyncDictionary() Declaration public void SyncDictionary() | Improve this Doc View Source SyncDictionaryErrorForGenericStructItem() Declaration public void SyncDictionaryErrorForGenericStructItem() | Improve this Doc View Source SyncDictionaryErrorForGenericStructKey() Declaration public void SyncDictionaryErrorForGenericStructKey() | Improve this Doc View Source SyncDictionaryGenericAbstractInheritance() Declaration public void SyncDictionaryGenericAbstractInheritance() | Improve this Doc View Source SyncDictionaryGenericInheritance() Declaration public void SyncDictionaryGenericInheritance() | Improve this Doc View Source SyncDictionaryGenericStructItemWithCustomMethods() Declaration public void SyncDictionaryGenericStructItemWithCustomMethods() | Improve this Doc View Source SyncDictionaryGenericStructKeyWithCustomMethods() Declaration public void SyncDictionaryGenericStructKeyWithCustomMethods() | Improve this Doc View Source SyncDictionaryInheritance() Declaration public void SyncDictionaryInheritance() | Improve this Doc View Source SyncDictionaryStructItem() Declaration public void SyncDictionaryStructItem() | Improve this Doc View Source SyncDictionaryStructKey() Declaration public void SyncDictionaryStructKey()"
  },
  "api/Mirror.Tests.Generators.GeneratorBase.html": {
    "href": "api/Mirror.Tests.Generators.GeneratorBase.html",
    "title": "Class GeneratorBase",
    "keywords": "Class GeneratorBase Inheritance Object GeneratorBase AttributeTestGenerator CollectionWriterGenerator Namespace : Mirror.Tests.Generators Assembly : Mirror.Tests.dll Syntax public class GeneratorBase : object Fields | Improve this Doc View Source BaseNameSpace Declaration protected const string BaseNameSpace = null Field Value Type Description String Methods | Improve this Doc View Source Merge(IEnumerable<String>, String) Declaration protected static string Merge(IEnumerable<string> strs, string separator = \"\\n\") Parameters Type Name Description IEnumerable < String > strs String separator Returns Type Description String | Improve this Doc View Source Save(String, String, Boolean) Declaration protected static void Save(string main, string fileName, bool compile = true) Parameters Type Name Description String main String fileName Boolean compile"
  },
  "api/Mirror.NetworkPingDisplay.html": {
    "href": "api/Mirror.NetworkPingDisplay.html",
    "title": "Class NetworkPingDisplay",
    "keywords": "Class NetworkPingDisplay Component that will display the clients ping in milliseconds Inheritance Object NetworkPingDisplay Namespace : Mirror Assembly : Mirror.Components.dll Syntax public class NetworkPingDisplay : MonoBehaviour Fields | Improve this Doc View Source fontSize Declaration public int fontSize Field Value Type Description Int32 | Improve this Doc View Source format Declaration public string format Field Value Type Description String | Improve this Doc View Source position Declaration public Vector2 position Field Value Type Description Vector2 | Improve this Doc View Source showPing Declaration public bool showPing Field Value Type Description Boolean | Improve this Doc View Source showRoundTripTime Declaration public bool showRoundTripTime Field Value Type Description Boolean | Improve this Doc View Source textColor Declaration public Color textColor Field Value Type Description Color"
  },
  "api/Mirror.Examples.MultipleAdditiveScenes.RandomColor.html": {
    "href": "api/Mirror.Examples.MultipleAdditiveScenes.RandomColor.html",
    "title": "Class RandomColor",
    "keywords": "Class RandomColor Inheritance Object NetworkBehaviour RandomColor Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.MultipleAdditiveScenes Assembly : Mirror.Examples.dll Syntax public class RandomColor : NetworkBehaviour Fields | Improve this Doc View Source color Declaration public Color32 color Field Value Type Description Color32 Methods | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer()"
  },
  "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_RegisterPrefab.html": {
    "href": "api/Mirror.Tests.ClientSceneTests.ClientSceneTests_RegisterPrefab.html",
    "title": "Class ClientSceneTests_RegisterPrefab",
    "keywords": "Class ClientSceneTests_RegisterPrefab Inheritance Object ClientSceneTestsBase ClientSceneTests_RegisterPrefabBase ClientSceneTests_RegisterPrefab Inherited Members ClientSceneTests_RegisterPrefabBase.CheckOverloadWithAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, Boolean) ClientSceneTests_RegisterPrefabBase.CheckOverloadWithHandler(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, Boolean) ClientSceneTests_RegisterPrefabBase.OverloadWithAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) ClientSceneTests_RegisterPrefabBase.OverloadWithHandler(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) ClientSceneTests_RegisterPrefabBase.CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) ClientSceneTests_RegisterPrefabBase.CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, Guid) ClientSceneTests_RegisterPrefabBase.CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, SpawnDelegate) ClientSceneTests_RegisterPrefabBase.CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, SpawnHandlerDelegate) ClientSceneTests_RegisterPrefabBase.CallRegisterPrefab(GameObject, ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload, UnSpawnDelegate) ClientSceneTests_RegisterPrefabBase.GuidForOverload(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) ClientSceneTestsBase.ValidPrefabAssetGuid ClientSceneTestsBase.PrefabWithChildrenAssetGuid ClientSceneTestsBase.InvalidPrefabAssetGuid ClientSceneTestsBase.AnotherGuidString ClientSceneTestsBase.validPrefab ClientSceneTestsBase.validPrefabNetworkIdentity ClientSceneTestsBase.prefabWithChildren ClientSceneTestsBase.invalidPrefab ClientSceneTestsBase.validPrefabGuid ClientSceneTestsBase.anotherGuid ClientSceneTestsBase._createdObjects ClientSceneTestsBase.prefabs ClientSceneTestsBase.spawnHandlers ClientSceneTestsBase.unspawnHandlers ClientSceneTestsBase.spawnableObjects ClientSceneTestsBase.OneTimeSetUp() ClientSceneTestsBase.TearDown() ClientSceneTestsBase.OneTimeTearDown() Namespace : Mirror.Tests.ClientSceneTests Assembly : Mirror.Tests.dll Syntax public class ClientSceneTests_RegisterPrefab : ClientSceneTests_RegisterPrefabBase Methods | Improve this Doc View Source ErrorForNullPrefab(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void ErrorForNullPrefab(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source ErrorForPrefabWithoutNetworkIdentity(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void ErrorForPrefabWithoutNetworkIdentity(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source ErrorIfPrefabHadSceneId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void ErrorIfPrefabHadSceneId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source Handler_ErrorForAssetIdAlreadyExistingInPrefabsDictionary(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void Handler_ErrorForAssetIdAlreadyExistingInPrefabsDictionary(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source Handler_ErrorWhenUnSpawnHandlerIsNull(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void Handler_ErrorWhenUnSpawnHandlerIsNull(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source HandlerNewGuid_ErrorDoesNotChangePrefabsAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void HandlerNewGuid_ErrorDoesNotChangePrefabsAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source HandlerNewGuid_NoErrorWhenAssetIdIsSameAsCurrentPrefab(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void HandlerNewGuid_NoErrorWhenAssetIdIsSameAsCurrentPrefab(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source NewGuid_ErrorForEmptyGuid(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void NewGuid_ErrorForEmptyGuid(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source Prefab_AddsPrefabToDictionary(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void Prefab_AddsPrefabToDictionary(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source Prefab_WarningForAssetIdAlreadyExistingInPrefabsDictionary(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void Prefab_WarningForAssetIdAlreadyExistingInPrefabsDictionary(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source PrefabNewGuid_ErrorDoesNotChangePrefabsAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void PrefabNewGuid_ErrorDoesNotChangePrefabsAssetId(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source PrefabNewGuid_NoErrorWhenNewAssetIdIsSameAsCurrentPrefab(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void PrefabNewGuid_NoErrorWhenNewAssetIdIsSameAsCurrentPrefab(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source SpawnDelegate_AddsHandlerToSpawnHandlers(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void SpawnDelegate_AddsHandlerToSpawnHandlers(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source SpawnDelegate_AddsHandlerToSpawnHandlersWithCorrectArguments(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void SpawnDelegate_AddsHandlerToSpawnHandlersWithCorrectArguments(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source SpawnDelegate_ErrorWhenSpawnHandlerIsNull(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void SpawnDelegate_ErrorWhenSpawnHandlerIsNull(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source SpawnHandleDelegate_AddsHandlerToSpawnHandlers(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void SpawnHandleDelegate_AddsHandlerToSpawnHandlers(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source SpawnHandleDelegate_ErrorWhenSpawnHandlerIsNull(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void SpawnHandleDelegate_ErrorWhenSpawnHandlerIsNull(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source WarningForAssetIdAlreadyExistingInHandlersDictionary(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void WarningForAssetIdAlreadyExistingInHandlersDictionary(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload | Improve this Doc View Source WarningForNetworkIdentityInChildren(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload) Declaration public void WarningForNetworkIdentityInChildren(ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload) Parameters Type Name Description ClientSceneTests_RegisterPrefabBase.RegisterPrefabOverload overload"
  },
  "api/Mirror.SimpleWeb.SslConfig.html": {
    "href": "api/Mirror.SimpleWeb.SslConfig.html",
    "title": "Struct SslConfig",
    "keywords": "Struct SslConfig Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public struct SslConfig Constructors | Improve this Doc View Source SslConfig(Boolean, String, String, SslProtocols) Declaration public SslConfig(bool enabled, string certPath, string certPassword, SslProtocols sslProtocols) Parameters Type Name Description Boolean enabled String certPath String certPassword SslProtocols sslProtocols Fields | Improve this Doc View Source certPassword Declaration public readonly string certPassword Field Value Type Description String | Improve this Doc View Source certPath Declaration public readonly string certPath Field Value Type Description String | Improve this Doc View Source enabled Declaration public readonly bool enabled Field Value Type Description Boolean | Improve this Doc View Source sslProtocols Declaration public readonly SslProtocols sslProtocols Field Value Type Description SslProtocols"
  },
  "api/Mirror.Examples.Basic.BasicNetManager.html": {
    "href": "api/Mirror.Examples.Basic.BasicNetManager.html",
    "title": "Class BasicNetManager",
    "keywords": "Class BasicNetManager Inheritance Object NetworkManager BasicNetManager Inherited Members NetworkManager.dontDestroyOnLoad NetworkManager.runInBackground NetworkManager.autoStartServerBuild NetworkManager.showDebugMessages NetworkManager.serverTickRate NetworkManager.offlineScene NetworkManager.onlineScene NetworkManager.transport NetworkManager.networkAddress NetworkManager.maxConnections NetworkManager.disconnectInactiveConnections NetworkManager.disconnectInactiveTimeout NetworkManager.authenticator NetworkManager.playerPrefab NetworkManager.autoCreatePlayer NetworkManager.playerSpawnMethod NetworkManager.spawnPrefabs NetworkManager.singleton NetworkManager.numPlayers NetworkManager.isNetworkActive NetworkManager.clientLoadedScene NetworkManager.mode NetworkManager.OnValidate() NetworkManager.Awake() NetworkManager.Start() NetworkManager.LateUpdate() NetworkManager.IsSceneActive(String) NetworkManager.StartServer() NetworkManager.StartClient() NetworkManager.StartClient(Uri) NetworkManager.StartHost() NetworkManager.StopHost() NetworkManager.StopServer() NetworkManager.StopClient() NetworkManager.OnApplicationQuit() NetworkManager.ConfigureServerFrameRate() NetworkManager.Shutdown() NetworkManager.OnDestroy() NetworkManager.networkSceneName NetworkManager.loadingSceneAsync NetworkManager.ServerChangeScene(String) NetworkManager.startPositionIndex NetworkManager.startPositions NetworkManager.RegisterStartPosition(Transform) NetworkManager.UnRegisterStartPosition(Transform) NetworkManager.GetStartPosition() NetworkManager.OnServerConnect(NetworkConnection) NetworkManager.OnServerDisconnect(NetworkConnection) NetworkManager.OnServerReady(NetworkConnection) NetworkManager.OnServerError(NetworkConnection, Int32) NetworkManager.OnServerChangeScene(String) NetworkManager.OnServerSceneChanged(String) NetworkManager.OnClientConnect(NetworkConnection) NetworkManager.OnClientDisconnect(NetworkConnection) NetworkManager.OnClientError(NetworkConnection, Int32) NetworkManager.OnClientNotReady(NetworkConnection) NetworkManager.OnClientChangeScene(String, SceneOperation, Boolean) NetworkManager.OnClientSceneChanged(NetworkConnection) NetworkManager.OnStartHost() NetworkManager.OnStartServer() NetworkManager.OnStartClient() NetworkManager.OnStopServer() NetworkManager.OnStopClient() NetworkManager.OnStopHost() Namespace : Mirror.Examples.Basic Assembly : Mirror.Examples.dll Syntax public class BasicNetManager : NetworkManager Methods | Improve this Doc View Source OnServerAddPlayer(NetworkConnection) Called on the server when a client adds a new player with ClientScene.AddPlayer. The default implementation for this function creates a new player object from the playerPrefab. Declaration public override void OnServerAddPlayer(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection from client. Overrides NetworkManager.OnServerAddPlayer(NetworkConnection)"
  },
  "api/Mirror.Cloud.RequestFail.html": {
    "href": "api/Mirror.Cloud.RequestFail.html",
    "title": "Delegate RequestFail",
    "keywords": "Delegate RequestFail Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public delegate void RequestFail(string responseBody); Parameters Type Name Description String responseBody"
  },
  "api/Mirror.Cloud.html": {
    "href": "api/Mirror.Cloud.html",
    "title": "Namespace Mirror.Cloud",
    "keywords": "Namespace Mirror.Cloud Classes ApiConnector Used to requests and responses from the mirror api BaseApi Extensions Logger MatchFoundEvent RequestCreator Methods to create and send UnityWebRequest ServerListEvent UnityEqualCheckExtension Structs CreatedIdJson EmptyJson ErrorJson Interfaces IApiConnector Used to requests and responses from the mirror api IBaseApi ICanBeJson Objects that can be sent to the Api must have this interface ICoroutineRunner IRequestCreator Methods to create and send UnityWebRequest IUnityEqualCheck Adds Extension to check if unity object is null. Use these methods to stop MissingReferenceException Delegates RequestFail RequestSuccess"
  },
  "api/Mirror.Tests.NetworkWriterPoolTest.html": {
    "href": "api/Mirror.Tests.NetworkWriterPoolTest.html",
    "title": "Class NetworkWriterPoolTest",
    "keywords": "Class NetworkWriterPoolTest Inheritance Object NetworkWriterPoolTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkWriterPoolTest : object Methods | Improve this Doc View Source TestPoolRecycling() Declaration public void TestPoolRecycling()"
  },
  "api/Mirror.Experimental.NetworkRigidbody2D.ClientSyncState.html": {
    "href": "api/Mirror.Experimental.NetworkRigidbody2D.ClientSyncState.html",
    "title": "Class NetworkRigidbody2D.ClientSyncState",
    "keywords": "Class NetworkRigidbody2D.ClientSyncState holds previously synced values Inheritance Object NetworkRigidbody2D.ClientSyncState Namespace : Mirror.Experimental Assembly : Mirror.Components.dll Syntax public class ClientSyncState : object Fields | Improve this Doc View Source angularDrag Declaration public float angularDrag Field Value Type Description Single | Improve this Doc View Source angularVelocity Declaration public float angularVelocity Field Value Type Description Single | Improve this Doc View Source drag Declaration public float drag Field Value Type Description Single | Improve this Doc View Source gravityScale Declaration public float gravityScale Field Value Type Description Single | Improve this Doc View Source isKinematic Declaration public bool isKinematic Field Value Type Description Boolean | Improve this Doc View Source nextSyncTime Next sync time that velocity will be synced, based on syncInterval. Declaration public float nextSyncTime Field Value Type Description Single | Improve this Doc View Source velocity Declaration public Vector2 velocity Field Value Type Description Vector2"
  },
  "api/Mirror.Tests.NetworkManagerTest.html": {
    "href": "api/Mirror.Tests.NetworkManagerTest.html",
    "title": "Class NetworkManagerTest",
    "keywords": "Class NetworkManagerTest Inheritance Object NetworkManagerTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkManagerTest : object Methods | Improve this Doc View Source GetStartPositionTest() Declaration public void GetStartPositionTest() | Improve this Doc View Source RegisterStartPositionTest() Declaration public void RegisterStartPositionTest() | Improve this Doc View Source SetupNetworkManager() Declaration public void SetupNetworkManager() | Improve this Doc View Source ShutdownTest() Declaration public void ShutdownTest() | Improve this Doc View Source StartClientTest() Declaration public void StartClientTest() | Improve this Doc View Source StartClientUriTest() Declaration public void StartClientUriTest() | Improve this Doc View Source StartServerTest() Declaration public void StartServerTest() | Improve this Doc View Source StopClientTest() Declaration public void StopClientTest() | Improve this Doc View Source StopServerTest() Declaration public void StopServerTest() | Improve this Doc View Source TearDownNetworkManager() Declaration public void TearDownNetworkManager() | Improve this Doc View Source UnRegisterStartPositionTest() Declaration public void UnRegisterStartPositionTest() | Improve this Doc View Source VariableTest() Declaration public void VariableTest()"
  },
  "api/Mirror.Tests.PoolTests.html": {
    "href": "api/Mirror.Tests.PoolTests.html",
    "title": "Class PoolTests",
    "keywords": "Class PoolTests Inheritance Object PoolTests Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class PoolTests : object Methods | Improve this Doc View Source Count() Declaration public void Count() | Improve this Doc View Source ReturnAndTake() Declaration public void ReturnAndTake() | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source TakeFromEmpty() Declaration public void TakeFromEmpty() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/kcp2k.KcpServer.html": {
    "href": "api/kcp2k.KcpServer.html",
    "title": "Class KcpServer",
    "keywords": "Class KcpServer Inheritance Object KcpServer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : kcp2k Assembly : kcp2k.dll Syntax public class KcpServer Constructors | Improve this Doc View Source KcpServer(Action<Int32>, Action<Int32, ArraySegment<Byte>>, Action<Int32>, Boolean, UInt32, Int32, Boolean, UInt32, UInt32) Declaration public KcpServer(Action<int> OnConnected, Action<int, ArraySegment<byte>> OnData, Action<int> OnDisconnected, bool NoDelay, uint Interval, int FastResend = 0, bool CongestionWindow = true, uint SendWindowSize = 32U, uint ReceiveWindowSize = 128U) Parameters Type Name Description Action < Int32 > OnConnected Action < Int32 , ArraySegment < Byte >> OnData Action < Int32 > OnDisconnected Boolean NoDelay UInt32 Interval Int32 FastResend Boolean CongestionWindow UInt32 SendWindowSize UInt32 ReceiveWindowSize Fields | Improve this Doc View Source CongestionWindow Declaration public bool CongestionWindow Field Value Type Description Boolean | Improve this Doc View Source connections Declaration public Dictionary<int, KcpServerConnection> connections Field Value Type Description Dictionary < Int32 , KcpServerConnection > | Improve this Doc View Source FastResend Declaration public int FastResend Field Value Type Description Int32 | Improve this Doc View Source Interval Declaration public uint Interval Field Value Type Description UInt32 | Improve this Doc View Source NoDelay Declaration public bool NoDelay Field Value Type Description Boolean | Improve this Doc View Source OnConnected Declaration public Action<int> OnConnected Field Value Type Description Action < Int32 > | Improve this Doc View Source OnData Declaration public Action<int, ArraySegment<byte>> OnData Field Value Type Description Action < Int32 , ArraySegment < Byte >> | Improve this Doc View Source OnDisconnected Declaration public Action<int> OnDisconnected Field Value Type Description Action < Int32 > | Improve this Doc View Source ReceiveWindowSize Declaration public uint ReceiveWindowSize Field Value Type Description UInt32 | Improve this Doc View Source SendWindowSize Declaration public uint SendWindowSize Field Value Type Description UInt32 Methods | Improve this Doc View Source Disconnect(Int32) Declaration public void Disconnect(int connectionId) Parameters Type Name Description Int32 connectionId | Improve this Doc View Source GetClientAddress(Int32) Declaration public string GetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId Returns Type Description String | Improve this Doc View Source IsActive() Declaration public bool IsActive() Returns Type Description Boolean | Improve this Doc View Source Send(Int32, ArraySegment<Byte>) Declaration public void Send(int connectionId, ArraySegment<byte> segment) Parameters Type Name Description Int32 connectionId ArraySegment < Byte > segment | Improve this Doc View Source Start(UInt16) Declaration public void Start(ushort port) Parameters Type Name Description UInt16 port | Improve this Doc View Source Stop() Declaration public void Stop() | Improve this Doc View Source Tick() Declaration public void Tick()"
  },
  "api/Mirror.Tests.StructMessages.html": {
    "href": "api/Mirror.Tests.StructMessages.html",
    "title": "Namespace Mirror.Tests.StructMessages",
    "keywords": "Namespace Mirror.Tests.StructMessages Classes StructMessagesTests Structs SomeStructMessage"
  },
  "api/Mirror.ClientScene.html": {
    "href": "api/Mirror.ClientScene.html",
    "title": "Class ClientScene",
    "keywords": "Class ClientScene A client manager which contains static client information and functions. This manager contains references to tracked static local objects such as spawner registrations. It also has the default message handlers used by clients when they registered none themselves. The manager handles adding/removing player objects to the game after a client connection has been set as ready. The ClientScene is a singleton, and it has static convenience methods such as ClientScene.Ready(). The ClientScene is used by the NetworkManager, but it can be used by itself. As the ClientScene manages player objects on the client, it is where clients request to add players. The NetworkManager does this via the ClientScene automatically when auto-add-players is set, but it can be done through code using the function ClientScene.AddPlayer(). This sends an AddPlayer message to the server and will cause a player object to be created for this client. Like NetworkServer, the ClientScene understands the concept of the local client. The function ClientScene.ConnectLocalServer() is used to become a host by starting a local client (when a server is already running). Inheritance Object ClientScene Namespace : Mirror Assembly : Mirror.dll Syntax public static class ClientScene : object Fields | Improve this Doc View Source prefabs This is a dictionary of the prefabs that are registered on the client with ClientScene.RegisterPrefab(). The key to the dictionary is the prefab asset Id. Declaration public static readonly Dictionary<System.Guid, GameObject> prefabs Field Value Type Description Dictionary < System.Guid , GameObject > | Improve this Doc View Source spawnableObjects This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server. The key to the dictionary is the NetworkIdentity sceneId. Declaration public static readonly Dictionary<ulong, NetworkIdentity> spawnableObjects Field Value Type Description Dictionary < UInt64 , NetworkIdentity > Properties | Improve this Doc View Source localPlayer NetworkIdentity of the localPlayer Declaration public static NetworkIdentity localPlayer { get; } Property Value Type Description NetworkIdentity | Improve this Doc View Source ready Returns true when a client's connection has been set to ready. A client that is ready recieves state updates from the server, while a client that is not ready does not. This useful when the state of the game is not normal, such as a scene change or end-of-game. This is read-only. To change the ready state of a client, use ClientScene.Ready(). The server is able to set the ready state of clients using NetworkServer.SetClientReady(), NetworkServer.SetClientNotReady() and NetworkServer.SetAllClientsNotReady(). This is done when changing scenes so that clients don't receive state update messages during scene loading. Declaration public static bool ready { get; set; } Property Value Type Description Boolean | Improve this Doc View Source readyConnection The NetworkConnection object that is currently \"ready\". This is the connection to the server where objects are spawned from. This connection can be used to send messages to the server. There can only be one ClientScene and ready connection at a time. Declaration public static NetworkConnection readyConnection { get; } Property Value Type Description NetworkConnection Methods | Improve this Doc View Source AddPlayer(NetworkConnection) This adds a player GameObject for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer is called. Declaration public static bool AddPlayer(NetworkConnection readyConn) Parameters Type Name Description NetworkConnection readyConn The connection to become ready for this client. Returns Type Description Boolean True if AddPlayer message was sent | Improve this Doc View Source ClearSpawners() This clears the registered spawn prefabs and spawn handler functions for this client. Declaration public static void ClearSpawners() | Improve this Doc View Source DestroyAllClientObjects() Destroys all networked objects on the client. This can be used to clean up when a network connection is closed. Declaration public static void DestroyAllClientObjects() | Improve this Doc View Source GetPrefab(System.Guid, out GameObject) Find the registered prefab for this asset id. Useful for debuggers Declaration public static bool GetPrefab(System.Guid assetId, out GameObject prefab) Parameters Type Name Description System.Guid assetId asset id of the prefab GameObject prefab the prefab gameobject Returns Type Description Boolean true if prefab was registered | Improve this Doc View Source PrepareToSpawnSceneObjects() Call this after loading/unloading a scene in the client after connection to register the spawnable objects Declaration public static void PrepareToSpawnSceneObjects() | Improve this Doc View Source Ready(NetworkConnection) Signal that the client connection is ready to enter the game. This could be for example when a client enters an ongoing game and has finished loading the current scene. The server should respond to the SYSTEM_READY event with an appropriate handler which instantiates the players object for example. Declaration public static bool Ready(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn The client connection which is ready. Returns Type Description Boolean True if succcessful | Improve this Doc View Source RegisterPrefab(GameObject) Registers a prefab with the spawning system. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. Declaration public static void RegisterPrefab(GameObject prefab) Parameters Type Name Description GameObject prefab A Prefab that will be spawned. | Improve this Doc View Source RegisterPrefab(GameObject, SpawnDelegate, UnSpawnDelegate) Registers a prefab with the spawning system. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. Declaration public static void RegisterPrefab(GameObject prefab, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Parameters Type Name Description GameObject prefab A Prefab that will be spawned. SpawnDelegate spawnHandler A method to use as a custom spawnhandler on clients. UnSpawnDelegate unspawnHandler A method to use as a custom un-spawnhandler on clients. | Improve this Doc View Source RegisterPrefab(GameObject, SpawnHandlerDelegate, UnSpawnDelegate) Registers a prefab with the spawning system. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. Declaration public static void RegisterPrefab(GameObject prefab, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Parameters Type Name Description GameObject prefab A Prefab that will be spawned. SpawnHandlerDelegate spawnHandler A method to use as a custom spawnhandler on clients. UnSpawnDelegate unspawnHandler A method to use as a custom un-spawnhandler on clients. | Improve this Doc View Source RegisterPrefab(GameObject, System.Guid) Registers a prefab with the spawning system. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. NOTE: newAssetId can not be set on GameObjects that already have an assetId Declaration public static void RegisterPrefab(GameObject prefab, System.Guid newAssetId) Parameters Type Name Description GameObject prefab A GameObject that will be spawned. System.Guid newAssetId An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id. | Improve this Doc View Source RegisterPrefab(GameObject, System.Guid, SpawnDelegate, UnSpawnDelegate) Registers a prefab with the spawning system. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. NOTE: newAssetId can not be set on GameObjects that already have an assetId Declaration public static void RegisterPrefab(GameObject prefab, System.Guid newAssetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Parameters Type Name Description GameObject prefab A GameObject that will be spawned. System.Guid newAssetId An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id. SpawnDelegate spawnHandler A method to use as a custom spawnhandler on clients. UnSpawnDelegate unspawnHandler A method to use as a custom un-spawnhandler on clients. | Improve this Doc View Source RegisterPrefab(GameObject, System.Guid, SpawnHandlerDelegate, UnSpawnDelegate) Registers a prefab with the spawning system. When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instantiate a corresponding client object with the same netId. The NetworkManager has a list of spawnable prefabs, it uses this function to register those prefabs with the ClientScene. The set of current spawnable object is available in the ClientScene static member variable ClientScene.prefabs, which is a dictionary of NetworkAssetIds and prefab references. NOTE: newAssetId can not be set on GameObjects that already have an assetId Declaration public static void RegisterPrefab(GameObject prefab, System.Guid newAssetId, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Parameters Type Name Description GameObject prefab A GameObject that will be spawned. System.Guid newAssetId An assetId to be assigned to this GameObject. This allows a dynamically created game object to be registered for an already known asset Id. SpawnHandlerDelegate spawnHandler A method to use as a custom spawnhandler on clients. UnSpawnDelegate unspawnHandler A method to use as a custom un-spawnhandler on clients. | Improve this Doc View Source RegisterSpawnHandler(System.Guid, SpawnDelegate, UnSpawnDelegate) This is an advanced spawning function that registers a custom assetId with the UNET spawning system. This can be used to register custom spawning methods for an assetId - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data. Declaration public static void RegisterSpawnHandler(System.Guid assetId, SpawnDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Parameters Type Name Description System.Guid assetId Custom assetId string. SpawnDelegate spawnHandler A method to use as a custom spawnhandler on clients. UnSpawnDelegate unspawnHandler A method to use as a custom un-spawnhandler on clients. | Improve this Doc View Source RegisterSpawnHandler(System.Guid, SpawnHandlerDelegate, UnSpawnDelegate) This is an advanced spawning function that registers a custom assetId with the UNET spawning system. This can be used to register custom spawning methods for an assetId - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data. Declaration public static void RegisterSpawnHandler(System.Guid assetId, SpawnHandlerDelegate spawnHandler, UnSpawnDelegate unspawnHandler) Parameters Type Name Description System.Guid assetId Custom assetId string. SpawnHandlerDelegate spawnHandler A method to use as a custom spawnhandler on clients. UnSpawnDelegate unspawnHandler A method to use as a custom un-spawnhandler on clients. | Improve this Doc View Source UnregisterPrefab(GameObject) Removes a registered spawn prefab that was setup with ClientScene.RegisterPrefab. Declaration public static void UnregisterPrefab(GameObject prefab) Parameters Type Name Description GameObject prefab The prefab to be removed from registration. | Improve this Doc View Source UnregisterSpawnHandler(System.Guid) Removes a registered spawn handler function that was registered with ClientScene.RegisterHandler(). Declaration public static void UnregisterSpawnHandler(System.Guid assetId) Parameters Type Name Description System.Guid assetId The assetId for the handler to be removed for. Events | Improve this Doc View Source onLocalPlayerChanged Declaration public static event ClientScene.LocalplayerChanged onLocalPlayerChanged Event Type Type Description ClientScene.LocalplayerChanged"
  },
  "api/Mirror.Tests.StructMessages.StructMessagesTests.html": {
    "href": "api/Mirror.Tests.StructMessages.StructMessagesTests.html",
    "title": "Class StructMessagesTests",
    "keywords": "Class StructMessagesTests Inheritance Object StructMessagesTests Namespace : Mirror.Tests.StructMessages Assembly : Mirror.Tests.dll Syntax public class StructMessagesTests : object Methods | Improve this Doc View Source SerializeAreAddedWhenEmptyInStruct() Declaration public void SerializeAreAddedWhenEmptyInStruct()"
  },
  "api/Mirror.EnterPlayModeSettingsCheck.html": {
    "href": "api/Mirror.EnterPlayModeSettingsCheck.html",
    "title": "Class EnterPlayModeSettingsCheck",
    "keywords": "Class EnterPlayModeSettingsCheck Inheritance Object EnterPlayModeSettingsCheck Namespace : Mirror Assembly : Mirror.Editor.dll Syntax public class EnterPlayModeSettingsCheck : MonoBehaviour"
  },
  "api/Mirror.Weaver.Tests.Extra.SomeData.html": {
    "href": "api/Mirror.Weaver.Tests.Extra.SomeData.html",
    "title": "Struct SomeData",
    "keywords": "Struct SomeData Namespace : Mirror.Weaver.Tests.Extra Assembly : WeaverTestExtraAssembly.dll Syntax public struct SomeData Fields | Improve this Doc View Source usefulNumber Declaration public int usefulNumber Field Value Type Description Int32"
  },
  "api/Mirror.SimpleWeb.IBufferOwner.html": {
    "href": "api/Mirror.SimpleWeb.IBufferOwner.html",
    "title": "Interface IBufferOwner",
    "keywords": "Interface IBufferOwner Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public interface IBufferOwner Methods | Improve this Doc View Source Return(ArrayBuffer) Declaration void Return(ArrayBuffer buffer) Parameters Type Name Description ArrayBuffer buffer"
  },
  "api/Mirror.Examples.Basic.Player.html": {
    "href": "api/Mirror.Examples.Basic.Player.html",
    "title": "Class Player",
    "keywords": "Class Player Inheritance Object NetworkBehaviour Player Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Examples.Basic Assembly : Mirror.Examples.dll Syntax public class Player : NetworkBehaviour Fields | Improve this Doc View Source image Declaration public Image image Field Value Type Description Image | Improve this Doc View Source playerColor Declaration public Color playerColor Field Value Type Description Color | Improve this Doc View Source playerData Declaration public int playerData Field Value Type Description Int32 | Improve this Doc View Source playerDataText Declaration public Text playerDataText Field Value Type Description Text | Improve this Doc View Source playerNameText Declaration public Text playerNameText Field Value Type Description Text | Improve this Doc View Source playerNumber Declaration public int playerNumber Field Value Type Description Int32 | Improve this Doc View Source rectTransform Declaration public RectTransform rectTransform Field Value Type Description RectTransform Methods | Improve this Doc View Source OnStartClient() Declaration public override void OnStartClient() Overrides NetworkBehaviour.OnStartClient() | Improve this Doc View Source OnStartLocalPlayer() Declaration public override void OnStartLocalPlayer() Overrides NetworkBehaviour.OnStartLocalPlayer() | Improve this Doc View Source OnStartServer() Declaration public override void OnStartServer() Overrides NetworkBehaviour.OnStartServer()"
  },
  "api/Mirror.Examples.MultipleAdditiveScenes.MultiSceneNetManager.html": {
    "href": "api/Mirror.Examples.MultipleAdditiveScenes.MultiSceneNetManager.html",
    "title": "Class MultiSceneNetManager",
    "keywords": "Class MultiSceneNetManager Inheritance Object NetworkManager MultiSceneNetManager Inherited Members NetworkManager.dontDestroyOnLoad NetworkManager.runInBackground NetworkManager.autoStartServerBuild NetworkManager.showDebugMessages NetworkManager.serverTickRate NetworkManager.offlineScene NetworkManager.onlineScene NetworkManager.transport NetworkManager.networkAddress NetworkManager.maxConnections NetworkManager.disconnectInactiveConnections NetworkManager.disconnectInactiveTimeout NetworkManager.authenticator NetworkManager.playerPrefab NetworkManager.autoCreatePlayer NetworkManager.playerSpawnMethod NetworkManager.spawnPrefabs NetworkManager.singleton NetworkManager.numPlayers NetworkManager.isNetworkActive NetworkManager.clientLoadedScene NetworkManager.mode NetworkManager.OnValidate() NetworkManager.Awake() NetworkManager.Start() NetworkManager.LateUpdate() NetworkManager.IsSceneActive(String) NetworkManager.StartServer() NetworkManager.StartClient() NetworkManager.StartClient(Uri) NetworkManager.StartHost() NetworkManager.StopHost() NetworkManager.StopServer() NetworkManager.StopClient() NetworkManager.OnApplicationQuit() NetworkManager.ConfigureServerFrameRate() NetworkManager.Shutdown() NetworkManager.OnDestroy() NetworkManager.networkSceneName NetworkManager.loadingSceneAsync NetworkManager.ServerChangeScene(String) NetworkManager.startPositionIndex NetworkManager.startPositions NetworkManager.RegisterStartPosition(Transform) NetworkManager.UnRegisterStartPosition(Transform) NetworkManager.GetStartPosition() NetworkManager.OnServerConnect(NetworkConnection) NetworkManager.OnServerDisconnect(NetworkConnection) NetworkManager.OnServerReady(NetworkConnection) NetworkManager.OnServerError(NetworkConnection, Int32) NetworkManager.OnServerChangeScene(String) NetworkManager.OnServerSceneChanged(String) NetworkManager.OnClientConnect(NetworkConnection) NetworkManager.OnClientDisconnect(NetworkConnection) NetworkManager.OnClientError(NetworkConnection, Int32) NetworkManager.OnClientNotReady(NetworkConnection) NetworkManager.OnClientChangeScene(String, SceneOperation, Boolean) NetworkManager.OnClientSceneChanged(NetworkConnection) NetworkManager.OnStartHost() NetworkManager.OnStartClient() NetworkManager.OnStopHost() Namespace : Mirror.Examples.MultipleAdditiveScenes Assembly : Mirror.Examples.dll Syntax public class MultiSceneNetManager : NetworkManager Fields | Improve this Doc View Source gameScene Declaration public string gameScene Field Value Type Description String | Improve this Doc View Source instances Declaration public int instances Field Value Type Description Int32 | Improve this Doc View Source rewardPrefab Declaration public GameObject rewardPrefab Field Value Type Description GameObject Methods | Improve this Doc View Source OnServerAddPlayer(NetworkConnection) Called on the server when a client adds a new player with ClientScene.AddPlayer. The default implementation for this function creates a new player object from the playerPrefab. Declaration public override void OnServerAddPlayer(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn Connection from client. Overrides NetworkManager.OnServerAddPlayer(NetworkConnection) | Improve this Doc View Source OnStartServer() This is invoked when a server is started - including when a host is started. StartServer has multiple signatures, but they all cause this hook to be called. Declaration public override void OnStartServer() Overrides NetworkManager.OnStartServer() | Improve this Doc View Source OnStopClient() This is called when a client is stopped. Declaration public override void OnStopClient() Overrides NetworkManager.OnStopClient() | Improve this Doc View Source OnStopServer() This is called when a server is stopped - including when a host is stopped. Declaration public override void OnStopServer() Overrides NetworkManager.OnStopServer()"
  },
  "api/Mirror.Cloud.Example.html": {
    "href": "api/Mirror.Cloud.Example.html",
    "title": "Namespace Mirror.Cloud.Example",
    "keywords": "Namespace Mirror.Cloud.Example Classes ApiUpdater This component should be put on the NetworkManager object NetworkManagerListServer Network Manager with events that are used by the list server NetworkManagerListServerPong QuickListServerDebug This Script can be used to test the list server without needing to use canvas or other UI ServerListManager Uses the ApiConnector on NetworkManager to update the Server list ServerListUI Displays the list of servers ServerListUIItem Displays a server created by ServerListUI Delegates NetworkManagerListServer.OnPlayerListChanged"
  },
  "api/Mirror.Tests.CustomRWTest.QuestMessage.html": {
    "href": "api/Mirror.Tests.CustomRWTest.QuestMessage.html",
    "title": "Struct CustomRWTest.QuestMessage",
    "keywords": "Struct CustomRWTest.QuestMessage Implements NetworkMessage Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public struct QuestMessage : NetworkMessage Fields | Improve this Doc View Source quest Declaration public MockQuest quest Field Value Type Description MockQuest Implements NetworkMessage"
  },
  "api/Mirror.Tests.NetworkBehaviourSendTargetRPCInternalComponent.html": {
    "href": "api/Mirror.Tests.NetworkBehaviourSendTargetRPCInternalComponent.html",
    "title": "Class NetworkBehaviourSendTargetRPCInternalComponent",
    "keywords": "Class NetworkBehaviourSendTargetRPCInternalComponent Inheritance Object NetworkBehaviour NetworkBehaviourSendTargetRPCInternalComponent Inherited Members NetworkBehaviour.syncMode NetworkBehaviour.syncInterval NetworkBehaviour.isServer NetworkBehaviour.isClient NetworkBehaviour.isLocalPlayer NetworkBehaviour.isServerOnly NetworkBehaviour.isClientOnly NetworkBehaviour.hasAuthority NetworkBehaviour.netId NetworkBehaviour.connectionToServer NetworkBehaviour.connectionToClient NetworkBehaviour.syncVarDirtyBits NetworkBehaviour.getSyncVarHookGuard(UInt64) NetworkBehaviour.setSyncVarHookGuard(UInt64, Boolean) NetworkBehaviour.syncObjects NetworkBehaviour.netIdentity NetworkBehaviour.ComponentIndex NetworkBehaviour.InitSyncObject(SyncObject) NetworkBehaviour.SendCommandInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendRPCInternal(Type, String, NetworkWriter, Int32, Boolean) NetworkBehaviour.SendTargetRPCInternal(NetworkConnection, Type, String, NetworkWriter, Int32) NetworkBehaviour.SyncVarGameObjectEqual(GameObject, UInt32) NetworkBehaviour.SetSyncVarGameObject(GameObject, GameObject, UInt64, UInt32) NetworkBehaviour.GetSyncVarGameObject(UInt32, GameObject) NetworkBehaviour.SyncVarNetworkIdentityEqual(NetworkIdentity, UInt32) NetworkBehaviour.SetSyncVarNetworkIdentity(NetworkIdentity, NetworkIdentity, UInt64, UInt32) NetworkBehaviour.GetSyncVarNetworkIdentity(UInt32, NetworkIdentity) NetworkBehaviour.SyncVarEqual<T>(T, T) NetworkBehaviour.SetSyncVar<T>(T, T, UInt64) NetworkBehaviour.SetDirtyBit(UInt64) NetworkBehaviour.ClearAllDirtyBits() NetworkBehaviour.IsDirty() NetworkBehaviour.OnSerialize(NetworkWriter, Boolean) NetworkBehaviour.OnDeserialize(NetworkReader, Boolean) NetworkBehaviour.SerializeSyncVars(NetworkWriter, Boolean) NetworkBehaviour.DeserializeSyncVars(NetworkReader, Boolean) NetworkBehaviour.SerializeObjectsAll(NetworkWriter) NetworkBehaviour.SerializeObjectsDelta(NetworkWriter) NetworkBehaviour.OnStopClient() NetworkBehaviour.OnStartServer() NetworkBehaviour.OnStopServer() NetworkBehaviour.OnStartClient() NetworkBehaviour.OnStartLocalPlayer() NetworkBehaviour.OnStartAuthority() NetworkBehaviour.OnStopAuthority() Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkBehaviourSendTargetRPCInternalComponent : NetworkBehaviour Fields | Improve this Doc View Source called Declaration public int called Field Value Type Description Int32 Methods | Improve this Doc View Source CallSendTargetRPCInternal(NetworkConnection) Declaration public void CallSendTargetRPCInternal(NetworkConnection conn) Parameters Type Name Description NetworkConnection conn | Improve this Doc View Source TargetRPCGenerated(NetworkBehaviour, NetworkReader, NetworkConnection) Declaration public static void TargetRPCGenerated(NetworkBehaviour comp, NetworkReader reader, NetworkConnection senderConnection) Parameters Type Name Description NetworkBehaviour comp NetworkReader reader NetworkConnection senderConnection"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.List_string_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.List_string_Test.Message.html",
    "title": "Struct List_string_Test.Message",
    "keywords": "Struct List_string_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public List<string> collection Field Value Type Description List < String > Implements NetworkMessage"
  },
  "api/Mirror.Tests.NetworkManagerStopHostOnServerDisconnectTest.html": {
    "href": "api/Mirror.Tests.NetworkManagerStopHostOnServerDisconnectTest.html",
    "title": "Class NetworkManagerStopHostOnServerDisconnectTest",
    "keywords": "Class NetworkManagerStopHostOnServerDisconnectTest Inheritance Object NetworkManagerStopHostOnServerDisconnectTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkManagerStopHostOnServerDisconnectTest : object Methods | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source StopHostCallsOnServerDisconnectForHostClient() Declaration public void StopHostCallsOnServerDisconnectForHostClient() | Improve this Doc View Source TearDown() Declaration public void TearDown()"
  },
  "api/Mirror.Weaver.html": {
    "href": "api/Mirror.Weaver.html",
    "title": "Namespace Mirror.Weaver",
    "keywords": "Namespace Mirror.Weaver Classes CommandProcessor Processes [Command] methods in NetworkBehaviour CompilationFinishedHook Extensions GenerateWriterException Log MethodProcessor PropertySiteProcessor Readers ReaderWriterProcessor Resolvers RpcProcessor Processes [Rpc] methods in NetworkBehaviour SyncObjectInitializer SyncObjectProcessor SyncVarProcessor Processes [SyncVar] in NetworkBehaviour TargetRpcProcessor Processes [TargetRpc] methods in NetworkBehaviour WeaverException WeaverTypes Writers Enums RemoteCallType"
  },
  "api/kcp2k.KcpConnection.html": {
    "href": "api/kcp2k.KcpConnection.html",
    "title": "Class KcpConnection",
    "keywords": "Class KcpConnection Inheritance Object KcpConnection KcpClientConnection KcpServerConnection Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : kcp2k Assembly : kcp2k.dll Syntax public abstract class KcpConnection Fields | Improve this Doc View Source MaxMessageSize Declaration public const int MaxMessageSize = 149352 Field Value Type Description Int32 | Improve this Doc View Source OnAuthenticated Declaration public Action OnAuthenticated Field Value Type Description Action | Improve this Doc View Source OnData Declaration public Action<ArraySegment<byte>> OnData Field Value Type Description Action < ArraySegment < Byte >> | Improve this Doc View Source OnDisconnected Declaration public Action OnDisconnected Field Value Type Description Action | Improve this Doc View Source PING_INTERVAL Declaration public const int PING_INTERVAL = 1000 Field Value Type Description Int32 | Improve this Doc View Source remoteEndpoint Declaration protected EndPoint remoteEndpoint Field Value Type Description EndPoint | Improve this Doc View Source socket Declaration protected Socket socket Field Value Type Description Socket | Improve this Doc View Source TIMEOUT Declaration public const int TIMEOUT = 10000 Field Value Type Description Int32 Properties | Improve this Doc View Source ReceiveBufferCount Declaration public int ReceiveBufferCount { get; } Property Value Type Description Int32 | Improve this Doc View Source ReceiveQueueCount Declaration public int ReceiveQueueCount { get; } Property Value Type Description Int32 | Improve this Doc View Source SendBufferCount Declaration public int SendBufferCount { get; } Property Value Type Description Int32 | Improve this Doc View Source SendQueueCount Declaration public int SendQueueCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Disconnect() Declaration public void Disconnect() | Improve this Doc View Source Dispose() Declaration protected virtual void Dispose() | Improve this Doc View Source GetRemoteEndPoint() Declaration public EndPoint GetRemoteEndPoint() Returns Type Description EndPoint | Improve this Doc View Source RawInput(Byte[], Int32) Declaration public void RawInput(byte[] buffer, int msgLength) Parameters Type Name Description Byte [] buffer Int32 msgLength | Improve this Doc View Source RawSend(Byte[], Int32) Declaration protected abstract void RawSend(byte[] data, int length) Parameters Type Name Description Byte [] data Int32 length | Improve this Doc View Source Send(ArraySegment<Byte>) Declaration public void Send(ArraySegment<byte> data) Parameters Type Name Description ArraySegment < Byte > data | Improve this Doc View Source SendHandshake() Declaration public void SendHandshake() | Improve this Doc View Source SetupKcp(Boolean, UInt32, Int32, Boolean, UInt32, UInt32) Declaration protected void SetupKcp(bool noDelay, uint interval = 100U, int fastResend = 0, bool congestionWindow = true, uint sendWindowSize = 32U, uint receiveWindowSize = 128U) Parameters Type Name Description Boolean noDelay UInt32 interval Int32 fastResend Boolean congestionWindow UInt32 sendWindowSize UInt32 receiveWindowSize | Improve this Doc View Source Tick() Declaration public void Tick()"
  },
  "api/Mirror.SyncList-1.Enumerator.html": {
    "href": "api/Mirror.SyncList-1.Enumerator.html",
    "title": "Struct SyncList<T>.Enumerator",
    "keywords": "Struct SyncList<T>.Enumerator Implements IEnumerator <T> Namespace : Mirror Assembly : Mirror.dll Syntax public struct Enumerator : IEnumerator<T> Constructors | Improve this Doc View Source Enumerator(SyncList<T>) Declaration public Enumerator(SyncList<T> list) Parameters Type Name Description SyncList <T> list Properties | Improve this Doc View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Implements IEnumerator<>"
  },
  "api/Mirror.SimpleWeb.Log.html": {
    "href": "api/Mirror.SimpleWeb.Log.html",
    "title": "Class Log",
    "keywords": "Class Log Inheritance Object Log Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public static class Log : object Fields | Improve this Doc View Source level Declaration public static Log.Levels level Field Value Type Description Log.Levels | Improve this Doc View Source logger Declaration public static ILogger logger Field Value Type Description ILogger Methods | Improve this Doc View Source BufferToString(Byte[], Int32, Nullable<Int32>) Declaration public static string BufferToString(byte[] buffer, int offset = 0, int? length = null) Parameters Type Name Description Byte [] buffer Int32 offset Nullable < Int32 > length Returns Type Description String | Improve this Doc View Source DumpBuffer(String, ArrayBuffer) Declaration public static void DumpBuffer(string label, ArrayBuffer arrayBuffer) Parameters Type Name Description String label ArrayBuffer arrayBuffer | Improve this Doc View Source DumpBuffer(String, Byte[], Int32, Int32) Declaration public static void DumpBuffer(string label, byte[] buffer, int offset, int length) Parameters Type Name Description String label Byte [] buffer Int32 offset Int32 length | Improve this Doc View Source Error(String, Boolean) Declaration public static void Error(string msg, bool showColor = true) Parameters Type Name Description String msg Boolean showColor | Improve this Doc View Source Exception(Exception) Declaration public static void Exception(Exception e) Parameters Type Name Description Exception e | Improve this Doc View Source Info(String, Boolean) Declaration public static void Info(string msg, bool showColor = true) Parameters Type Name Description String msg Boolean showColor | Improve this Doc View Source InfoException(Exception) An expected Exception was caught, useful for debugging but not important Declaration public static void InfoException(Exception e) Parameters Type Name Description Exception e | Improve this Doc View Source Verbose(String, Boolean) Declaration public static void Verbose(string msg, bool showColor = true) Parameters Type Name Description String msg Boolean showColor | Improve this Doc View Source Warn(String, Boolean) Declaration public static void Warn(string msg, bool showColor = true) Parameters Type Name Description String msg Boolean showColor"
  },
  "api/Mirror.Tests.ClientSceneTestsBase.html": {
    "href": "api/Mirror.Tests.ClientSceneTestsBase.html",
    "title": "Class ClientSceneTestsBase",
    "keywords": "Class ClientSceneTestsBase Used by both runtime and edittime tests Inheritance Object ClientSceneTestsBase ClientSceneTests_ClearSpawners ClientSceneTests_GetPrefab ClientSceneTests_OnSpawn ClientSceneTests_PrepareToSpawnSceneObjects ClientSceneTests_RegisterSpawnHandler ClientSceneTests_UnregisterPrefab ClientSceneTests_UnregisterSpawnHandler ClientSceneTests_RegisterPrefabBase ClientSceneTests_LocalPlayer Namespace : Mirror.Tests Assembly : Mirror.Tests.Common.dll Syntax public abstract class ClientSceneTestsBase : object Fields | Improve this Doc View Source _createdObjects Declaration protected readonly List<GameObject> _createdObjects Field Value Type Description List < GameObject > | Improve this Doc View Source anotherGuid Declaration protected Guid anotherGuid Field Value Type Description Guid | Improve this Doc View Source AnotherGuidString Declaration protected const string AnotherGuidString = null Field Value Type Description String | Improve this Doc View Source invalidPrefab Declaration protected GameObject invalidPrefab Field Value Type Description GameObject | Improve this Doc View Source InvalidPrefabAssetGuid Declaration protected const string InvalidPrefabAssetGuid = null Field Value Type Description String | Improve this Doc View Source prefabWithChildren Declaration protected GameObject prefabWithChildren Field Value Type Description GameObject | Improve this Doc View Source PrefabWithChildrenAssetGuid Declaration protected const string PrefabWithChildrenAssetGuid = null Field Value Type Description String | Improve this Doc View Source validPrefab Declaration protected GameObject validPrefab Field Value Type Description GameObject | Improve this Doc View Source ValidPrefabAssetGuid Declaration protected const string ValidPrefabAssetGuid = null Field Value Type Description String | Improve this Doc View Source validPrefabGuid Declaration protected Guid validPrefabGuid Field Value Type Description Guid | Improve this Doc View Source validPrefabNetworkIdentity Declaration protected NetworkIdentity validPrefabNetworkIdentity Field Value Type Description NetworkIdentity Properties | Improve this Doc View Source prefabs Declaration protected Dictionary<Guid, GameObject> prefabs { get; } Property Value Type Description Dictionary < Guid , GameObject > | Improve this Doc View Source spawnableObjects Declaration protected Dictionary<ulong, NetworkIdentity> spawnableObjects { get; } Property Value Type Description Dictionary < UInt64 , NetworkIdentity > | Improve this Doc View Source spawnHandlers Declaration protected Dictionary<Guid, SpawnHandlerDelegate> spawnHandlers { get; } Property Value Type Description Dictionary < Guid , SpawnHandlerDelegate > | Improve this Doc View Source unspawnHandlers Declaration protected Dictionary<Guid, UnSpawnDelegate> unspawnHandlers { get; } Property Value Type Description Dictionary < Guid , UnSpawnDelegate > Methods | Improve this Doc View Source OneTimeSetUp() Declaration public void OneTimeSetUp() | Improve this Doc View Source OneTimeTearDown() Declaration public void OneTimeTearDown() | Improve this Doc View Source TearDown() Declaration public virtual void TearDown()"
  },
  "api/Telepathy.SafeQueue-1.html": {
    "href": "api/Telepathy.SafeQueue-1.html",
    "title": "Class SafeQueue<T>",
    "keywords": "Class SafeQueue<T> Inheritance Object SafeQueue<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Telepathy Assembly : Telepathy.dll Syntax public class SafeQueue<T> Type Parameters Name Description T Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Enqueue(T) Declaration public void Enqueue(T item) Parameters Type Name Description T item | Improve this Doc View Source TryDequeue(out T) Declaration public bool TryDequeue(out T result) Parameters Type Name Description T result Returns Type Description Boolean | Improve this Doc View Source TryDequeueAll(out T[]) Declaration public bool TryDequeueAll(out T[] result) Parameters Type Name Description T[] result Returns Type Description Boolean"
  },
  "api/Mirror.ConnectMessage.html": {
    "href": "api/Mirror.ConnectMessage.html",
    "title": "Struct ConnectMessage",
    "keywords": "Struct ConnectMessage Implements NetworkMessage Namespace : Mirror Assembly : Mirror.dll Syntax public struct ConnectMessage : NetworkMessage Implements NetworkMessage"
  },
  "api/Mirror.Cloud.Example.QuickListServerDebug.html": {
    "href": "api/Mirror.Cloud.Example.QuickListServerDebug.html",
    "title": "Class QuickListServerDebug",
    "keywords": "Class QuickListServerDebug This Script can be used to test the list server without needing to use canvas or other UI Inheritance Object QuickListServerDebug Namespace : Mirror.Cloud.Example Assembly : Mirror.Examples.Cloud.GUI.dll Syntax public class QuickListServerDebug : MonoBehaviour Methods | Improve this Doc View Source OnGUI() Declaration public void OnGUI()"
  },
  "api/Mirror.html": {
    "href": "api/Mirror.html",
    "title": "Namespace Mirror",
    "keywords": "Namespace Mirror Classes Channels ClientAttribute Prevents the server from running this method. Prints a warning if the server tries to execute this method. ClientCallbackAttribute Prevents the server from running this method. No warning is printed. ClientRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on clients. ClientScene A client manager which contains static client information and functions. This manager contains references to tracked static local objects such as spawner registrations. It also has the default message handlers used by clients when they registered none themselves. The manager handles adding/removing player objects to the game after a client connection has been set as ready. The ClientScene is a singleton, and it has static convenience methods such as ClientScene.Ready(). The ClientScene is used by the NetworkManager, but it can be used by itself. As the ClientScene manages player objects on the client, it is where clients request to add players. The NetworkManager does this via the ClientScene automatically when auto-add-players is set, but it can be done through code using the function ClientScene.AddPlayer(). This sends an AddPlayer message to the server and will cause a player object to be created for this client. Like NetworkServer, the ClientScene understands the concept of the local client. The function ClientScene.ConnectLocalServer() is used to become a host by starting a local client (when a server is already running). CommandAttribute Call this from a client to run this function on the server. Make sure to validate input etc. It's not possible to call this from a server. Compression Functions to Compress Quaternions and Floats EnterPlayModeSettingsCheck ExponentialMovingAverage FallbackTransport ILoggerExtensions InspectorHelper LLAPITransport LogFactory LogFilter MessageBase MessagePacker MiddlewareTransport Allows Middleware to override some of the transport methods or let the inner transport handle them. MultiplexTransport NetworkAnimator A component to synchronize Mecanim animation states for networked objects. NetworkAuthenticator Base class for implementing component-based authentication during the Connect phase NetworkBehaviour Base class which should be inherited by scripts which contain networking functionality. NetworkBehaviourInspector NetworkClient This is a network client class used by the networking system. It contains a NetworkConnection that is used to connect to a network server. The NetworkClient handle connection state, messages handlers, and connection configuration. There can be many NetworkClient instances in a process at a time, but only one that is connected to a game server ( NetworkServer ) that uses spawned objects. NetworkClient has an internal update function where it handles events from the transport layer. This includes asynchronous connect events, disconnect events and incoming data from a server. The NetworkManager has a NetworkClient instance that it uses for games that it starts, but the NetworkClient may be used by itself. NetworkConnection A High level network connection. This is used for connections from client-to-server and for connection from server-to-client. NetworkConnectionToClient NetworkConnectionToServer NetworkDiagnostics Provides profiling information from mirror A profiler can subscribe to these events and present the data in a friendly way to the user NetworkIdentity The NetworkIdentity identifies objects across the network, between server and clients. Its primary data is a NetworkInstanceId which is allocated by the server and then set on clients. This is used in network communications to be able to lookup game objects on different machines. NetworkLobbyManager This is a specialized NetworkManager that includes a networked lobby. NetworkLobbyPlayer This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system. The LobbyPrefab object of the NetworkLobbyManager must have this component on it. This component holds basic lobby player data required for the lobby to function. Game specific data for lobby players can be put in other components on the LobbyPrefab or in scripts derived from NetworkLobbyPlayer. NetworkManager NetworkManagerEditor NetworkManagerHUD An extension for the NetworkManager that displays a default HUD for controlling the network state of the game. This component also shows useful internal state for the networking system in the inspector window of the editor. It allows users to view connections, networked objects, message handlers, and packet statistics. This information can be helpful when debugging networked games. NetworkMatchChecker Component that controls visibility of networked objects based on match id. Any object with this component on it will only be visible to other objects in the same match. This would be used to isolate players to their respective matches within a single game server instance. NetworkPingDisplay Component that will display the clients ping in milliseconds NetworkProximityChecker Component that controls visibility of networked objects for players. Any object with this component on it will not be visible to players more than a (configurable) distance away. NetworkReader Binary stream Reader. Supports simple types, buffers, arrays, structs, and nested types Use GetReader(Byte[]) to reduce memory allocation Note: This class is intended to be extremely pedantic, and throw exceptions whenever stuff is going slightly wrong. The exceptions will be handled in NetworkServer/NetworkClient. NetworkReaderExtensions Built in Reader functions for Mirror Weaver automatically decects all extension methods for NetworkWriter NetworkReaderPool Pool of NetworkReaders Use this pool instead of NetworkReader to reduce memory allocation NetworkRoomManager This is a specialized NetworkManager that includes a networked room. NetworkRoomPlayer This component works in conjunction with the NetworkRoomManager to make up the multiplayer room system. The RoomPrefab object of the NetworkRoomManager must have this component on it. This component holds basic room player data required for the room to function. Game specific data for room players can be put in other components on the RoomPrefab or in scripts derived from NetworkRoomPlayer. NetworkSceneChecker Component that controls visibility of networked objects between scenes. Any object with this component on it will only be visible to other objects in the same scene This would be used when the server has multiple additive subscenes loaded to isolate players to their respective subscenes NetworkScenePostProcess NetworkServer The NetworkServer. NetworkStartPosition This component is used to make a gameObject a starting position for spawning player objects in multiplayer games. This object's transform will be automatically registered and unregistered with the NetworkManager as a starting position. NetworkTime Synchronize time between the server and the clients NetworkTransform NetworkTransformBase NetworkTransformBase.DataPoint NetworkTransformChild A component to synchronize the position of child transforms of networked objects. There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values. NetworkVisibility NetworkWriter Binary stream Writer. Supports simple types, buffers, arrays, structs, and nested types Use GetWriter() to reduce memory allocation NetworkWriterExtensions Built in Writer functions for Mirror Weaver automatically decects all extension methods for NetworkWriter NetworkWriterPool Pool of NetworkWriters Use this pool instead of NetworkWriter to reduce memory allocation Pool<T> PooledNetworkReader NetworkReader to be used with NetworkReaderPool PooledNetworkWriter NetworkWriter to be used with NetworkWriterPool Reader<T> a class that holds readers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver SceneAttribute Converts a string property into a Scene property in the inspector SceneDrawer ServerAttribute Prevents clients from running this method. Prints a warning if a client tries to execute this method. ServerCallbackAttribute Prevents clients from running this method. No warning is thrown. ShowInInspectorAttribute Used to show private SyncList in the inspector, Use instead of SerializeField for non Serializable types StringHash SyncDictionary<TKey, TValue> SyncHashSet<T> SyncIDictionary<TKey, TValue> SyncList<T> SyncListBool SyncListDrawer SyncListFloat SyncListInt SyncListString SyncListUInt SyncSet<T> SyncSortedSet<T> SyncVarAttribute SyncVars are used to synchronize a variable from the server to all clients automatically. Value must be changed on server, not directly by clients. Hook parameter allows you to define a client-side method to be invoked when the client gets an update from the server. SyncVarAttributeDrawer TargetRpcAttribute The server uses a Remote Procedure Call (RPC) to run this function on a specific client. TelepathyTransport Transport Abstract transport layer component UnityEventNetworkConnection Unity Event for the NetworkConnection Writer<T> A class that holds writers for the different types Note that c# creates a different static variable for each type This will be populated by the weaver Structs AddPlayerMessage CommandMessage ConnectMessage DisconnectMessage ErrorMessage NetworkDiagnostics.MessageInfo Describes an outgoing message NetworkPingMessage NetworkPongMessage NetworkRoomManager.PendingPlayer NotReadyMessage ObjectDestroyMessage ObjectHideMessage ObjectSpawnFinishedMessage ObjectSpawnStartedMessage ReadyMessage RpcMessage SceneMessage SpawnMessage SyncList<T>.Enumerator UpdateVarsMessage Interfaces IMessageBase NetworkMessage SyncObject A sync object is an object that can synchronize it's state between server and client, such as a SyncList Enums ConnectState MirrorInvokeType NetworkManagerMode Enumeration of methods of current Network Manager state at runtime. PlayerSpawnMethod Enumeration of methods of where to spawn player objects in multiplayer games. SceneOperation SyncIDictionary<TKey, TValue>.Operation SyncList<T>.Operation SyncMode Sync to everyone, or only to owner. SyncSet<T>.Operation Version Delegates ClientScene.LocalplayerChanged NetworkIdentity.ClientAuthorityCallback The delegate type for the clientAuthorityCallback. NetworkMessageDelegate SpawnDelegate SpawnHandlerDelegate SyncIDictionary<TKey, TValue>.SyncDictionaryChanged SyncList<T>.SyncListChanged SyncSet<T>.SyncSetChanged UnSpawnDelegate"
  },
  "api/Mirror.Tests.Runtime.NetworkServerRuntimeTest.html": {
    "href": "api/Mirror.Tests.Runtime.NetworkServerRuntimeTest.html",
    "title": "Class NetworkServerRuntimeTest",
    "keywords": "Class NetworkServerRuntimeTest Inheritance Object NetworkServerRuntimeTest Namespace : Mirror.Tests.Runtime Assembly : Mirror.Tests.Runtime.dll Syntax public class NetworkServerRuntimeTest : object Methods | Improve this Doc View Source DestroyPlayerForConnectionTest() Declaration public IEnumerator DestroyPlayerForConnectionTest() Returns Type Description IEnumerator | Improve this Doc View Source RemovePlayerForConnectionTest() Declaration public IEnumerator RemovePlayerForConnectionTest() Returns Type Description IEnumerator | Improve this Doc View Source Shutdown_DestroysAllSpawnedPrefabs() Declaration public IEnumerator Shutdown_DestroysAllSpawnedPrefabs() Returns Type Description IEnumerator | Improve this Doc View Source Shutdown_DisablesAllSpawnedPrefabs() Declaration public void Shutdown_DisablesAllSpawnedPrefabs() | Improve this Doc View Source TearDown() Declaration public void TearDown() | Improve this Doc View Source UnitySetUp() Declaration public IEnumerator UnitySetUp() Returns Type Description IEnumerator"
  },
  "api/Mirror.Experimental.NetworkTransformBase.DataPoint.html": {
    "href": "api/Mirror.Experimental.NetworkTransformBase.DataPoint.html",
    "title": "Struct NetworkTransformBase.DataPoint",
    "keywords": "Struct NetworkTransformBase.DataPoint Namespace : Mirror.Experimental Assembly : Mirror.Components.dll Syntax public struct DataPoint Fields | Improve this Doc View Source localPosition Declaration public Vector3 localPosition Field Value Type Description Vector3 | Improve this Doc View Source localRotation Declaration public Quaternion localRotation Field Value Type Description Quaternion | Improve this Doc View Source localScale Declaration public Vector3 localScale Field Value Type Description Vector3 | Improve this Doc View Source movementSpeed Declaration public float movementSpeed Field Value Type Description Single | Improve this Doc View Source timeStamp Declaration public float timeStamp Field Value Type Description Single Properties | Improve this Doc View Source isValid Declaration public bool isValid { get; } Property Value Type Description Boolean"
  },
  "api/Mirror.Tests.SyncListTest.html": {
    "href": "api/Mirror.Tests.SyncListTest.html",
    "title": "Class SyncListTest",
    "keywords": "Class SyncListTest Inheritance Object SyncListTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class SyncListTest : object Methods | Improve this Doc View Source CallbackRemoveAtTest() Declaration public void CallbackRemoveAtTest() | Improve this Doc View Source CallbackRemoveTest() Declaration public void CallbackRemoveTest() | Improve this Doc View Source CallbackTest() Declaration public void CallbackTest() | Improve this Doc View Source CountTest() Declaration public void CountTest() | Improve this Doc View Source DirtyTest() Declaration public void DirtyTest() | Improve this Doc View Source ObjectCanBeReusedAfterReset() Declaration public void ObjectCanBeReusedAfterReset() | Improve this Doc View Source ReadOnlyTest() Declaration public void ReadOnlyTest() | Improve this Doc View Source ResetShouldClearChanges() Declaration public void ResetShouldClearChanges() | Improve this Doc View Source ResetShouldClearItems() Declaration public void ResetShouldClearItems() | Improve this Doc View Source ResetShouldSetReadOnlyToFalse() Declaration public void ResetShouldSetReadOnlyToFalse() | Improve this Doc View Source SerializeAllTo<T>(T, T) Declaration public static void SerializeAllTo<T>(T fromList, T toList) where T : SyncObject Parameters Type Name Description T fromList T toList Type Parameters Name Description T | Improve this Doc View Source SerializeDeltaTo<T>(T, T) Declaration public static void SerializeDeltaTo<T>(T fromList, T toList) where T : SyncObject Parameters Type Name Description T fromList T toList Type Parameters Name Description T | Improve this Doc View Source SetUp() Declaration public void SetUp() | Improve this Doc View Source SyncListBoolTest() Declaration public void SyncListBoolTest() | Improve this Doc View Source SyncListFloatTest() Declaration public void SyncListFloatTest() | Improve this Doc View Source SyncListIntTest() Declaration public void SyncListIntTest() | Improve this Doc View Source SyncListUIntTest() Declaration public void SyncListUIntTest() | Improve this Doc View Source TestAdd() Declaration public void TestAdd() | Improve this Doc View Source TestAddRange() Declaration public void TestAddRange() | Improve this Doc View Source TestClear() Declaration public void TestClear() | Improve this Doc View Source TestFind() Declaration public void TestFind() | Improve this Doc View Source TestFindAll() Declaration public void TestFindAll() | Improve this Doc View Source TestFindAllNonExistent() Declaration public void TestFindAllNonExistent() | Improve this Doc View Source TestFindIndex() Declaration public void TestFindIndex() | Improve this Doc View Source TestInit() Declaration public void TestInit() | Improve this Doc View Source TestInsert() Declaration public void TestInsert() | Improve this Doc View Source TestInsertRange() Declaration public void TestInsertRange() | Improve this Doc View Source TestMultSync() Declaration public void TestMultSync() | Improve this Doc View Source TestNoFind() Declaration public void TestNoFind() | Improve this Doc View Source TestRemove() Declaration public void TestRemove() | Improve this Doc View Source TestRemoveAll() Declaration public void TestRemoveAll() | Improve this Doc View Source TestRemoveAllNone() Declaration public void TestRemoveAllNone() | Improve this Doc View Source TestRemoveAt() Declaration public void TestRemoveAt() | Improve this Doc View Source TestSet() Declaration public void TestSet() | Improve this Doc View Source TestSetNull() Declaration public void TestSetNull() | Improve this Doc View Source WritingToReadOnlyThrows() Declaration public void WritingToReadOnlyThrows()"
  },
  "api/Mirror.Tests.NetworkReaderPoolTest.html": {
    "href": "api/Mirror.Tests.NetworkReaderPoolTest.html",
    "title": "Class NetworkReaderPoolTest",
    "keywords": "Class NetworkReaderPoolTest Inheritance Object NetworkReaderPoolTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class NetworkReaderPoolTest : object Methods | Improve this Doc View Source TestPoolRecycling() Declaration public void TestPoolRecycling()"
  },
  "api/Mirror.SyncVarAttribute.html": {
    "href": "api/Mirror.SyncVarAttribute.html",
    "title": "Class SyncVarAttribute",
    "keywords": "Class SyncVarAttribute SyncVars are used to synchronize a variable from the server to all clients automatically. Value must be changed on server, not directly by clients. Hook parameter allows you to define a client-side method to be invoked when the client gets an update from the server. Inheritance Object SyncVarAttribute Namespace : Mirror Assembly : Mirror.dll Syntax public class SyncVarAttribute : PropertyAttribute Fields | Improve this Doc View Source hook Declaration public string hook Field Value Type Description String"
  },
  "api/Mirror.Tests.SyncVarTest.html": {
    "href": "api/Mirror.Tests.SyncVarTest.html",
    "title": "Class SyncVarTest",
    "keywords": "Class SyncVarTest Inheritance Object SyncVarTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class SyncVarTest : object Methods | Improve this Doc View Source TestSettingStruct() Declaration public void TestSettingStruct() | Improve this Doc View Source TestSynchronizingObjects() Declaration public void TestSynchronizingObjects() | Improve this Doc View Source TestSyncIntervalAndClearAllComponents() Declaration public void TestSyncIntervalAndClearAllComponents() | Improve this Doc View Source TestSyncIntervalAndClearDirtyComponents() Declaration public void TestSyncIntervalAndClearDirtyComponents()"
  },
  "api/Mirror.Weaver.CompilationFinishedHook.html": {
    "href": "api/Mirror.Weaver.CompilationFinishedHook.html",
    "title": "Class CompilationFinishedHook",
    "keywords": "Class CompilationFinishedHook Inheritance Object CompilationFinishedHook Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class CompilationFinishedHook : object Fields | Improve this Doc View Source OnWeaverError Declaration public static Action<string> OnWeaverError Field Value Type Description Action < String > | Improve this Doc View Source OnWeaverMessage Declaration public static Action<string> OnWeaverMessage Field Value Type Description Action < String > | Improve this Doc View Source OnWeaverWarning Declaration public static Action<string> OnWeaverWarning Field Value Type Description Action < String > | Improve this Doc View Source UnityLogEnabled Declaration public static bool UnityLogEnabled Field Value Type Description Boolean Properties | Improve this Doc View Source WeaverEnabled Declaration public static bool WeaverEnabled { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source OnInitializeOnLoad() Declaration public static void OnInitializeOnLoad() | Improve this Doc View Source WeaveExistingAssemblies() Declaration public static void WeaveExistingAssemblies()"
  },
  "api/Mirror.Tests.Runtime.ClientSceneTests.html": {
    "href": "api/Mirror.Tests.Runtime.ClientSceneTests.html",
    "title": "Namespace Mirror.Tests.Runtime.ClientSceneTests",
    "keywords": "Namespace Mirror.Tests.Runtime.ClientSceneTests Classes BadBehaviour A network Behaviour that changes NetworkIdentity.spawned in OnDisable ClientSceneTest_LocalPlayer_asHost ClientSceneTests_DestroyAllClientObjects ClientSceneTests_LocalPlayer ClientSceneTests_Runtime_RegisterPrefab TestListenerBehaviour"
  },
  "api/Mirror.SimpleWeb.html": {
    "href": "api/Mirror.SimpleWeb.html",
    "title": "Namespace Mirror.SimpleWeb",
    "keywords": "Namespace Mirror.SimpleWeb Classes ArrayBuffer BufferPool Collection of different sized buffers Log MessageProcessor ReadHelper ReadHelperException SendLoopConfig SimpleWebClient Client used to control websockets Base class used by WebSocketClientWebGl and WebSocketClientStandAlone SimpleWebServer SimpleWebTransport WebSocketClientStandAlone WebSocketClientWebGl WebSocketServer Structs Message SslConfig TcpConfig Interfaces IBufferOwner Enums ClientState EventType Log.Levels"
  },
  "api/Mirror.Examples.Additive.html": {
    "href": "api/Mirror.Examples.Additive.html",
    "title": "Namespace Mirror.Examples.Additive",
    "keywords": "Namespace Mirror.Examples.Additive Classes AdditiveNetworkManager PlayerController RandomColor ShootingTankBehaviour ZoneHandler"
  },
  "api/Mirror.Authenticators.html": {
    "href": "api/Mirror.Authenticators.html",
    "title": "Namespace Mirror.Authenticators",
    "keywords": "Namespace Mirror.Authenticators Classes BasicAuthenticator TimeoutAuthenticator An authenticator that disconnects connections if they don't authenticate within a specified time limit. Structs BasicAuthenticator.AuthRequestMessage BasicAuthenticator.AuthResponseMessage"
  },
  "api/Mirror.Tests.MessageTests.html": {
    "href": "api/Mirror.Tests.MessageTests.html",
    "title": "Namespace Mirror.Tests.MessageTests",
    "keywords": "Namespace Mirror.Tests.MessageTests Classes BuiltInMessages MessageBaseTests MessageInheritanceTest OverloadMethodTest RequestMessageBase RequestMessageBaseReverse ResponseMessage ResponseMessageReverse"
  },
  "api/kcp2k.KcpServerConnection.html": {
    "href": "api/kcp2k.KcpServerConnection.html",
    "title": "Class KcpServerConnection",
    "keywords": "Class KcpServerConnection Inheritance Object KcpConnection KcpServerConnection Inherited Members KcpConnection.socket KcpConnection.remoteEndpoint KcpConnection.OnAuthenticated KcpConnection.OnData KcpConnection.OnDisconnected KcpConnection.TIMEOUT KcpConnection.MaxMessageSize KcpConnection.PING_INTERVAL KcpConnection.SendQueueCount KcpConnection.ReceiveQueueCount KcpConnection.SendBufferCount KcpConnection.ReceiveBufferCount KcpConnection.SetupKcp(Boolean, UInt32, Int32, Boolean, UInt32, UInt32) KcpConnection.Tick() KcpConnection.RawInput(Byte[], Int32) KcpConnection.Send(ArraySegment<Byte>) KcpConnection.SendHandshake() KcpConnection.Dispose() KcpConnection.Disconnect() KcpConnection.GetRemoteEndPoint() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : kcp2k Assembly : kcp2k.dll Syntax public class KcpServerConnection : KcpConnection Constructors | Improve this Doc View Source KcpServerConnection(Socket, EndPoint, Boolean, UInt32, Int32, Boolean, UInt32, UInt32) Declaration public KcpServerConnection(Socket socket, EndPoint remoteEndpoint, bool noDelay, uint interval = 100U, int fastResend = 0, bool congestionWindow = true, uint sendWindowSize = 32U, uint receiveWindowSize = 128U) Parameters Type Name Description Socket socket EndPoint remoteEndpoint Boolean noDelay UInt32 interval Int32 fastResend Boolean congestionWindow UInt32 sendWindowSize UInt32 receiveWindowSize Methods | Improve this Doc View Source RawSend(Byte[], Int32) Declaration protected override void RawSend(byte[] data, int length) Parameters Type Name Description Byte [] data Int32 length Overrides KcpConnection.RawSend(Byte[], Int32)"
  },
  "api/Mirror.Tests.FallbackTransportTest.html": {
    "href": "api/Mirror.Tests.FallbackTransportTest.html",
    "title": "Class FallbackTransportTest",
    "keywords": "Class FallbackTransportTest Inheritance Object FallbackTransportTest Namespace : Mirror.Tests Assembly : Mirror.Tests.dll Syntax public class FallbackTransportTest : object Methods | Improve this Doc View Source Setup() Declaration public void Setup() | Improve this Doc View Source TearDown() Declaration public void TearDown() | Improve this Doc View Source TestAvailable() Declaration public void TestAvailable() | Improve this Doc View Source TestClient1Connected() Declaration public void TestClient1Connected() | Improve this Doc View Source TestClient2Connected() Declaration public void TestClient2Connected() | Improve this Doc View Source TestClientSend() Declaration public void TestClientSend() | Improve this Doc View Source TestConnect() Declaration public void TestConnect() | Improve this Doc View Source TestConnected() Declaration public void TestConnected() | Improve this Doc View Source TestDisconnect() Declaration public void TestDisconnect() | Improve this Doc View Source TestNotAvailable() Declaration public void TestNotAvailable() | Improve this Doc View Source TestServerConnected() Declaration public void TestServerConnected()"
  },
  "api/Mirror.Logging.html": {
    "href": "api/Mirror.Logging.html",
    "title": "Namespace Mirror.Logging",
    "keywords": "Namespace Mirror.Logging Classes ConsoleColorLogHandler LogSettings LogSettingsExt NetworkHeadlessLogger Used to replace log hanlder with Console Color LogHandler NetworkLogSettings Used to load LogSettings in build Structs LogSettings.LoggerSettings"
  },
  "api/kcp2k.KcpClientConnection.html": {
    "href": "api/kcp2k.KcpClientConnection.html",
    "title": "Class KcpClientConnection",
    "keywords": "Class KcpClientConnection Inheritance Object KcpConnection KcpClientConnection Inherited Members KcpConnection.socket KcpConnection.remoteEndpoint KcpConnection.OnAuthenticated KcpConnection.OnData KcpConnection.OnDisconnected KcpConnection.TIMEOUT KcpConnection.MaxMessageSize KcpConnection.PING_INTERVAL KcpConnection.SendQueueCount KcpConnection.ReceiveQueueCount KcpConnection.SendBufferCount KcpConnection.ReceiveBufferCount KcpConnection.SetupKcp(Boolean, UInt32, Int32, Boolean, UInt32, UInt32) KcpConnection.Tick() KcpConnection.RawInput(Byte[], Int32) KcpConnection.Send(ArraySegment<Byte>) KcpConnection.SendHandshake() KcpConnection.Disconnect() KcpConnection.GetRemoteEndPoint() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : kcp2k Assembly : kcp2k.dll Syntax public class KcpClientConnection : KcpConnection Methods | Improve this Doc View Source Connect(String, UInt16, Boolean, UInt32, Int32, Boolean, UInt32, UInt32) Declaration public void Connect(string host, ushort port, bool noDelay, uint interval = 100U, int fastResend = 0, bool congestionWindow = true, uint sendWindowSize = 32U, uint receiveWindowSize = 128U) Parameters Type Name Description String host UInt16 port Boolean noDelay UInt32 interval Int32 fastResend Boolean congestionWindow UInt32 sendWindowSize UInt32 receiveWindowSize | Improve this Doc View Source Dispose() Declaration protected override void Dispose() Overrides KcpConnection.Dispose() | Improve this Doc View Source RawReceive() Declaration public void RawReceive() | Improve this Doc View Source RawSend(Byte[], Int32) Declaration protected override void RawSend(byte[] data, int length) Parameters Type Name Description Byte [] data Int32 length Overrides KcpConnection.RawSend(Byte[], Int32)"
  },
  "api/Mirror.SpawnDelegate.html": {
    "href": "api/Mirror.SpawnDelegate.html",
    "title": "Delegate SpawnDelegate",
    "keywords": "Delegate SpawnDelegate Namespace : Mirror Assembly : Mirror.dll Syntax public delegate GameObject SpawnDelegate(Vector3 position, Guid assetId); Parameters Type Name Description Vector3 position Guid assetId Returns Type Description GameObject"
  },
  "api/Mirror.EditorScripts.Logging.html": {
    "href": "api/Mirror.EditorScripts.Logging.html",
    "title": "Namespace Mirror.EditorScripts.Logging",
    "keywords": "Namespace Mirror.EditorScripts.Logging Classes LogLevelsGUI LogLevelWindow LogSettingsEditor NetworkLogSettingsEditor"
  },
  "api/Mirror.Cloud.RequestSuccess.html": {
    "href": "api/Mirror.Cloud.RequestSuccess.html",
    "title": "Delegate RequestSuccess",
    "keywords": "Delegate RequestSuccess Namespace : Mirror.Cloud Assembly : Mirror.Cloud.dll Syntax public delegate void RequestSuccess(string responseBody); Parameters Type Name Description String responseBody"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.List_string_Test.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.List_string_Test.html",
    "title": "Class List_string_Test",
    "keywords": "Class List_string_Test Inheritance Object List_string_Test Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public class List_string_Test : object Methods | Improve this Doc View Source SendsData() Declaration public void SendsData() | Improve this Doc View Source SendsEmpty() Declaration public void SendsEmpty() | Improve this Doc View Source SendsNull() Declaration public void SendsNull()"
  },
  "api/Mirror.Weaver.RpcProcessor.html": {
    "href": "api/Mirror.Weaver.RpcProcessor.html",
    "title": "Class RpcProcessor",
    "keywords": "Class RpcProcessor Processes [Rpc] methods in NetworkBehaviour Inheritance Object RpcProcessor Namespace : Mirror.Weaver Assembly : Mirror.Weaver.dll Syntax public static class RpcProcessor : object Methods | Improve this Doc View Source ProcessRpcCall(TypeDefinition, MethodDefinition, CustomAttribute) Declaration public static MethodDefinition ProcessRpcCall(TypeDefinition td, MethodDefinition md, CustomAttribute clientRpcAttr) Parameters Type Name Description TypeDefinition td MethodDefinition md CustomAttribute clientRpcAttr Returns Type Description MethodDefinition | Improve this Doc View Source ProcessRpcInvoke(TypeDefinition, MethodDefinition, MethodDefinition) Declaration public static MethodDefinition ProcessRpcInvoke(TypeDefinition td, MethodDefinition md, MethodDefinition rpcCallFunc) Parameters Type Name Description TypeDefinition td MethodDefinition md MethodDefinition rpcCallFunc Returns Type Description MethodDefinition"
  },
  "api/Mirror.UnSpawnDelegate.html": {
    "href": "api/Mirror.UnSpawnDelegate.html",
    "title": "Delegate UnSpawnDelegate",
    "keywords": "Delegate UnSpawnDelegate Namespace : Mirror Assembly : Mirror.dll Syntax public delegate void UnSpawnDelegate(GameObject spawned); Parameters Type Name Description GameObject spawned"
  },
  "api/Mirror.Transport.html": {
    "href": "api/Mirror.Transport.html",
    "title": "Class Transport",
    "keywords": "Class Transport Abstract transport layer component Inheritance Object Transport KcpTransport FallbackTransport LLAPITransport MiddlewareTransport MultiplexTransport SimpleWebTransport TelepathyTransport MemoryTransport Namespace : Mirror Assembly : Mirror.dll Syntax public abstract class Transport : MonoBehaviour Remarks Transport Rules All transports should follow these rules so that they work correctly with mirror When Monobehaviour is disabled the Transport should not invoke callbacks Callbacks should be invoked on main thread. It is best to do this from LateUpdate Callbacks can be invoked after ServerStop() or ClientDisconnect() as been called ServerStop() or ClientDisconnect() can be called by mirror multiple times Available() should check the platform and 32 vs 64 bit if the transport only works on some of them GetMaxPacketSize(Int32) should return size even if transport is not running Default channel should be reliable DefaultReliable Fields | Improve this Doc View Source activeTransport The current transport used by Mirror. Declaration public static Transport activeTransport Field Value Type Description Transport | Improve this Doc View Source OnClientConnected Notify subscribers when when this client establish a successful connection to the server callback() Declaration public Action OnClientConnected Field Value Type Description Action | Improve this Doc View Source OnClientDataReceived Notify subscribers when this client receive data from the server callback(ArraySegment<byte> data, int channel) Declaration public Action<ArraySegment<byte>, int> OnClientDataReceived Field Value Type Description Action < ArraySegment < Byte >, Int32 > | Improve this Doc View Source OnClientDisconnected Notify subscribers when this client disconnects from the server callback() Declaration public Action OnClientDisconnected Field Value Type Description Action | Improve this Doc View Source OnClientError Notify subscribers when this client encounters an error communicating with the server callback(Exception e) Declaration public Action<Exception> OnClientError Field Value Type Description Action < Exception > | Improve this Doc View Source OnServerConnected Notify subscribers when a client connects to this server callback(int connId) Declaration public Action<int> OnServerConnected Field Value Type Description Action < Int32 > | Improve this Doc View Source OnServerDataReceived Notify subscribers when this server receives data from the client callback(int connId, ArraySegment<byte> data, int channel) Declaration public Action<int, ArraySegment<byte>, int> OnServerDataReceived Field Value Type Description Action < Int32 , ArraySegment < Byte >, Int32 > | Improve this Doc View Source OnServerDisconnected Notify subscribers when a client disconnects from this server callback(int connId) Declaration public Action<int> OnServerDisconnected Field Value Type Description Action < Int32 > | Improve this Doc View Source OnServerError Notify subscribers when this server has some problem communicating with the client callback(int connId, Exception e) Declaration public Action<int, Exception> OnServerError Field Value Type Description Action < Int32 , Exception > Methods | Improve this Doc View Source Available() Is this transport available in the current platform? Some transports might only be available in mobile Many will not work in webgl Example usage: return Application.platform == RuntimePlatform.WebGLPlayer Declaration public abstract bool Available() Returns Type Description Boolean True if this transport works in the current platform | Improve this Doc View Source ClientConnect(String) Establish a connection to a server Declaration public abstract void ClientConnect(string address) Parameters Type Name Description String address The IP address or FQDN of the server we are trying to connect to | Improve this Doc View Source ClientConnect(Uri) Establish a connection to a server Declaration public virtual void ClientConnect(Uri uri) Parameters Type Name Description Uri uri The address of the server we are trying to connect to | Improve this Doc View Source ClientConnected() Determines if we are currently connected to the server Declaration public abstract bool ClientConnected() Returns Type Description Boolean True if a connection has been established to the server | Improve this Doc View Source ClientDisconnect() Disconnect this client from the server Declaration public abstract void ClientDisconnect() | Improve this Doc View Source ClientSend(Int32, ArraySegment<Byte>) Send data to the server Declaration public abstract void ClientSend(int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 channelId The channel to use. 0 is the default channel, but some transports might want to provide unreliable, encrypted, compressed, or any other feature as new channels ArraySegment < Byte > segment The data to send to the server. Will be recycled after returning, so either use it directly or copy it internally. This allows for allocation-free sends! | Improve this Doc View Source GetMaxPacketSize(Int32) The maximum packet size for a given channel. Unreliable transports usually can only deliver small packets. Reliable fragmented channels can usually deliver large ones. GetMaxPacketSize needs to return a value at all times. Even if the Transport isn't running, or isn't Available(). This is because Fallback and Multiplex transports need to find the smallest possible packet size at runtime. Declaration public abstract int GetMaxPacketSize(int channelId = null) Parameters Type Name Description Int32 channelId channel id Returns Type Description Int32 the size in bytes that can be sent via the provided channel | Improve this Doc View Source OnApplicationQuit() called when quitting the application by closing the window / pressing stop in the editor virtual so that inheriting classes' OnApplicationQuit() can call base.OnApplicationQuit() too Declaration public virtual void OnApplicationQuit() | Improve this Doc View Source ServerActive() Determines if the server is up and running Declaration public abstract bool ServerActive() Returns Type Description Boolean true if the transport is ready for connections from clients | Improve this Doc View Source ServerDisconnect(Int32) Disconnect a client from this server. Useful to kick people out. Declaration public abstract bool ServerDisconnect(int connectionId) Parameters Type Name Description Int32 connectionId the id of the client to disconnect Returns Type Description Boolean true if the client was kicked | Improve this Doc View Source ServerGetClientAddress(Int32) Get the client address Declaration public abstract string ServerGetClientAddress(int connectionId) Parameters Type Name Description Int32 connectionId id of the client Returns Type Description String address of the client | Improve this Doc View Source ServerSend(Int32, Int32, ArraySegment<Byte>) Send data to a client. Declaration public abstract void ServerSend(int connectionId, int channelId, ArraySegment<byte> segment) Parameters Type Name Description Int32 connectionId The client connection id to send the data to Int32 channelId The channel to be used. Transports can use channels to implement other features such as unreliable, encryption, compression, etc... ArraySegment < Byte > segment | Improve this Doc View Source ServerStart() Start listening for clients Declaration public abstract void ServerStart() | Improve this Doc View Source ServerStop() Stop listening for clients and disconnect all existing clients Declaration public abstract void ServerStop() | Improve this Doc View Source ServerUri() Retrieves the address of this server. Useful for network discovery Declaration public abstract Uri ServerUri() Returns Type Description Uri the url at which this server can be reached | Improve this Doc View Source Shutdown() Shut down the transport, both as client and server Declaration public abstract void Shutdown() | Improve this Doc View Source Update() Declaration public void Update()"
  },
  "api/Mirror.ClientCallbackAttribute.html": {
    "href": "api/Mirror.ClientCallbackAttribute.html",
    "title": "Class ClientCallbackAttribute",
    "keywords": "Class ClientCallbackAttribute Prevents the server from running this method. No warning is printed. Inheritance Object ClientCallbackAttribute Namespace : Mirror Assembly : Mirror.dll Syntax public class ClientCallbackAttribute : Attribute"
  },
  "api/Mirror.Weaver.Tests.WeaverGeneratedReaderWriterTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverGeneratedReaderWriterTests.html",
    "title": "Class WeaverGeneratedReaderWriterTests",
    "keywords": "Class WeaverGeneratedReaderWriterTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverGeneratedReaderWriterTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverGeneratedReaderWriterTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source CanUseCustomReadWriteForAbstractClass() Declaration public void CanUseCustomReadWriteForAbstractClass() | Improve this Doc View Source CanUseCustomReadWriteForInterfaces() Declaration public void CanUseCustomReadWriteForInterfaces() | Improve this Doc View Source CreatesForArraySegment() Declaration public void CreatesForArraySegment() | Improve this Doc View Source CreatesForClass() Declaration public void CreatesForClass() | Improve this Doc View Source CreatesForClassInherited() Declaration public void CreatesForClassInherited() | Improve this Doc View Source CreatesForClassWithValidConstructor() Declaration public void CreatesForClassWithValidConstructor() | Improve this Doc View Source CreatesForEnums() Declaration public void CreatesForEnums() | Improve this Doc View Source CreatesForInheritedFromScriptableObject() Declaration public void CreatesForInheritedFromScriptableObject() | Improve this Doc View Source CreatesForList() Declaration public void CreatesForList() | Improve this Doc View Source CreatesForStructArraySegment() Declaration public void CreatesForStructArraySegment() | Improve this Doc View Source CreatesForStructList() Declaration public void CreatesForStructList() | Improve this Doc View Source CreatesForStructs() Declaration public void CreatesForStructs() | Improve this Doc View Source ExcludesNonSerializedFields() Declaration public void ExcludesNonSerializedFields() | Improve this Doc View Source GivesErrorForClassWithNoValidConstructor() Declaration public void GivesErrorForClassWithNoValidConstructor() | Improve this Doc View Source GivesErrorForInvalidArraySegmentType() Declaration public void GivesErrorForInvalidArraySegmentType() | Improve this Doc View Source GivesErrorForInvalidArrayType() Declaration public void GivesErrorForInvalidArrayType() | Improve this Doc View Source GivesErrorForInvalidListType() Declaration public void GivesErrorForInvalidListType() | Improve this Doc View Source GivesErrorForJaggedArray() Declaration public void GivesErrorForJaggedArray() | Improve this Doc View Source GivesErrorForMultidimensionalArray() Declaration public void GivesErrorForMultidimensionalArray() | Improve this Doc View Source GivesErrorWhenUsingAbstractClass() Declaration public void GivesErrorWhenUsingAbstractClass() | Improve this Doc View Source GivesErrorWhenUsingInterface() Declaration public void GivesErrorWhenUsingInterface() | Improve this Doc View Source GivesErrorWhenUsingMonoBehaviour() Declaration public void GivesErrorWhenUsingMonoBehaviour() | Improve this Doc View Source GivesErrorWhenUsingObject() Declaration public void GivesErrorWhenUsingObject() | Improve this Doc View Source GivesErrorWhenUsingScriptableObject() Declaration public void GivesErrorWhenUsingScriptableObject() | Improve this Doc View Source GivesErrorWhenUsingTypeInheritedFromMonoBehaviour() Declaration public void GivesErrorWhenUsingTypeInheritedFromMonoBehaviour() | Improve this Doc View Source GivesErrorWhenUsingUnityAsset() Declaration public void GivesErrorWhenUsingUnityAsset() | Improve this Doc View Source GivesWarningWhenRegisteringExistingExtensionMethod() Declaration public void GivesWarningWhenRegisteringExistingExtensionMethod()"
  },
  "api/Mirror.PooledNetworkReader.html": {
    "href": "api/Mirror.PooledNetworkReader.html",
    "title": "Class PooledNetworkReader",
    "keywords": "Class PooledNetworkReader NetworkReader to be used with NetworkReaderPool Inheritance Object NetworkReader PooledNetworkReader Implements IDisposable Inherited Members NetworkReader.Position NetworkReader.Length NetworkReader.ReadBlittable<T>() NetworkReader.ReadBytes(Byte[], Int32) NetworkReader.ReadBytesSegment(Int32) NetworkReader.ToString() NetworkReader.Read<T>() Namespace : Mirror Assembly : Mirror.dll Syntax public class PooledNetworkReader : NetworkReader, IDisposable Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IDisposable Extension Methods ReadWrite.ReadSomeData(NetworkReader) MockQuestReaderWriter.WriteQuest(NetworkReader) MyCustomEnumReadWrite.ReadMyCustomEnum(NetworkReader) NetworkReaderExtensions.ReadByte(NetworkReader) NetworkReaderExtensions.ReadSByte(NetworkReader) NetworkReaderExtensions.ReadChar(NetworkReader) NetworkReaderExtensions.ReadBoolean(NetworkReader) NetworkReaderExtensions.ReadInt16(NetworkReader) NetworkReaderExtensions.ReadUInt16(NetworkReader) NetworkReaderExtensions.ReadInt32(NetworkReader) NetworkReaderExtensions.ReadUInt32(NetworkReader) NetworkReaderExtensions.ReadInt64(NetworkReader) NetworkReaderExtensions.ReadUInt64(NetworkReader) NetworkReaderExtensions.ReadSingle(NetworkReader) NetworkReaderExtensions.ReadDouble(NetworkReader) NetworkReaderExtensions.ReadDecimal(NetworkReader) NetworkReaderExtensions.ReadString(NetworkReader) NetworkReaderExtensions.ReadBytesAndSize(NetworkReader) NetworkReaderExtensions.ReadBytesAndSizeSegment(NetworkReader) NetworkReaderExtensions.ReadVector2(NetworkReader) NetworkReaderExtensions.ReadVector3(NetworkReader) NetworkReaderExtensions.ReadVector4(NetworkReader) NetworkReaderExtensions.ReadVector2Int(NetworkReader) NetworkReaderExtensions.ReadVector3Int(NetworkReader) NetworkReaderExtensions.ReadColor(NetworkReader) NetworkReaderExtensions.ReadColor32(NetworkReader) NetworkReaderExtensions.ReadQuaternion(NetworkReader) NetworkReaderExtensions.ReadRect(NetworkReader) NetworkReaderExtensions.ReadPlane(NetworkReader) NetworkReaderExtensions.ReadRay(NetworkReader) NetworkReaderExtensions.ReadMatrix4x4(NetworkReader) NetworkReaderExtensions.ReadBytes(NetworkReader, Int32) NetworkReaderExtensions.ReadGuid(NetworkReader) NetworkReaderExtensions.ReadTransform(NetworkReader) NetworkReaderExtensions.ReadGameObject(NetworkReader) NetworkReaderExtensions.ReadNetworkIdentity(NetworkReader) NetworkReaderExtensions.ReadList<T>(NetworkReader) NetworkReaderExtensions.ReadArray<T>(NetworkReader) NetworkReaderExtensions.ReadUri(NetworkReader)"
  },
  "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_FloatStringStruct_Test.Message.html": {
    "href": "api/Mirror.Tests.Generated.CollectionWriters.ArraySegment_FloatStringStruct_Test.Message.html",
    "title": "Struct ArraySegment_FloatStringStruct_Test.Message",
    "keywords": "Struct ArraySegment_FloatStringStruct_Test.Message Implements NetworkMessage Namespace : Mirror.Tests.Generated.CollectionWriters Assembly : Mirror.Tests.dll Syntax public struct Message : NetworkMessage Fields | Improve this Doc View Source collection Declaration public ArraySegment<FloatStringStruct> collection Field Value Type Description ArraySegment < FloatStringStruct > Implements NetworkMessage"
  },
  "api/Mirror.Weaver.Tests.WeaverSyncSetTests.html": {
    "href": "api/Mirror.Weaver.Tests.WeaverSyncSetTests.html",
    "title": "Class WeaverSyncSetTests",
    "keywords": "Class WeaverSyncSetTests Inheritance Object WeaverTests WeaverTestsBuildFromTestName WeaverSyncSetTests Inherited Members WeaverTestsBuildFromTestName.TestSetup() WeaverTestsBuildFromTestName.IsSuccess() WeaverTestsBuildFromTestName.HasNoErrors() WeaverTestsBuildFromTestName.HasError(String, String) WeaverTestsBuildFromTestName.HasWarning(String, String) WeaverTests.logger WeaverTests.weaverErrors WeaverTests.weaverWarnings WeaverTests.BuildAndWeaveTestAssembly(String, String) WeaverTests.FixtureSetup() WeaverTests.FixtureCleanup() WeaverTests.TestCleanup() Namespace : Mirror.Weaver.Tests Assembly : Mirror.Tests.dll Syntax public class WeaverSyncSetTests : WeaverTestsBuildFromTestName Methods | Improve this Doc View Source SyncSet() Declaration public void SyncSet() | Improve this Doc View Source SyncSetByteValid() Declaration public void SyncSetByteValid() | Improve this Doc View Source SyncSetGenericAbstractInheritance() Declaration public void SyncSetGenericAbstractInheritance() | Improve this Doc View Source SyncSetGenericInheritance() Declaration public void SyncSetGenericInheritance() | Improve this Doc View Source SyncSetInheritance() Declaration public void SyncSetInheritance() | Improve this Doc View Source SyncSetStruct() Declaration public void SyncSetStruct()"
  },
  "api/Mirror.SimpleWeb.WebSocketClientWebGl.html": {
    "href": "api/Mirror.SimpleWeb.WebSocketClientWebGl.html",
    "title": "Class WebSocketClientWebGl",
    "keywords": "Class WebSocketClientWebGl Inheritance Object SimpleWebClient WebSocketClientWebGl Inherited Members SimpleWebClient.Create(Int32, Int32, TcpConfig) SimpleWebClient.maxMessageSize SimpleWebClient.receiveQueue SimpleWebClient.bufferPool SimpleWebClient.state SimpleWebClient.ConnectionState SimpleWebClient.onConnect SimpleWebClient.onDisconnect SimpleWebClient.onData SimpleWebClient.onError SimpleWebClient.ProcessMessageQueue(MonoBehaviour) Namespace : Mirror.SimpleWeb Assembly : SimpleWebTransport.dll Syntax public class WebSocketClientWebGl : SimpleWebClient Methods | Improve this Doc View Source CheckJsConnected() Declaration public bool CheckJsConnected() Returns Type Description Boolean | Improve this Doc View Source Connect(Uri) Declaration public override void Connect(Uri serverAddress) Parameters Type Name Description Uri serverAddress Overrides SimpleWebClient.Connect(Uri) | Improve this Doc View Source Disconnect() Declaration public override void Disconnect() Overrides SimpleWebClient.Disconnect() | Improve this Doc View Source Send(ArraySegment<Byte>) Declaration public override void Send(ArraySegment<byte> segment) Parameters Type Name Description ArraySegment < Byte > segment Overrides SimpleWebClient.Send(ArraySegment<Byte>)"
  },
  "api/Mirror.SyncSet-1.Operation.html": {
    "href": "api/Mirror.SyncSet-1.Operation.html",
    "title": "Enum SyncSet<T>.Operation",
    "keywords": "Enum SyncSet<T>.Operation Namespace : Mirror Assembly : Mirror.dll Syntax public enum Operation : byte Fields Name Description OP_ADD OP_CLEAR OP_REMOVE"
  }
}